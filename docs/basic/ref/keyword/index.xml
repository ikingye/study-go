<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1.1.2 关键字 on Go 学习笔记</title>
    <link>https://kingye.me/study-go/docs/basic/ref/keyword/</link>
    <description>Recent content in 1.1.2 关键字 on Go 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://kingye.me/study-go/docs/basic/ref/keyword/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>defer</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</guid>
      <description>defer #  Go 处理 defer 和 return 的顺序为：
 计算 return 语句的返回值 赋值给匿名 / 有名返回值 执行 defer return 退出函数  Defer 的用途跟其他语言的 ensure 或 finally 类似。
当 defer 释放锁遇到尾递归，会产生死锁 #   如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。
 计算 return 语句的值，赋值给匿名/有名返回值 -&amp;gt; defer -&amp;gt; return 退出函数
var mut = sync.Mutex{} func tailRec(i int) int { mut.Lock() // 加锁  defer mut.Unlock() // defer 释放锁  if i == 10 { return i } i++ return tailRec(i) // return 尾递归 } 以上代码执行会发生死锁，原因是 return 语句后的命令先执行，赋值给匿名返回值后，再调用 defer， 因此尾递归中 tailRec 的加锁会在 defer 释放锁之前进行，形成死锁。</description>
    </item>
    
    <item>
      <title>for 和 range</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/for/</guid>
      <description>for 和 range #  map 遍历 #  Go 在运行时为哈希表的遍历引入不确定性，程序不要依赖于哈希表的稳定遍历</description>
    </item>
    
    <item>
      <title>make</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/make/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/make/</guid>
      <description>make #  运算符:= 是 make() 的语法糖</description>
    </item>
    
    <item>
      <title>select</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/select/</guid>
      <description>select #  Go 的 选择器（select） 让你可以同时等待多个通道操作。
将协程、通道和选择器结合，是 Go 的一个强大特性。
// 在这个例子中，我们将从两个通道中选择。 c1 := make(chan string) c2 := make(chan string) // 各个通道将在一定时间后接收一个值， // 通过这种方式来模拟并行的协程执行（例如，RPC 操作）时造成的阻塞（耗时）。 go func() { time.Sleep(1 * time.Second) c1 &amp;lt;- &amp;#34;one&amp;#34; }() go func() { time.Sleep(2 * time.Second) c2 &amp;lt;- &amp;#34;two&amp;#34; }() // 我们使用 `select` 关键字来同时等待这两个值， // 并打印各自接收到的值。 for i := 0; i &amp;lt; 2; i++ { select { case msg1 := &amp;lt;-c1: fmt.Println(&amp;#34;received&amp;#34;, msg1) case msg2 := &amp;lt;-c2: fmt.</description>
    </item>
    
  </channel>
</rss>
