<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 on Go 学习笔记</title>
    <link>https://ikingye.github.io/study-go/docs/basic/others/</link>
    <description>Recent content in 其他 on Go 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-go/docs/basic/others/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>优劣</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/pros-and-cons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/pros-and-cons/</guid>
      <description>Go 语言优劣 Go 的优点 部署简单  直接编译成机器码 不依赖其他库 直接运行即可部署  静态类型语言 编译时可检测出隐藏的大多数问题
语言层面实现并发（goroutine） 强大的标准库  runtime 系统调度机制 高效的 GC（垃圾回收） 丰富的标准库  简单易学  25 个关键字 内嵌 C 语法支持（CGO） 面向对象 跨平台  背靠大厂（Google） 性能好  Go 的缺点 无泛化类型 传言 Go 2.0 会加上
无 Exception，都用 Error 有争议
包管理大部分在 Github 参考：
 2020 年以后是 Go 的天下吗？  </description>
    </item>
    
    <item>
      <title>Go 热编译</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/gobuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/gobuild/</guid>
      <description>Go 热编译 Go 语言热编译工具 caixw/gobuild  gobuild 是一个简单的 Go 代码热编译工具。 会实时监控指定目录下的文件变化 (重命名，删除，创建，添加)，并编译和运行程序。
gobuild [options] [dependents] options: -h 显示当前帮助信息； -v 显示 gobuild 和 Go 程序的版本信息； -r 是否搜索子目录，默认为 true； -i 是否显示被标记为 IGNORE 的日志内容，默认为 false，即不显示； -o 执行编译后的可执行文件名； -x 传递给编译程序的参数； -ext 需要监视的扩展名，默认值为&amp;#34;go&amp;#34;，区分大小写，会去掉每个扩展名的首尾空格。 若需要监视所有类型文件，请使用 *，传递空值代表不监视任何文件； -main 指定需要编译的文件，默认为&amp;#34;&amp;#34;。 dependents: 指定其它依赖的目录，只能出现在命令的尾部。 penggy/gobuild  EasyDarwin 依赖
# go tools go get -u -v github.com/kardianos/govendor go get -u -v github.com/penggy/gobuild # npm tools npm i -g apidoc npm i -g rimraf </description>
    </item>
    
    <item>
      <title>gopls</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/gopls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/gopls/</guid>
      <description>gopls gopls (pronounced: &amp;ldquo;go please&amp;rdquo;) is the official language server for the Go language.
Go 扩展默认是使用大量的 Go 工具来提供各种功能的， 每个工具提供某个方面的能力，比如代码提示是依靠 gocode 的.
不过微软在开发 VS Code 过程中，定义一种协议，语言服务器协议， Language Server Protocol.
这可是个好东西，如果你需要开发编辑器或 IDE, 就不需要再为每种语言实现诸如自动完成，代码提示等功能了， 直接利用 语言服务器协议 就行了.
gopls 就是官方的语言服务器，当前处于 alpha 状态.</description>
    </item>
    
    <item>
      <title>包管理</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/pm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/pm/</guid>
      <description>包管理 Go 包管理概述 Go 1.4 及之前  必须设置 GOPATH 环境变量，且源代码必须存放在 GOPATH 下 拉取外部依赖包时，总是拉取最新的版本，无法指定需要的版本  设置 GOPATH 环境变量有两个原因：
 它规定了 go get 命令下载的依赖包的存储位置（$GOPATH/src） 通过设置 GOPATH，可以方便 Golang 计算出 import 的路径  Go 1.5 至 Go 1.10 每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包
Go 1.11 至 Go 1.12  默认使用的还是 GOPATH 的管理方式 运行 export GO111MODULE=on，使用 Go Modules  GO111MODULE 为 off 时：
 优先使用 vendor 目录下面的包， 如果 vendor 下面没有搜索到，再搜索 $GOPATH/src 下面的包， 如果 $GOPATH 下面没有搜索到，那么搜索 $GOROOT/src 下面的包  Go 1.</description>
    </item>
    
    <item>
      <title>编译</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/compile/</guid>
      <description>编译 交叉编译 golang 交叉编译很简单的，只要设置几个环境变量就可以了
# mac上编译linux和windows二进制 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build # linux上编译mac和windows二进制 CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build # windows上编译mac和linux二进制 SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.go </description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/test/</guid>
      <description>Go 测试 开源实现 onsi/ginkgo  BDD Testing Framework for Go</description>
    </item>
    
  </channel>
</rss>