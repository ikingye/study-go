<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1.4 其他 on Go 学习笔记</title><link>https://kingye.me/study-go/docs/basic/others/</link><description>Recent content in 1.4 其他 on Go 学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/study-go/docs/basic/others/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 快速上手</title><link>https://kingye.me/study-go/docs/basic/others/quick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/quick/</guid><description>&lt;h1 id="go-快速上手">
 Go 快速上手
 &lt;a class="anchor" href="#go-%e5%bf%ab%e9%80%9f%e4%b8%8a%e6%89%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-环境">
 Go 环境
 &lt;a class="anchor" href="#go-%e7%8e%af%e5%a2%83">#&lt;/a>
&lt;/h2>
&lt;h3 id="goroot">
 GOROOT
 &lt;a class="anchor" href="#goroot">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>GOROOT&lt;/code>: 指定安装 GO 的根目录&lt;/p>
&lt;p>Go 1.0 之后，&lt;code>go tool&lt;/code> 利用 &lt;code>GOROOT&lt;/code> 查找
Go 编译器（保存在 &lt;code>$GOROOT/pkg/tool/$GOOS_$GOARCH&lt;/code>）
和标准库（在 &lt;code>$GOROOT/pkg/$GOOS_$GOARCH&lt;/code>）&lt;/p>
&lt;p>可以将 &lt;code>GOROOT&lt;/code> 理解为 Java 的 &lt;code>JAVA_HOME&lt;/code>。&lt;/p>
&lt;p>我们不应该设置 GOROOT，是因为 Go 工具链已经内置了正确的值。
除非：&lt;/p>
&lt;ul>
&lt;li>如果你是 Linux、FreeBSD 或者 OS X 用户，下载了 zip 和 tarball 的二进制包安装环境。这些二进制的默认环境位于 /usr/local/go，建议你将 Go 安装到这个位置。如果选择不这么做，就必须设置到你指定的目录下。&lt;/li>
&lt;li>如果你是 Windows 用户，使用 zip 二进制包安装，默认的 GOROOT 在 C:\Go 目录下。如果你将 Go 安装在其他位置，请设置 GOROOT 到指定的目录。&lt;/li>
&lt;/ul>
&lt;h3 id="gopath">
 GOPATH
 &lt;a class="anchor" href="#gopath">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>GOPATH&lt;/code>: go 包的位置&lt;/p></description></item><item><title>优劣</title><link>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</guid><description>&lt;h1 id="go-语言优劣">
 Go 语言优劣
 &lt;a class="anchor" href="#go-%e8%af%ad%e8%a8%80%e4%bc%98%e5%8a%a3">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-的优点">
 Go 的优点
 &lt;a class="anchor" href="#go-%e7%9a%84%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h3 id="部署简单">
 部署简单
 &lt;a class="anchor" href="#%e9%83%a8%e7%bd%b2%e7%ae%80%e5%8d%95">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>直接编译成机器码&lt;/li>
&lt;li>不依赖其他库&lt;/li>
&lt;li>直接运行即可部署&lt;/li>
&lt;/ol>
&lt;h3 id="静态类型语言">
 静态类型语言
 &lt;a class="anchor" href="#%e9%9d%99%e6%80%81%e7%b1%bb%e5%9e%8b%e8%af%ad%e8%a8%80">#&lt;/a>
&lt;/h3>
&lt;p>编译时可检测出隐藏的大多数问题&lt;/p>
&lt;h3 id="语言层面实现并发goroutine">
 语言层面实现并发（goroutine）
 &lt;a class="anchor" href="#%e8%af%ad%e8%a8%80%e5%b1%82%e9%9d%a2%e5%ae%9e%e7%8e%b0%e5%b9%b6%e5%8f%91goroutine">#&lt;/a>
&lt;/h3>
&lt;h3 id="强大的标准库">
 强大的标准库
 &lt;a class="anchor" href="#%e5%bc%ba%e5%a4%a7%e7%9a%84%e6%a0%87%e5%87%86%e5%ba%93">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>runtime 系统调度机制&lt;/li>
&lt;li>高效的 GC（垃圾回收）&lt;/li>
&lt;li>丰富的标准库&lt;/li>
&lt;/ol>
&lt;h3 id="简单易学">
 简单易学
 &lt;a class="anchor" href="#%e7%ae%80%e5%8d%95%e6%98%93%e5%ad%a6">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>25 个关键字&lt;/li>
&lt;li>内嵌 C 语法支持（CGO）&lt;/li>
&lt;li>面向对象&lt;/li>
&lt;li>跨平台&lt;/li>
&lt;/ol>
&lt;h3 id="背靠大厂google">
 背靠大厂（Google）
 &lt;a class="anchor" href="#%e8%83%8c%e9%9d%a0%e5%a4%a7%e5%8e%82google">#&lt;/a>
&lt;/h3>
&lt;h3 id="性能好">
 性能好
 &lt;a class="anchor" href="#%e6%80%a7%e8%83%bd%e5%a5%bd">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200524204903.png" alt="" />&lt;/p>
&lt;hr>
&lt;h2 id="go-的缺点">
 Go 的缺点
 &lt;a class="anchor" href="#go-%e7%9a%84%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h3 id="无泛化类型">
 无泛化类型
 &lt;a class="anchor" href="#%e6%97%a0%e6%b3%9b%e5%8c%96%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h3>
&lt;p>传言 Go 2.0 会加上&lt;/p>
&lt;h3 id="无-exception都用-error">
 无 Exception，都用 Error
 &lt;a class="anchor" href="#%e6%97%a0-exception%e9%83%bd%e7%94%a8-error">#&lt;/a>
&lt;/h3>
&lt;p>有争议&lt;/p>
&lt;h3 id="包管理大部分在-github">
 包管理大部分在 Github
 &lt;a class="anchor" href="#%e5%8c%85%e7%ae%a1%e7%90%86%e5%a4%a7%e9%83%a8%e5%88%86%e5%9c%a8-github">#&lt;/a>
&lt;/h3>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/379439622/answer/1111390872">2020 年以后是 Go 的天下吗？&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go build</title><link>https://kingye.me/study-go/docs/basic/others/gobuild/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gobuild/</guid><description>&lt;h1 id="go-build">
 Go build
 &lt;a class="anchor" href="#go-build">#&lt;/a>
&lt;/h1>
&lt;h2 id="-tag">
 &lt;code>-tag&lt;/code>
 &lt;a class="anchor" href="#-tag">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>// +build dev&lt;/code> 前后须有一个空行隔开&lt;/p>
&lt;ul>
&lt;li>&lt;code>release_config.go&lt;/code> 文件&lt;/li>
&lt;li>&lt;code>go build -tags dev -o dev_version&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// +build dev
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;DEV&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>dev_config.go&lt;/code> 文件&lt;/li>
&lt;li>&lt;code>go build -tags dev -o dev_version&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// +build release
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;RELEASE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="go-热编译工具">
 Go 热编译工具
 &lt;a class="anchor" href="#go-%e7%83%ad%e7%bc%96%e8%af%91%e5%b7%a5%e5%85%b7">#&lt;/a>
&lt;/h2>
&lt;h3 id="caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg">
 &lt;a href="https://github.com/caixw/gobuild">caixw/gobuild&lt;/a> &lt;img src="https://img.shields.io/github/stars/caixw/gobuild.svg" alt="Github stars" />
 &lt;a class="anchor" href="#caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg">#&lt;/a>
&lt;/h3>
&lt;p>gobuild 是一个简单的 Go 代码热编译工具。 会实时监控指定目录下的文件变化 (重命名，删除，创建，添加)，并编译和运行程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gobuild &lt;span style="color:#f92672">[&lt;/span>options&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>dependents&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h 显示当前帮助信息；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v 显示 gobuild 和 Go 程序的版本信息；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -r 是否搜索子目录，默认为 true；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i 是否显示被标记为 IGNORE 的日志内容，默认为 false，即不显示；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o 执行编译后的可执行文件名；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -x 传递给编译程序的参数；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -ext 需要监视的扩展名，默认值为&lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span>，区分大小写，会去掉每个扩展名的首尾空格。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 若需要监视所有类型文件，请使用 *，传递空值代表不监视任何文件；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -main 指定需要编译的文件，默认为&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependents:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 指定其它依赖的目录，只能出现在命令的尾部。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg">
 &lt;a href="https://github.com/penggy/gobuild">penggy/gobuild&lt;/a> &lt;img src="https://img.shields.io/github/stars/penggy/gobuild.svg" alt="Github stars" />
 &lt;a class="anchor" href="#penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg">#&lt;/a>
&lt;/h4>
&lt;p>EasyDarwin 依赖&lt;/p></description></item><item><title>Go Modules</title><link>https://kingye.me/study-go/docs/basic/others/gomod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gomod/</guid><description>&lt;h1 id="go-moduleshttpsgolangorgrefmod">
 &lt;a href="https://golang.org/ref/mod">Go Modules&lt;/a>
 &lt;a class="anchor" href="#go-moduleshttpsgolangorgrefmod">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.golang.org/using-go-modules">Using Go Modules&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="import">
 import
 &lt;a class="anchor" href="#import">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;目录&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 调用是使用 go 文件里的 package xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">xxx&lt;/span>.&lt;span style="color:#a6e22e">Function&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="klog-import">
 klog import
 &lt;a class="anchor" href="#klog-import">#&lt;/a>
&lt;/h3>
&lt;p>klog 库 &lt;code>https://github.com/kubernetes/klog&lt;/code>&lt;/p>
&lt;p>它的 &lt;code>go.mod&lt;/code> 第一行是 &lt;code>module k8s.io/klog/v2&lt;/code>&lt;/p>
&lt;p>根目录有个文件 &lt;code>klog.go&lt;/code>，第一行 &lt;code>package klog&lt;/code>&lt;/p>
&lt;p>所以我们在使用 klog 库时，&lt;/p>
&lt;p>&lt;code>import k8s.io/klog/v2&lt;/code> 就是 import 了这个库的根目录，根目录的 &lt;code>*.go&lt;/code> 文件，&lt;code>package&lt;/code> 都是 &lt;code>klog&lt;/code>&lt;/p>
&lt;p>所以我们使用的时候，直接 &lt;code>klog.Info()&lt;/code> 就行。&lt;/p>
&lt;p>klog 库自身升级，只需要在它的 &lt;code>go.mod&lt;/code> 里第一行改成 &lt;code>module k8s.io/klog/v3&lt;/code> 就行。&lt;/p>
&lt;p>而我们使用新版本，也只需要改成 &lt;code>import k8s.io/klog/v3&lt;/code>，里面 &lt;code>klog.Info()&lt;/code> 都不用改（如果接口兼容的话）。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/43579838/relationship-between-a-package-statement-and-the-directory-of-a-go-file">Relationship between a package statement and the directory of a .go file&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>gopls</title><link>https://kingye.me/study-go/docs/basic/others/gopls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gopls/</guid><description>&lt;h1 id="goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd">
 &lt;a href="https://github.com/golang/tools/blob/master/gopls/README.md">gopls&lt;/a>
 &lt;a class="anchor" href="#goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd">#&lt;/a>
&lt;/h1>
&lt;p>gopls (pronounced: &amp;ldquo;go please&amp;rdquo;) is the official &lt;a href="https://langserver.org/">language server&lt;/a> for the Go language.&lt;/p>
&lt;p>Go 扩展默认是使用大量的 Go 工具来提供各种功能的，
每个工具提供某个方面的能力，比如代码提示是依靠 gocode 的.&lt;/p>
&lt;p>不过微软在开发 VS Code 过程中，定义一种协议，语言服务器协议，
Language Server Protocol.&lt;/p>
&lt;p>这可是个好东西，如果你需要开发编辑器或 IDE,
就不需要再为每种语言实现诸如自动完成，代码提示等功能了，
直接利用 语言服务器协议 就行了.&lt;/p>
&lt;p>gopls 就是官方的语言服务器，当前处于 alpha 状态.&lt;/p></description></item><item><title>包管理</title><link>https://kingye.me/study-go/docs/basic/others/pm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/pm/</guid><description>&lt;h1 id="包管理">
 包管理
 &lt;a class="anchor" href="#%e5%8c%85%e7%ae%a1%e7%90%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-包管理概述">
 Go 包管理概述
 &lt;a class="anchor" href="#go-%e5%8c%85%e7%ae%a1%e7%90%86%e6%a6%82%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="go-14-及之前">
 Go 1.4 及之前
 &lt;a class="anchor" href="#go-14-%e5%8f%8a%e4%b9%8b%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>必须设置 &lt;code>GOPATH&lt;/code> 环境变量，且源代码必须存放在 &lt;code>GOPATH&lt;/code> 下&lt;/li>
&lt;li>拉取外部依赖包时，总是拉取最新的版本，无法指定需要的版本&lt;/li>
&lt;/ul>
&lt;p>设置 &lt;code>GOPATH&lt;/code> 环境变量有两个原因：&lt;/p>
&lt;ul>
&lt;li>它规定了 &lt;code>go get&lt;/code> 命令下载的依赖包的存储位置（&lt;code>$GOPATH/src&lt;/code>）&lt;/li>
&lt;li>通过设置 &lt;code>GOPATH&lt;/code>，可以方便 Golang 计算出 import 的路径&lt;/li>
&lt;/ul>
&lt;h3 id="go-15-至-go-110">
 Go 1.5 至 Go 1.10
 &lt;a class="anchor" href="#go-15-%e8%87%b3-go-110">#&lt;/a>
&lt;/h3>
&lt;p>每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包&lt;/p>
&lt;h3 id="go-111-至-go-112">
 Go 1.11 至 Go 1.12
 &lt;a class="anchor" href="#go-111-%e8%87%b3-go-112">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>默认使用的还是 GOPATH 的管理方式&lt;/li>
&lt;li>运行 &lt;code>export GO111MODULE=on&lt;/code>，使用 &lt;code>Go Modules&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>GO111MODULE&lt;/code> 为 &lt;code>off&lt;/code> 时：&lt;/p>
&lt;ol>
&lt;li>优先使用 &lt;code>vendor&lt;/code> 目录下面的包，&lt;/li>
&lt;li>如果 &lt;code>vendor&lt;/code> 下面没有搜索到，再搜索 &lt;code>$GOPATH/src&lt;/code> 下面的包，&lt;/li>
&lt;li>如果 &lt;code>$GOPATH&lt;/code> 下面没有搜索到，那么搜索 &lt;code>$GOROOT/src&lt;/code> 下面的包&lt;/li>
&lt;/ol>
&lt;h3 id="go-113-及之后">
 Go 1.13 及之后
 &lt;a class="anchor" href="#go-113-%e5%8f%8a%e4%b9%8b%e5%90%8e">#&lt;/a>
&lt;/h3>
&lt;p>Golang 的包管理默认使用 &lt;code>Go Modules&lt;/code>&lt;/p></description></item><item><title>编译</title><link>https://kingye.me/study-go/docs/basic/others/compile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/compile/</guid><description>&lt;h1 id="编译">
 编译
 &lt;a class="anchor" href="#%e7%bc%96%e8%af%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="makefile">
 Makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h2>
&lt;h3 id="go-makefile-样例">
 Go Makefile 样例
 &lt;a class="anchor" href="#go-makefile-%e6%a0%b7%e4%be%8b">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">include&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROJECTNAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>shell basename &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PWD&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Go related variables.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>GOBASE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>shell pwd&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/vendor:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOFILES&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.go&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Redirect error output to a file, so we can show it in development mode.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>STDERR&lt;span style="color:#f92672">=&lt;/span>/tmp/.&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>-stderr.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># PID file will keep the process id of the server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>PID&lt;span style="color:#f92672">=&lt;/span>/tmp/.&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Make is verbose in Linux. Make it silent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>MAKEFLAGS &lt;span style="color:#f92672">+=&lt;/span> --silent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## install: Install missing dependencies. Runs `go get` internally. e.g; make install get=github.com/foo/bar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">install&lt;/span>&lt;span style="color:#f92672">:&lt;/span> go-get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## start: Start in development mode. Auto-starts when code changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bash -c &lt;span style="color:#e6db74">&amp;#34;trap &amp;#39;make stop&amp;#39; EXIT; &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>MAKE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> compile start-server watch run=&amp;#39;make compile start-server&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## stop: Stop development mode.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">stop&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">start-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> is available at &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ADDR&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span>/&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span> 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> &amp;amp; echo $$! &amp;gt; &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@cat &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#34;/^/s/^/ \&amp;gt; PID: /&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">stop-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-touch &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-kill &lt;span style="color:#e6db74">`&lt;/span>cat &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">`&lt;/span> 2&amp;gt; /dev/null &lt;span style="color:#f92672">||&lt;/span> true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-rm &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## watch: Run given command when code changes. e.g; make watch run=&amp;#34;echo &amp;#39;hey&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> yolo -i . -e vendor -e bin -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>run&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">restart-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server start-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## compile: Compile the binary.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">compile&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-touch &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-rm &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-&lt;span style="color:#66d9ef">$(&lt;/span>MAKE&lt;span style="color:#66d9ef">)&lt;/span> -s go-compile 2&amp;gt; &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@cat &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;1s/.*/\nError:\n/&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/make\[.*/ /&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#34;/^/s/^/ /&amp;#34;&lt;/span> 1&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## exec: Run given command, wrapped with custom GOPATH. e.g; make exec run=&amp;#34;go test ./...&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">exec&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>run&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## clean: Clean build files. Runs `go clean` internally.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@&lt;span style="color:#f92672">(&lt;/span>MAKEFILE&lt;span style="color:#f92672">)&lt;/span> go-clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-compile&lt;/span>&lt;span style="color:#f92672">:&lt;/span> go-clean go-get go-build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-build&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Building binary...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go build -o &lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span>/&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>GOFILES&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-generate&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Generating dependency files...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go generate &lt;span style="color:#66d9ef">$(&lt;/span>generate&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-get&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Checking if there is any missing dependencies...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go get &lt;span style="color:#66d9ef">$(&lt;/span>get&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-install&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go install &lt;span style="color:#66d9ef">$(&lt;/span>GOFILES&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Cleaning build cache&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; Choose a command run in &amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@sed -n &lt;span style="color:#e6db74">&amp;#39;s/^##//p&amp;#39;&lt;/span> $&amp;lt; | column -t -s &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;s/^/ /&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考：&lt;/p></description></item><item><title>历史</title><link>https://kingye.me/study-go/docs/basic/others/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/history/</guid><description>&lt;h1 id="go-历史">
 Go 历史
 &lt;a class="anchor" href="#go-%e5%8e%86%e5%8f%b2">#&lt;/a>
&lt;/h1></description></item><item><title>Go 插件系统</title><link>https://kingye.me/study-go/docs/basic/others/plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/plugin/</guid><description>&lt;h1 id="go-插件系统">
 Go 插件系统
 &lt;a class="anchor" href="#go-%e6%8f%92%e4%bb%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h1>
&lt;p>Go 1.8 版本开始提供了一个创建共享库的新工具，称为 &lt;code>Plugins&lt;/code>.&lt;/p>
&lt;p>Go 插件是使用 &lt;code>-buildmode=plugin&lt;/code> 标记编译的一个包，用于生成一个共享对象（&lt;code>.so&lt;/code>）库文件。
Go 包中的导出的函数和变量被公开为 &lt;code>ELF&lt;/code> 符号，可以使用 plugin 包在运行时查找并绑定 &lt;code>ELF&lt;/code> 符号。&lt;/p>
&lt;p>Go 编译器能够使用 build flag &lt;code>-buildmode=c-shared&lt;/code> 创建 C 风格的动态共享库。&lt;/p>
&lt;hr>
&lt;h2 id="编写-plugin">
 编写 plugin
 &lt;a class="anchor" href="#%e7%bc%96%e5%86%99-plugin">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>包名称必须是 &lt;code>main&lt;/code>&lt;/li>
&lt;li>&lt;strong>没有 main 函数&lt;/strong>&lt;/li>
&lt;li>必须有可以导出 (访问) 的变量或者方法&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="使用-plugin">
 使用 plugin
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-plugin">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>加载编译好的插件 &lt;code>plugin.Open(&amp;quot;./plugin_doctor.so&amp;quot;)&lt;/code> (&lt;code>*.so&lt;/code> 文件路径相对与可执行文件的路径，可以是绝对路径)&lt;/li>
&lt;li>寻找插件可到变量 &lt;code>plug.Lookup(&amp;quot;Doctor&amp;quot;)&lt;/code>,&lt;/li>
&lt;li>&lt;code>TypeAssert: Symbol (interface {})&lt;/code> 转换成 API 的接口类型&lt;/li>
&lt;li>执行 API interface 的方法&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="优点">
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h2 id="缺陷">
 缺陷
 &lt;a class="anchor" href="#%e7%bc%ba%e9%99%b7">#&lt;/a>
&lt;/h2>
&lt;p>插件实现和主应用程序都必须使用完全相同的 Go 工具链版本构建。
由于插件提供的代码将与主代码在相同的进程空间中运行，因此编译的二进制文件应与主应用程序 100% 兼容。&lt;/p></description></item><item><title>goroutine</title><link>https://kingye.me/study-go/docs/basic/others/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/goroutine/</guid><description>&lt;h1 id="goroutine">
 goroutine
 &lt;a class="anchor" href="#goroutine">#&lt;/a>
&lt;/h1>
&lt;h2 id="golang-并发模型">
 golang 并发模型
 &lt;a class="anchor" href="#golang-%e5%b9%b6%e5%8f%91%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;h2 id="goroutine-记得-return-或者中断不然容易造成-goroutine-占用大量-cpu">
 goroutine 记得 return 或者中断，不然容易造成 goroutine 占用大量 CPU
 &lt;a class="anchor" href="#goroutine-%e8%ae%b0%e5%be%97-return-%e6%88%96%e8%80%85%e4%b8%ad%e6%96%ad%e4%b8%8d%e7%84%b6%e5%ae%b9%e6%98%93%e9%80%a0%e6%88%90-goroutine-%e5%8d%a0%e7%94%a8%e5%a4%a7%e9%87%8f-cpu">#&lt;/a>
&lt;/h2>
&lt;hr>
&lt;h2 id="goroutine-如何调度">
 Goroutine 如何调度？
 &lt;a class="anchor" href="#goroutine-%e5%a6%82%e4%bd%95%e8%b0%83%e5%ba%a6">#&lt;/a>
&lt;/h2>
&lt;p>每个线程会都占用 &lt;code>1MB&lt;/code> 以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，
每一次线程上下文的切换都需要消耗约为 &lt;code>1us&lt;/code>，
但是 Go 调度器对 Goroutine 的上下文切换约为 &lt;code>0.2us&lt;/code>，减少了 80% 的额外开销。&lt;/p>
&lt;p>Go 语言的调度器通过&lt;strong>使用与 CPU 数量相等的线程&lt;/strong>减少线程频繁切换的内存开销，
同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。&lt;/p>
&lt;hr>
&lt;p>一个 Goroutine 既要包含要执行的代码， 又要包含用于执行该代码的&lt;code>栈&lt;/code>和 &lt;code>PC&lt;/code>、&lt;code>SP 指针&lt;/code>。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/">Go 语言调度器与 Goroutine 实现原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://colobu.com/2017/05/04/go-scheduler/">[译] Go 调度器: M, P 和 G&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/">也谈 goroutine 调度器&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html">Golang 调度器源码分析&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>版本</title><link>https://kingye.me/study-go/docs/basic/others/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/version/</guid><description>&lt;h1 id="go-版本">
 Go 版本
 &lt;a class="anchor" href="#go-%e7%89%88%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://github.com/golang/go">golang/go&lt;/a> &lt;img src="https://img.shields.io/github/stars/golang/go.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/golang/go.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/golang/go.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/golang/go.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/golang/go.svg" alt="Last commit" />&lt;/p>
&lt;h2 id="版本历史httpsgolangorgdocdevelreleasehtml">
 &lt;a href="https://golang.org/doc/devel/release.html">版本历史&lt;/a>
 &lt;a class="anchor" href="#%e7%89%88%e6%9c%ac%e5%8e%86%e5%8f%b2httpsgolangorgdocdevelreleasehtml">#&lt;/a>
&lt;/h2>
&lt;h3 id="120httpsgolangorgdocgo120">
 &lt;a href="https://golang.org/doc/go1.20">1.20&lt;/a>
 &lt;a class="anchor" href="#120httpsgolangorgdocgo120">#&lt;/a>
&lt;/h3>
&lt;h3 id="119httpsgolangorgdocgo119-2022-08-02">
 &lt;a href="https://golang.org/doc/go1.19">1.19&lt;/a> (2022-08-02)
 &lt;a class="anchor" href="#119httpsgolangorgdocgo119-2022-08-02">#&lt;/a>
&lt;/h3>
&lt;p>它的大部分变化是在工具链、运行时和库的实现方面。&lt;/p>
&lt;h3 id="118httpsgolangorgdocgo118-2022-03-15">
 &lt;a href="https://golang.org/doc/go1.18">1.18&lt;/a> (2022-03-15)
 &lt;a class="anchor" href="#118httpsgolangorgdocgo118-2022-03-15">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>范型&lt;/li>
&lt;/ul>
&lt;h3 id="117httpsgolangorgdocgo117-2021-08-16">
 &lt;a href="https://golang.org/doc/go1.17">1.17&lt;/a> (2021-08-16)
 &lt;a class="anchor" href="#117httpsgolangorgdocgo117-2021-08-16">#&lt;/a>
&lt;/h3>
&lt;p>支持从切片到数组指针的转换。&lt;/p>
&lt;h3 id="116httpsgolangorgdocgo116-2021-02-16">
 &lt;a href="https://golang.org/doc/go1.16">1.16&lt;/a> (2021-02-16)
 &lt;a class="anchor" href="#116httpsgolangorgdocgo116-2021-02-16">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>go build&lt;/code> / &lt;code>go run&lt;/code>命令不再自动更新 go.mod 和 go.sum 了
&lt;ul>
&lt;li>需要使用 &lt;code>go get&lt;/code>&lt;/li>
&lt;li>&lt;code>go mod tidy&lt;/code> 依然执行对 go.mod 的清理&lt;/li>
&lt;li>&lt;code>自动更新 go.mod&lt;/code> &amp;ndash;&amp;gt; &lt;code>-mod=readonly 选项避免自动更新 go.mod&lt;/code> &amp;ndash;&amp;gt; &lt;code>取消自动更新 go.mod&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>后续，Go 团队会让 go get 将专注于分析依赖，并获取 go 包/module，更新 go.mod/go.sum，而不再具有安装可执行 Go 程序的行为能力，
这样 go get 和 go install 就会各司其职，Gopher 们也不会再被两者的重叠行为所迷惑了。
现在如果不想 go get 编译安装，可使用 &lt;code>go get -d&lt;/code>&lt;/p></description></item></channel></rss>