<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据类型 on Go 学习笔记</title>
    <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/</link>
    <description>Recent content in 数据类型 on Go 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-go/docs/basic/grammar/type/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interface</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/interface/</guid>
      <description>Go Interface </description>
    </item>
    
    <item>
      <title>Chiannel</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/channel/</guid>
      <description>Chiannel 注意点  无缓冲 chan 的发送和接收是否同步 channel 一定记得 close channel 是通过注册相关 goroutine id 实现消息通知的  Golang chan 避免死锁 Golang 的管道 (chan) 无论是否有缓冲，生产者和消费者不可能做到完全解耦，一旦管道满了，就相当于生产者直接调用消费者。如果生产者和消费者使用同一个锁，就是死锁了.
所以，一个重要的原则就是，在写管道之前，把所有可能的锁 unlock 掉.
Related posts:
 异步编程语言的常见坑 CVPixelBufferRef 与 CVOpenGLTextureRef: 图像处理中内存与显存的交互 集成于 iphp 框架的 PHP 并发模型和工具 蛇形遍历数组 流式布局的原理和代码实现  参考  Golang chan 避免死锁  </description>
    </item>
    
  </channel>
</rss>