'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-go/docs/basic/grammar/keyword/','title':"关键字",'content':"Go 语言关键字 for 与 range select defer panic 与 recover make 与 new "});index.add({'id':1,'href':'/study-go/docs/appendix/tutorial/','title':"教程",'content':"Go 教程 基础 astaxie/build-web-application-with-golang A golang ebook intro how to build a web with golang\nmmcgrana/gobyexample Go by Example\n中文翻译：通过例子学 Golang：https://gobyexample-cn.github.io/\ngeektutu/7days-golang 7 天用 Go 动手写 / 从零实现系列\n进阶 Go 语言设计与实现 by Draveness 高阶 "});index.add({'id':2,'href':'/study-go/docs/basic/practice/spec/baidu/','title':"百度",'content':"百度 Golang 编码规范 V1.2 "});index.add({'id':3,'href':'/study-go/docs/basic/grammar/','title':"第一章 Go 基本语法",'content':""});index.add({'id':4,'href':'/study-go/docs/basic/','title':"第一部分 基础入门",'content':""});index.add({'id':5,'href':'/study-go/docs/basic/practice/spec/','title':"编程规范",'content':"Go 编程规范 代码组织 建议文件按以下顺序进行布局：\n General Documentation: 对整个模块和功能的完整描述注释，写在文件头部。 package: 当前 package 定义 imports: 包含的头文件 Constants: 常量 Typedefs: 类型定义 Globals: 全局变量定义 functions: 函数实现   语言规范 申明 slice 申明 slice 时，建议使用 var 方式申明，不建议使用大括号的方式\n// GOOD: var t []string // BAD: t := []string{} embedding  embedding 只用于 \u0026ldquo;is a\u0026rdquo; 的语义下，而不用于 \u0026ldquo;has a\u0026rdquo; 的语义下  语义上 embedding 是一种继承关系，而不是成员关系   一个定义内，多于一个的 embedding 尽量少用  一个定义内有多个 embedding，则很难判断某个成员变量或函数是从哪里继承得到的 一个定义内有多个 embedding，危害和在 python 中使用 from xxx import * 是类似的    type Automobile struct { // ... } type Engine struct { // .... } // GOOD: type Car struct { Automobile // Car is a Automobile  engine Engine // Car has a Engine } // BAD: type Car struct { Automobile // Car is a Automobile  Engine // Car has a Engine, but Car is NOT a Engine } 函数参数和返回值   必须\n 函数返回值小于等于 3 个，大于 3 个时必须通过 struct 进行包装    建议\n 函数参数不建议超过 3 个，大于 3 个时建议通过 struct 进行包装 函数返回值  逻辑判断型：返回值的意义代表 “真” 或 “假”，返回值类型定义为 bool 操作型：返回值的意义代表 “成功” 或 “失败”，返回值类型定义为 error 获取数据型：返回值的意义代表 “有数据” 或 “无数据 / 获取数据失败”，返回值类型定义为（data, error）      缩进  使用 tab 进行缩进。 跨行的缩进使用 gofmt 的缩进方式。 设置 tabstop=4  空格  圆括号、方括号、花括号内侧都不加空格 逗号、冒号（slice 中冒号除外）前不加空格，后边加一个空格 所有二元运算符前后各加一个空格（作为函数参数时除外）  var ( s = make([]int, 10) ) // GOOD： func foo() { m := map[string]string{\u0026#34;language\u0026#34;: \u0026#34;golang\u0026#34;} r := 1 + 2 func1(1+2) fmt.Println(m[\u0026#34;language\u0026#34;]) } // BAD： func foo() { m := map[string]string{ \u0026#34;language\u0026#34; : \u0026#34;golang\u0026#34; } r := 1+2 func1(1 + 2) fmt.Println(m[ \u0026#34;language\u0026#34; ]) }  命名 文件名 文件名都使用小写字母，如果需要，可以使用下划线分割\n文件名的后缀使用小写字母\n函数名 / 变量名 采用驼峰方式命名，禁止使用下划线命名\n首字母是否大写，根据是否需要外部访问来决定\n常量 尽量不要在程序中直接写数字，特殊字符串，全部用常量替代\n 编程实践 error string error string 尽量使用小写字母，并且结尾不带标点符号\nDon't panic 除非出现不可恢复的程序错误，不要使用 panic，用多返回值和 error。\n关于 lock 的保护  如果临界区内的逻辑较复杂、无法完全避免 panic 的发生，则要求适用 defer 来调用 Unlock，即使在临界区过程中发生了 panic，也会在函数退出时调用 Unlock 释放锁  go 提供了 recover，可以对 panic 进行捕获，但如果 panic 发生在临界区内，则可能导致对锁的使用没有释放 这种情况下，即使 panic 不会导致整个程序的奔溃，也会由于” 锁不释放 “的问题而使临界区无法被后续的调用访问     上述操作如果造成临界区扩大后，需要建立单独的一个函数访问临界区。  func doDemo() { lock.Lock() // step1: 临界区内的操作  lock.Unlock() // step2: 临界区外的操作 } // 如果改造为 defer 的方式，变为如下代码，实际上扩大了临界区的范围（step2 的操作也被放置在临界区了） func doDemo() { lock.Lock() defer lock.Unlock() // step1: 临界区内的操作  // step2: 临界区外的操作 } // 需要使用单独的匿名函数，专门用于访问临界区 func doDemo() { func() { lock.Lock() defer lock.Unlock() // step1: 临界区内的操作操作  }() // step2: 临界区外的操作 } unsafe package  除非特殊原因，不建议使用 unsafe package  比如进行指针和数值 uintptr 之间转换就是一个特殊原因    "});index.add({'id':6,'href':'/study-go/docs/appendix/interview/basic/','title':"基础",'content':"基础面试题 "});index.add({'id':7,'href':'/study-go/docs/basic/practice/package/','title':"常用 package",'content':"Go 常用 package web gorilla/mux A powerful HTTP router and URL matcher for building Go web servers\ngithubnemo/CompileDaemon Watches your .go files in a directory and invokes go build if a file changed.\nUsage:\n./CompileDaemon -directory=yourproject/\n"});index.add({'id':8,'href':'/study-go/docs/basic/grammar/datastruct/','title':"数据结构",'content':"Go 语言数据结构 字符串 数组 切片 哈希表 m := make(map[string]string) "});index.add({'id':9,'href':'/study-go/docs/design/','title':"第二部分 设计",'content':""});index.add({'id':10,'href':'/study-go/docs/appendix/interview/advanced/','title':"进阶",'content':"进阶面试题 "});index.add({'id':11,'href':'/study-go/docs/appendix/interview/','title':"面试题",'content':"Go 语言面试题 基础题 进阶题 高阶题 "});index.add({'id':12,'href':'/study-go/docs/source/','title':"第三部分 源码实现",'content':""});index.add({'id':13,'href':'/study-go/docs/appendix/interview/expert/','title':"高阶",'content':"高阶面试题 "});index.add({'id':14,'href':'/study-go/docs/appendix/','title':"第四部分 附录",'content':""});index.add({'id':15,'href':'/study-go/docs/basic/version/','title':"版本",'content':"Go 版本 golang/go 版本控制 moovweb/gvm 安装：\nzsh \u0026lt; \u0026lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 版本历史 1.14 (2020/02/25) 1.14 (2020/02/25) 1.13 (2019/09/03) 1.12 (2019/02/25) 1.11 (2018/08/24) 1.10 (2018/02/16) 1.9 (2017/08/24) 1.8 (2017/02/16) 1.7 (2016/08/15) 1.6 (2016/02/17) 1.5 (2015/08/19) Go 1.5 开始，使用 Go 自举实现。\n1.4 (2014/12/10) Go 1.4 之前是 C 实现。\n1.3 (2014/06/18) 1.2 (2013/12/01) 1.1 (2013/05/13) 1 (2012/03/28) "});index.add({'id':16,'href':'/study-go/docs/design/runtime/init/','title':"Go 初始化",'content':"Go 初始化 golang 程序初始化先于 main 函数执行，由 runtime 进行初始化，初始化顺序如下：\n 初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime 需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见 golang 变量的初始化）； 初始化包作用域的变量（该作用域的变量的初始化也并非按照 “从上到下、从左到右” 的顺序，runtime 解析变量依赖关系，没有依赖的变量最先初始化，参见 golang 变量的初始化）； 执行包的 init 函数；   变量初始化 -\u0026gt;init ()-\u0026gt;main () 由于 pack 包的初始化依赖 test_util，因此运行时先初始化 test_util 再初始化 pack 包；   同一个包不同源文件的 init 函数执行顺序，golang spec 没做说明  一般是源文件名称的字典序，但不能依赖这个假定     在每一个初始化周期，运行时（runtime）会挑选一个没有任何依赖的变量初始化  该过程一直持续到所有的变量均被初始化或者出现依赖嵌套的情形   同一个 package 下多个文件的变量初始化依赖也遵循相同的规则   变量初始化 不同作用域类型的变量初始化顺序不同\n函数作用域内的局部变量 初始化顺序：从左到右、从上到下\npackage 级别的变量 初始化顺序与初始化依赖有关\n "});index.add({'id':17,'href':'/study-go/docs/basic/grammar/func/init/','title':"init 函数",'content':"init 函数  作用  初始化不能采用初始化表达式初始化的变量 程序运行前的注册 实现 sync.Once 功能   特点  init 函数先于 main 函数自动执行 init 不能被其他函数调用 init 函数没有输入参数、返回值 每个包可以有多个 init 函数  包的每个源文件也可以有多个 init 函数   同一个包的 init 执行顺序，golang 没有明确定义，编程时要注意程序不要依赖这个执行顺序 不同包的 init 函数按照包导入的依赖关系决定执行顺序   问答 只想调用该包的 init 函数，不使用包导出的变量或者方法 import _ \u0026#34;net/http/pprof\u0026#34; 执行上述导入后，init 函数会启动一个异步协程采集该进程实例的资源占用情况，并以 http 服务接口方式提供给用户查询。\n 参考 "});index.add({'id':18,'href':'/study-go/docs/basic/grammar/func/receiver/','title':"Receiver",'content':"Receiver 结构体类型实现的接口，该结构体的指针类型也算实现了\n使用规则  必须使用指针  struct，且包含 sync.Mutex 类型字段   建议使用指针  比较大的 struct/array  struct 或者 array 中的元素个数超过 3 个，则认为比较大，反之，则认为比较小   struct、array 或 slice，其中指针元素所指的内容可能在方法内被修改   建议使用 value 类型  比较小的 struct/array   必须使用 value 类型（编程规范）  map、函数或者 chan 类型 slice，并且方法不会进行 reslice 或者重新分配 slice    method expression package main import ( \u0026#34;fmt\u0026#34; ) type Ball struct { Name string } func (b *Ball) Ping() { fmt.Println(\u0026#34;ping\u0026#34;) } func (b Ball) Pong() { fmt.Println(\u0026#34;pong\u0026#34;) } func main() { v := Ball{} Ball.Ping(\u0026amp;v) Ball.Pong(v) } "});index.add({'id':19,'href':'/study-go/docs/appendix/attention/','title':"关注",'content':"关注 golang/go kubernetes/kubernetes moby/moby etcd-io/etcd Distributed reliable key-value store for the most critical data of a distributed system\ncontainous/traefik The Cloud Native Edge Router https://traefik.io\n Web 框架 gin-gonic/gin Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance \u0026ndash; up to 40 times faster. If you need smashing performance, get yourself some Gin. https://gin-gonic.com/\nastaxie/beego beego is an open-source, high-performance web framework for the Go programming language.\n 工具 junegunn/fzf  其他 avelino/awesome-go fatedier/frp A fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet.\ngogs/gogs Gogs is a painless self-hosted Git service\ncaddyserver/caddy Fast, multi-platform web server with automatic HTTPS\nfzf is a general-purpose command-line fuzzy finder.\n"});index.add({'id':20,'href':'/study-go/docs/basic/grammar/func/','title':"函数",'content':"函数 "});index.add({'id':21,'href':'/study-go/docs/basic/practice/','title':"最佳实践",'content':"Go 最佳实践 "});index.add({'id':22,'href':'/study-go/categories/','title':"Categories",'content':""});index.add({'id':23,'href':'/study-go/docs/','title':"Docs",'content':""});index.add({'id':24,'href':'/study-go/tags/','title':"Tags",'content':""});index.add({'id':25,'href':'/study-go/','title':"首页",'content':""});})();