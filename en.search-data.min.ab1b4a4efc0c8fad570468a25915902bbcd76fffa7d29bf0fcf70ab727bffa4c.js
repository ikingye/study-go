'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-go/docs/basic/grammar/keyword/','title':"1.1 关键字",'content':"Go 语言关键字 for 与 range select defer panic 与 recover make 与 new "});index.add({'id':1,'href':'/study-go/docs/appendix/tutorial/','title':"教程",'content':"Go 教程 基础 mmcgrana/gobyexample Go by Example\n中文翻译：通过例子学 Golang：https://gobyexample-cn.github.io/\n进阶 geektutu/7days-golang 7 天用 Go 动手写 / 从零实现系列\nGo 语言设计与实现 by Draveness 高阶 "});index.add({'id':2,'href':'/study-go/docs/basic/practice/spec/baidu/','title':"百度",'content':"百度 Golang 编码规范 V1.2 "});index.add({'id':3,'href':'/study-go/docs/basic/grammar/','title':"第一章 Go 基本语法",'content':""});index.add({'id':4,'href':'/study-go/docs/basic/','title':"第一部分 基础入门",'content':""});index.add({'id':5,'href':'/study-go/docs/basic/practice/spec/','title':"编程规范",'content':"Go 编程规范 "});index.add({'id':6,'href':'/study-go/docs/basic/grammar/datastruct/','title':"1.2 数据结构",'content':"Go 语言数据结构 字符串 数组 切片 哈希表 "});index.add({'id':7,'href':'/study-go/docs/basic/practice/package/','title':"常用 package",'content':"Go 常用 package web gorilla/mux  A powerful HTTP router and URL matcher for building Go web servers\ngithubnemo/CompileDaemon  Watches your .go files in a directory and invokes go build if a file changed.\nUsage:\n./CompileDaemon -directory=yourproject/\n"});index.add({'id':8,'href':'/study-go/docs/design/','title':"第二部分 设计",'content':""});index.add({'id':9,'href':'/study-go/docs/appendix/interview/','title':"面试题",'content':"Go 语言面试题 基础题 进阶题 高阶题 "});index.add({'id':10,'href':'/study-go/docs/source/','title':"第三部分 源码实现",'content':""});index.add({'id':11,'href':'/study-go/docs/appendix/','title':"第四部分 附录",'content':""});index.add({'id':12,'href':'/study-go/docs/design/runtime/init/','title':"Go 初始化",'content':"Go 初始化 golang 程序初始化先于 main 函数执行，由 runtime 进行初始化，初始化顺序如下：\n 初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime 需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见 golang 变量的初始化）； 初始化包作用域的变量（该作用域的变量的初始化也并非按照 “从上到下、从左到右” 的顺序，runtime 解析变量依赖关系，没有依赖的变量最先初始化，参见 golang 变量的初始化）； 执行包的 init 函数；   变量初始化 -\u0026gt;init ()-\u0026gt;main () 由于 pack 包的初始化依赖 test_util，因此运行时先初始化 test_util 再初始化 pack 包；   同一个包不同源文件的 init 函数执行顺序，golang spec 没做说明  一般是源文件名称的字典序，但不能依赖这个假定     在每一个初始化周期，运行时（runtime）会挑选一个没有任何依赖的变量初始化  该过程一直持续到所有的变量均被初始化或者出现依赖嵌套的情形   同一个 package 下多个文件的变量初始化依赖也遵循相同的规则   变量初始化 不同作用域类型的变量初始化顺序不同\n函数作用域内的局部变量 初始化顺序：从左到右、从上到下\npackage 级别的变量 初始化顺序与初始化依赖有关\n "});index.add({'id':13,'href':'/study-go/docs/basic/grammar/func/init/','title':"init 函数",'content':"init 函数  作用  初始化不能采用初始化表达式初始化的变量 程序运行前的注册 实现 sync.Once 功能   特点  init 函数先于 main 函数自动执行 init 不能被其他函数调用 init 函数没有输入参数、返回值 每个包可以有多个 init 函数  包的每个源文件也可以有多个 init 函数   同一个包的 init 执行顺序，golang 没有明确定义，编程时要注意程序不要依赖这个执行顺序 不同包的 init 函数按照包导入的依赖关系决定执行顺序   问答 只想调用该包的 init 函数，不使用包导出的变量或者方法 import _ \u0026#34;net/http/pprof\u0026#34; 执行上述导入后，init 函数会启动一个异步协程采集该进程实例的资源占用情况，并以 http 服务接口方式提供给用户查询。\n 参考 "});index.add({'id':14,'href':'/study-go/docs/basic/grammar/func/','title':"函数",'content':"函数 "});index.add({'id':15,'href':'/study-go/docs/basic/practice/','title':"最佳实践",'content':"Go 最佳实践 "});index.add({'id':16,'href':'/study-go/categories/','title':"Categories",'content':""});index.add({'id':17,'href':'/study-go/docs/','title':"Docs",'content':""});index.add({'id':18,'href':'/study-go/tags/','title':"Tags",'content':""});index.add({'id':19,'href':'/study-go/','title':"首页",'content':""});})();