<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>首页 on Go 学习笔记</title><link>https://kingye.me/study-go/</link><description>Recent content in 首页 on Go 学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/study-go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 快速上手</title><link>https://kingye.me/study-go/docs/basic/others/quick/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/quick/</guid><description>&lt;h1 id="go-快速上手">
 Go 快速上手
 &lt;a class="anchor" href="#go-%e5%bf%ab%e9%80%9f%e4%b8%8a%e6%89%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-环境">
 Go 环境
 &lt;a class="anchor" href="#go-%e7%8e%af%e5%a2%83">#&lt;/a>
&lt;/h2>
&lt;h3 id="goroot">
 GOROOT
 &lt;a class="anchor" href="#goroot">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>GOROOT&lt;/code>: 指定安装 GO 的根目录&lt;/p>
&lt;p>Go 1.0 之后，&lt;code>go tool&lt;/code> 利用 &lt;code>GOROOT&lt;/code> 查找
Go 编译器（保存在 &lt;code>$GOROOT/pkg/tool/$GOOS_$GOARCH&lt;/code>）
和标准库（在 &lt;code>$GOROOT/pkg/$GOOS_$GOARCH&lt;/code>）&lt;/p>
&lt;p>可以将 &lt;code>GOROOT&lt;/code> 理解为 Java 的 &lt;code>JAVA_HOME&lt;/code>。&lt;/p>
&lt;p>我们不应该设置 GOROOT，是因为 Go 工具链已经内置了正确的值。
除非：&lt;/p>
&lt;ul>
&lt;li>如果你是 Linux、FreeBSD 或者 OS X 用户，下载了 zip 和 tarball 的二进制包安装环境。这些二进制的默认环境位于 /usr/local/go，建议你将 Go 安装到这个位置。如果选择不这么做，就必须设置到你指定的目录下。&lt;/li>
&lt;li>如果你是 Windows 用户，使用 zip 二进制包安装，默认的 GOROOT 在 C:\Go 目录下。如果你将 Go 安装在其他位置，请设置 GOROOT 到指定的目录。&lt;/li>
&lt;/ul>
&lt;h3 id="gopath">
 GOPATH
 &lt;a class="anchor" href="#gopath">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>GOPATH&lt;/code>: go 包的位置&lt;/p></description></item><item><title>sort</title><link>https://kingye.me/study-go/docs/basic/std/sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/sort/</guid><description>&lt;h1 id="sort">
 sort
 &lt;a class="anchor" href="#sort">#&lt;/a>
&lt;/h1>
&lt;h2 id="自定义排序">
 自定义排序
 &lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8e%92%e5%ba%8f">#&lt;/a>
&lt;/h2>
&lt;p>实现 &lt;code>Len&lt;/code>、&lt;code>Less&lt;/code> 和 &lt;code>Swap&lt;/code> 方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 有时候，我们可能想根据自然顺序以外的方式来对集合进行排序。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 例如，假设我们要按字符串的长度而不是按字母顺序对它们进行排序。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这儿有一个在 Go 中自定义排序的示例。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;sort&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 为了在 Go 中使用自定义函数进行排序，我们需要一个对应的类型。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 我们在这里创建了一个 `byLength` 类型，它只是内建类型 `[]string` 的别名。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">byLength&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 我们为该类型实现了 `sort.Interface` 接口的 `Len`、`Less` 和 `Swap` 方法，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这样我们就可以使用 `sort` 包的通用 `Sort` 方法了，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `Len` 和 `Swap` 在各个类型中的实现都差不多，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `Less` 将控制实际的自定义排序逻辑。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在这个的例子中，我们想按字符串长度递增的顺序来排序，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 所以这里使用了 `len(s[i])` 和 `len(s[j])` 来实现 `Less`。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">byLength&lt;/span>) &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">byLength&lt;/span>) &lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] = &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>], &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">byLength&lt;/span>) &lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]) &amp;lt; len(&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 一切准备就绪后，我们就可以通过将切片 `fruits` 强转为 `byLength` 类型的切片，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 然后对该切片使用 `sort.Sort` 来实现自定义排序。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fruits&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;peach&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;banana&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;kiwi&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">sort&lt;/span>.&lt;span style="color:#a6e22e">Sort&lt;/span>(&lt;span style="color:#a6e22e">byLength&lt;/span>(&lt;span style="color:#a6e22e">fruits&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">fruits&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>4.1 教程</title><link>https://kingye.me/study-go/docs/appendix/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/appendix/tutorial/</guid><description>&lt;h1 id="go-教程">
 Go 教程
 &lt;a class="anchor" href="#go-%e6%95%99%e7%a8%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="基础">
 基础
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80">#&lt;/a>
&lt;/h2>
&lt;h3 id="go-学习笔记第六版---雨痕httpswwwyuquecomqyuhengo">
 &lt;a href="https://www.yuque.com/qyuhen/go">Go 学习笔记，第六版 - 雨痕&lt;/a>
 &lt;a class="anchor" href="#go-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e7%ac%ac%e5%85%ad%e7%89%88---%e9%9b%a8%e7%97%95httpswwwyuquecomqyuhengo">#&lt;/a>
&lt;/h3>
&lt;h3 id="50-shades-of-go-traps-gotchas-and-common-mistakes-for-new-golang-devshttpdevscloudimmunitycomgotchas-and-common-mistakes-in-go-golang">
 &lt;a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&lt;/a>
 &lt;a class="anchor" href="#50-shades-of-go-traps-gotchas-and-common-mistakes-for-new-golang-devshttpdevscloudimmunitycomgotchas-and-common-mistakes-in-go-golang">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://yinzige.com/2018/03/07/50-shades-of-golang-traps-gotchas-mistakes/">Go 新手可能会踩的 50 个坑&lt;/a>&lt;/p>
&lt;h3 id="go-by-examplehttpsgobyexamplecom">
 &lt;a href="https://gobyexample.com/">Go by Example&lt;/a>
 &lt;a class="anchor" href="#go-by-examplehttpsgobyexamplecom">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://github.com/mmcgrana/gobyexample">mmcgrana/gobyexample&lt;/a> &lt;img src="https://img.shields.io/github/stars/mmcgrana/gobyexample.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/mmcgrana/gobyexample.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/mmcgrana/gobyexample.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/mmcgrana/gobyexample.svg" alt="Last commit" />&lt;/p>
&lt;p>中文翻译：
&lt;a href="https://github.com/gobyexample-cn/gobyexample">gobyexample-cn/gobyexample&lt;/a> &lt;img src="https://img.shields.io/github/stars/gobyexample-cn/gobyexample.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/gobyexample-cn/gobyexample.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/gobyexample-cn/gobyexample.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/gobyexample-cn/gobyexample.svg" alt="Last commit" />&lt;/p>
&lt;p>&lt;a href="https://gobyexample-cn.github.io/">https://gobyexample-cn.github.io/&lt;/a>&lt;/p>
&lt;h3 id="build-web-application-with-golang">
 build web application with golang
 &lt;a class="anchor" href="#build-web-application-with-golang">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://github.com/astaxie/build-web-application-with-golang">astaxie/build-web-application-with-golang&lt;/a> &lt;img src="https://img.shields.io/github/stars/astaxie/build-web-application-with-golang.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/astaxie/build-web-application-with-golang.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/astaxie/build-web-application-with-golang.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/astaxie/build-web-application-with-golang.svg" alt="Last commit" />&lt;/p>
&lt;p>A golang ebook intro how to build a web with golang&lt;/p></description></item><item><title>cobra</title><link>https://kingye.me/study-go/docs/advanced/pkg/cobra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/advanced/pkg/cobra/</guid><description>&lt;h1 id="cobra">
 cobra
 &lt;a class="anchor" href="#cobra">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://github.com/spf13/cobra">spf13/cobra&lt;/a> &lt;img src="https://img.shields.io/github/stars/spf13/cobra.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/spf13/cobra.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/spf13/cobra.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/spf13/cobra.svg" alt="Last commit" />&lt;/p>
&lt;p>A Commander for modern Go CLI interactions&lt;/p>
&lt;h2 id="quick-start">
 quick start
 &lt;a class="anchor" href="#quick-start">#&lt;/a>
&lt;/h2>
&lt;p>typically a Cobra-based application will follow the following organizational structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> ▾ appName/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ▾ cmd/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> your.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> commands.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> here.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a Cobra app, typically the main.go file is very bare. It serves one purpose: initializing Cobra.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;{pathToYourApp}/cmd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Execute&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ideally you place this in app/cmd/root.go:&lt;/p></description></item><item><title>context</title><link>https://kingye.me/study-go/docs/basic/std/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/context/</guid><description>&lt;h1 id="context">
 context
 &lt;a class="anchor" href="#context">#&lt;/a>
&lt;/h1>
&lt;h2 id="contextcontext">
 context.Context
 &lt;a class="anchor" href="#contextcontext">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>在 Goroutine 构成的树形结构中&lt;strong>对信号进行同步&lt;/strong>以减少计算资源的浪费是 context.Context 的最大作用。&lt;/li>
&lt;li>我们可能会创建多个 Goroutine 来处理&lt;strong>一次请求&lt;/strong>，而 context.Context 的作用就是在不同 Goroutine 之间同步
&lt;ul>
&lt;li>请求特定数据&lt;/li>
&lt;li>取消信号&lt;/li>
&lt;li>处理请求的截止时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多个 Goroutine 同时订阅 &lt;code>ctx.Done()&lt;/code> 管道中的消息，一旦接收到取消信号就立刻停止当前正在执行的工作&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/golang/go/blob/df2999ef43ea49ce1578137017949c0ee660608a/src/context/context.go#L62-L154">context.Context&lt;/a> 是 Go 语言在 1.7 版本中引入标准库的接口 1，该接口定义了四个需要实现的方法，其中包括：&lt;/p>
&lt;ul>
&lt;li>Deadline — 返回 context.Context 被取消的时间，也就是完成工作的截止日期；&lt;/li>
&lt;li>Done — 返回一个 Channel，这个 Channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 Done 方法会返回同一个 Channel；&lt;/li>
&lt;li>Err — 返回 context.Context 结束的原因，它只会在 Done 返回的 Channel 被关闭时才会返回非空的值；
&lt;ul>
&lt;li>如果 context.Context 被取消，会返回 &lt;code>Canceled&lt;/code> 错误；&lt;/li>
&lt;li>如果 context.Context 超时，会返回 &lt;code>DeadlineExceeded&lt;/code> 错误；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Value — 从 context.Context 中获取键对应的值，对于同一个上下文来说，多次调用 Value 并传入相同的 Key 会返回相同的结果，该方法可以用来传递请求特定的数据；&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Context&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Deadline&lt;/span>() (&lt;span style="color:#a6e22e">deadline&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Time&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Done&lt;/span>() &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Err&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Value&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>func Background() Context&lt;/code>&lt;/li>
&lt;li>&lt;code>func TODO() Context&lt;/code>&lt;/li>
&lt;li>&lt;code>func WithCancel(parent Context) (ctx Context, cancel CancelFunc)&lt;/code>&lt;/li>
&lt;li>&lt;code>func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)&lt;/code>&lt;/li>
&lt;li>&lt;code>func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)&lt;/code>&lt;/li>
&lt;li>&lt;code>func WithValue(parent Context, key, val interface{}) Context&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200728110757.png" alt="" />&lt;/p></description></item><item><title>defer</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</guid><description>&lt;h1 id="defer">
 defer
 &lt;a class="anchor" href="#defer">#&lt;/a>
&lt;/h1>
&lt;p>Go 处理 defer 和 return 的顺序为：&lt;/p>
&lt;ol>
&lt;li>计算 return 语句的返回值&lt;/li>
&lt;li>赋值给匿名 / 有名返回值&lt;/li>
&lt;li>执行 defer&lt;/li>
&lt;li>return 退出函数&lt;/li>
&lt;/ol>
&lt;p>Defer 的用途跟其他语言的 &lt;code>ensure&lt;/code> 或 &lt;code>finally&lt;/code> 类似。&lt;/p>
&lt;h2 id="当-defer-释放锁遇到尾递归会产生死锁">
 当 defer 释放锁遇到&lt;strong>尾递归&lt;/strong>，会产生死锁
 &lt;a class="anchor" href="#%e5%bd%93-defer-%e9%87%8a%e6%94%be%e9%94%81%e9%81%87%e5%88%b0%e5%b0%be%e9%80%92%e5%bd%92%e4%bc%9a%e4%ba%a7%e7%94%9f%e6%ad%bb%e9%94%81">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是&lt;strong>尾递归&lt;/strong>的。&lt;/p>
&lt;/blockquote>
&lt;p>计算 return 语句的值，赋值给匿名/有名返回值 -&amp;gt; defer -&amp;gt; return 退出函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">mut&lt;/span> = &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">tailRec&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mut&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>() &lt;span style="color:#75715e">// 加锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">mut&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>() &lt;span style="color:#75715e">// defer 释放锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">tailRec&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>) &lt;span style="color:#75715e">// return 尾递归
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上代码执行会发生&lt;strong>死锁&lt;/strong>，原因是 return 语句后的命令先执行，赋值给&lt;em>匿名返回值&lt;/em>后，再调用 defer，
因此尾递归中 tailRec 的加锁会在 defer 释放锁之前进行，形成死锁。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/golang/go/issues/14939">defer 有性能消耗&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="返回值求值">
 返回值求值
 &lt;a class="anchor" href="#%e8%bf%94%e5%9b%9e%e5%80%bc%e6%b1%82%e5%80%bc">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 匿名返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">test_unnamed&lt;/span>()(&lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer a:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer b :&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#75715e">// 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 具名返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">test_named&lt;/span>()(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer c:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer d :&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#75715e">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>error</title><link>https://kingye.me/study-go/docs/basic/ref/type/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/error/</guid><description>&lt;h1 id="error">
 error
 &lt;a class="anchor" href="#error">#&lt;/a>
&lt;/h1>
&lt;p>实现 &lt;code>Error() string&lt;/code> 方法的类型，都是 error 类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Error&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;xxxx&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#a6e22e">format&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#66d9ef">interface&lt;/span>{})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>for 和 range</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/for/</guid><description>&lt;h1 id="for-和-range">
 for 和 range
 &lt;a class="anchor" href="#for-%e5%92%8c-range">#&lt;/a>
&lt;/h1>
&lt;h2 id="map-遍历">
 map 遍历
 &lt;a class="anchor" href="#map-%e9%81%8d%e5%8e%86">#&lt;/a>
&lt;/h2>
&lt;p>Go 在运行时为&lt;strong>哈希表的遍历&lt;/strong>引入&lt;strong>不确定性&lt;/strong>，程序不要依赖于哈希表的稳定遍历&lt;/p></description></item><item><title>Go 初始化</title><link>https://kingye.me/study-go/docs/design/runtime/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/runtime/init/</guid><description>&lt;h1 id="go-初始化">
 Go 初始化
 &lt;a class="anchor" href="#go-%e5%88%9d%e5%a7%8b%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;p>golang 程序初始化先于 main 函数执行，由 runtime 进行初始化，初始化顺序如下：&lt;/p>
&lt;ul>
&lt;li>初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime 需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见 golang 变量的初始化）；&lt;/li>
&lt;li>初始化包作用域的变量（该作用域的变量的初始化也并非按照 “从上到下、从左到右” 的顺序，runtime 解析变量依赖关系，没有依赖的变量最先初始化，参见 golang 变量的初始化）；&lt;/li>
&lt;li>执行包的 init 函数；&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>变量初始化 -&amp;gt;init ()-&amp;gt;main ()&lt;/li>
&lt;li>由于 pack 包的初始化依赖 test_util，因此运行时先初始化 test_util 再初始化 pack 包；&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>同一个包不同源文件的 init 函数执行顺序，golang spec 没做说明
&lt;ul>
&lt;li>一般是源文件名称的字典序，但不能依赖这个假定&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>在每一个初始化周期，运行时（runtime）会挑选一个没有任何依赖的变量初始化
&lt;ul>
&lt;li>该过程一直持续到所有的变量均被初始化或者出现依赖嵌套的情形&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>同一个 package 下多个文件的变量初始化依赖也遵循相同的规则&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="变量初始化">
 变量初始化
 &lt;a class="anchor" href="#%e5%8f%98%e9%87%8f%e5%88%9d%e5%a7%8b%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;p>不同作用域类型的变量初始化顺序不同&lt;/p>
&lt;h3 id="函数作用域内的局部变量">
 函数作用域内的局部变量
 &lt;a class="anchor" href="#%e5%87%bd%e6%95%b0%e4%bd%9c%e7%94%a8%e5%9f%9f%e5%86%85%e7%9a%84%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f">#&lt;/a>
&lt;/h3>
&lt;p>初始化顺序：从左到右、从上到下&lt;/p>
&lt;h3 id="package-级别的变量">
 package 级别的变量
 &lt;a class="anchor" href="#package-%e7%ba%a7%e5%88%ab%e7%9a%84%e5%8f%98%e9%87%8f">#&lt;/a>
&lt;/h3>
&lt;p>初始化顺序与&lt;code>初始化依赖&lt;/code>有关&lt;/p>
&lt;hr></description></item><item><title>Go 调度</title><link>https://kingye.me/study-go/docs/design/runtime/scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/runtime/scheduling/</guid><description>&lt;h1 id="go-调度">
 Go 调度
 &lt;a class="anchor" href="#go-%e8%b0%83%e5%ba%a6">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-调度器的发展">
 Go 调度器的发展
 &lt;a class="anchor" href="#go-%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e5%8f%91%e5%b1%95">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>单线程调度器・&lt;a href="https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c">0.x&lt;/a>
&lt;ul>
&lt;li>只包含 40 多行代码；&lt;/li>
&lt;li>程序中只能存在一个活跃线程，由 G-M 模型组成；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>多线程调度器・&lt;a href="https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c">1.0&lt;/a>
&lt;ul>
&lt;li>允许运行多线程的程序；&lt;/li>
&lt;li>全局锁导致竞争严重；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>任务窃取调度器・&lt;a href="https://github.com/golang/go/blob/779c45a50700bda0f6ec98429720802e6c1624e8/src/pkg/runtime/proc.c">1.1&lt;/a>
&lt;ul>
&lt;li>引入了处理器 P，构成了目前的  G-M-P  模型；&lt;/li>
&lt;li>在处理器 P 的基础上实现了基于工作窃取的调度器；&lt;/li>
&lt;li>在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；&lt;/li>
&lt;li>时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>抢占式调度器・&lt;a href="https://github.com/golang/go/blob/go1.2/src/pkg/runtime/proc.c">1.2&lt;/a> ~ 至今
&lt;ul>
&lt;li>基于协作的抢占式调度器 - 1.2 ~ 1.13
&lt;ul>
&lt;li>通过编译器在函数调用时插入抢占检查指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；&lt;/li>
&lt;li>Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基于信号的抢占式调度器 - 1.14 ~ 至今
&lt;ul>
&lt;li>实现基于信号的真抢占式调度；&lt;/li>
&lt;li>垃圾回收在扫描栈时会触发抢占调度；&lt;/li>
&lt;li>抢占的时间点不够多，还不能覆盖全部的边缘情况；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>非均匀存储访问调度器・提案
&lt;ul>
&lt;li>对运行时的各种资源进行分区；&lt;/li>
&lt;li>实现非常复杂，到今天还没有提上日程；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>除了多线程、任务窃取和抢占式调度器之外，Go 语言社区目前还有一个非均匀存储访问（Non-uniform memory access，NUMA）调度器的提案，Go 语言在未来也有实现该提案的可能。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
 参考
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/">Go 语言调度器与 Goroutine 实现原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://morsmachine.dk/go-scheduler">The Go scheduler (Go 1.1)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="scheduling-in-gohttpswwwardanlabscomblog201808scheduling-in-go-part1html">
 &lt;a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html">Scheduling In Go&lt;/a>
 &lt;a class="anchor" href="#scheduling-in-gohttpswwwardanlabscomblog201808scheduling-in-go-part1html">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html">Scheduling In Go : Part I - OS Scheduler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html">Scheduling In Go : Part II - Go Scheduler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html">Scheduling In Go : Part III - Concurrency&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="garbage-collection-in-gohttpswwwardanlabscomblog201812garbage-collection-in-go-part1-semanticshtml">
 &lt;a href="https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html">Garbage Collection In Go&lt;/a>
 &lt;a class="anchor" href="#garbage-collection-in-gohttpswwwardanlabscomblog201812garbage-collection-in-go-part1-semanticshtml">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html">Garbage Collection In Go : Part I - Semantics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html">Garbage Collection In Go : Part II - GC Traces&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html">Garbage Collection In Go : Part III - GC Pacing&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>init</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/func/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/func/init/</guid><description>&lt;h1 id="init-函数">
 init 函数
 &lt;a class="anchor" href="#init-%e5%87%bd%e6%95%b0">#&lt;/a>
&lt;/h1>
&lt;hr>
&lt;h2 id="作用">
 作用
 &lt;a class="anchor" href="#%e4%bd%9c%e7%94%a8">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>初始化不能采用&lt;strong>初始化表达式&lt;/strong>初始化的变量&lt;/li>
&lt;li>程序运行前的注册&lt;/li>
&lt;li>实现 sync.Once 功能&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="特点">
 特点
 &lt;a class="anchor" href="#%e7%89%b9%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>init 函数先于 main 函数自动执行&lt;/li>
&lt;li>init 不能被其他函数调用&lt;/li>
&lt;li>init 函数没有输入参数、返回值&lt;/li>
&lt;li>每个包可以有多个 init 函数
&lt;ul>
&lt;li>&lt;strong>包的每个源文件也可以有多个 init 函数&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>同一个包的 init 执行顺序，golang 没有明确定义，编程时要注意程序不要依赖这个执行顺序&lt;/li>
&lt;li>不同包的 init 函数按照包导入的依赖关系决定执行顺序&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="问答">
 问答
 &lt;a class="anchor" href="#%e9%97%ae%e7%ad%94">#&lt;/a>
&lt;/h2>
&lt;h3 id="只想调用该包的-init-函数不使用包导出的变量或者方法">
 只想调用该包的 init 函数，不使用包导出的变量或者方法
 &lt;a class="anchor" href="#%e5%8f%aa%e6%83%b3%e8%b0%83%e7%94%a8%e8%af%a5%e5%8c%85%e7%9a%84-init-%e5%87%bd%e6%95%b0%e4%b8%8d%e4%bd%bf%e7%94%a8%e5%8c%85%e5%af%bc%e5%87%ba%e7%9a%84%e5%8f%98%e9%87%8f%e6%88%96%e8%80%85%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;net/http/pprof&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行上述导入后，init 函数会启动一个异步协程采集该进程实例的资源占用情况，并以 http 服务接口方式提供给用户查询。&lt;/p>
&lt;hr>
&lt;h2 id="参考">
 参考
 &lt;a class="anchor" href="#%e5%8f%82%e8%80%83">#&lt;/a>
&lt;/h2></description></item><item><title>interface</title><link>https://kingye.me/study-go/docs/design/keyword/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/keyword/interface/</guid><description>&lt;h1 id="interface">
 interface
 &lt;a class="anchor" href="#interface">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://research.swtch.com/interfaces">Go Data Structures: Interfaces&lt;/a>&lt;/p>
&lt;p>读完这篇 go 作者的 blog，interface 就没什么秘密可言了。每个 interface 至少包含两个字段，type 和 data，不论什么形式，然后是 itable 什么时候生成，如何调用。&lt;/p>
&lt;p>结合  &lt;a href="http://docs.studygolang.com/ref/spec#Comparison_operators">Comparison operators&lt;/a>，记住 interface 的 compare 规则。&lt;/p></description></item><item><title>klog</title><link>https://kingye.me/study-go/docs/advanced/pkg/klog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/advanced/pkg/klog/</guid><description>&lt;h1 id="klog">
 klog
 &lt;a class="anchor" href="#klog">#&lt;/a>
&lt;/h1>
&lt;h2 id="v-级别">
 V() 级别
 &lt;a class="anchor" href="#v-%e7%ba%a7%e5%88%ab">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>级别&lt;/th>
 &lt;th>含义&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>v=0&lt;/code>&lt;/td>
 &lt;td>Generally useful for this to &lt;em>always&lt;/em> be visible to a cluster operator.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=1&lt;/code>&lt;/td>
 &lt;td>A reasonable default log level if you don&amp;rsquo;t want verbosity.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=2&lt;/code>&lt;/td>
 &lt;td>Useful steady state information about the service and important log messages that may correlate to significant changes in the system. &lt;br> This is the recommended default log level for most systems.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=3&lt;/code>&lt;/td>
 &lt;td>Extended information about changes.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=4&lt;/code>&lt;/td>
 &lt;td>Debug level verbosity.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=5&lt;/code>&lt;/td>
 &lt;td>Trace level verbosity.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=6&lt;/code>&lt;/td>
 &lt;td>Display requested resources.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=7&lt;/code>&lt;/td>
 &lt;td>Display HTTP request headers.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=8&lt;/code>&lt;/td>
 &lt;td>Display HTTP request contents.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>v=9&lt;/code>&lt;/td>
 &lt;td>Display HTTP request contents without truncation of contents.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="详细说明">
 详细说明
 &lt;a class="anchor" href="#%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>klog.V(0) - Generally useful for this to ALWAYS be visible to an operator
&lt;ul>
&lt;li>Programmer errors&lt;/li>
&lt;li>Logging extra info about a panic&lt;/li>
&lt;li>CLI argument handling&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>klog.V(1) - A reasonable default log level if you don&amp;rsquo;t want verbosity.
&lt;ul>
&lt;li>Information about config (listening on X, watching Y)&lt;/li>
&lt;li>Errors that repeat frequently that relate to conditions that can be corrected (pod detected as unhealthy)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>klog.V(2) - Useful steady state information about the service and important log messages that may correlate to significant changes in the system. This is the recommended default log level for most systems.
&lt;ul>
&lt;li>Logging HTTP requests and their exit code&lt;/li>
&lt;li>System state changing (killing pod)&lt;/li>
&lt;li>Controller state change events (starting pods)&lt;/li>
&lt;li>Scheduler log messages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>klog.V(3) - Extended information about changes
&lt;ul>
&lt;li>More info about system state changes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>klog.V(4) - Debug level verbosity
&lt;ul>
&lt;li>Logging in particularly thorny parts of code where you may want to come back later and check it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>klog.V(5) - Trace level verbosity
&lt;ul>
&lt;li>Context to understand the steps leading up to errors and warnings&lt;/li>
&lt;li>More information for troubleshooting reported issues&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>参考：&lt;/p></description></item><item><title>Receiver</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/func/receiver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/func/receiver/</guid><description>&lt;h1 id="receiver">
 Receiver
 &lt;a class="anchor" href="#receiver">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>value method 可以被 value 和 pointer 对象调用
&lt;ul>
&lt;li>结构体类型实现的&lt;strong>接口&lt;/strong>，该结构体的&lt;strong>指针类型&lt;/strong>也算实现了该接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>而 pointer method 只能被 pointer 对象调用
&lt;ul>
&lt;li>pointer method 会修改对象的值，而 value method 不会，所以如果在一个 value 对象上调用 pointer method，编译器会对原来的值做一份拷贝，并在拷贝后的值上执行函数，那么如果函数有修改原 receiver 的值，则修改的行为都发生在拷贝的值上，而不会影响原值，这个错误很隐蔽不容易被调试发现，因此 go 决定放弃这个错误发生的可能性，直接不支持 pointer method 被 value 对象调用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用规则">
 使用规则
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e8%a7%84%e5%88%99">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>必须使用指针
&lt;ul>
&lt;li>&lt;code>struct&lt;/code>，且包含 &lt;code>sync.Mutex&lt;/code> 类型字段&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建议使用指针
&lt;ul>
&lt;li>比较&lt;strong>大&lt;/strong>的 struct/array
&lt;ul>
&lt;li>struct 或者 array 中的&lt;strong>元素个数超过 3 个&lt;/strong>，则认为比较大，反之，则认为比较小&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>struct、array 或 slice，其中指针元素所指的内容可能在方法内被&lt;strong>修改&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建议使用 value 类型
&lt;ul>
&lt;li>比较&lt;strong>小&lt;/strong>的 struct/array&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>必须使用 value 类型（&lt;em>编程规范&lt;/em>）
&lt;ul>
&lt;li>map、函数或者 &lt;code>chan&lt;/code> 类型&lt;/li>
&lt;li>slice，并且方法不会进行 &lt;code>reslice&lt;/code> 或者重新分配 slice&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="value-vs-pointer">
 value vs pointer
 &lt;a class="anchor" href="#value-vs-pointer">#&lt;/a>
&lt;/h2>
&lt;p>参考：&lt;/p></description></item><item><title>优劣</title><link>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</guid><description>&lt;h1 id="go-语言优劣">
 Go 语言优劣
 &lt;a class="anchor" href="#go-%e8%af%ad%e8%a8%80%e4%bc%98%e5%8a%a3">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-的优点">
 Go 的优点
 &lt;a class="anchor" href="#go-%e7%9a%84%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h3 id="部署简单">
 部署简单
 &lt;a class="anchor" href="#%e9%83%a8%e7%bd%b2%e7%ae%80%e5%8d%95">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>直接编译成机器码&lt;/li>
&lt;li>不依赖其他库&lt;/li>
&lt;li>直接运行即可部署&lt;/li>
&lt;/ol>
&lt;h3 id="静态类型语言">
 静态类型语言
 &lt;a class="anchor" href="#%e9%9d%99%e6%80%81%e7%b1%bb%e5%9e%8b%e8%af%ad%e8%a8%80">#&lt;/a>
&lt;/h3>
&lt;p>编译时可检测出隐藏的大多数问题&lt;/p>
&lt;h3 id="语言层面实现并发goroutine">
 语言层面实现并发（goroutine）
 &lt;a class="anchor" href="#%e8%af%ad%e8%a8%80%e5%b1%82%e9%9d%a2%e5%ae%9e%e7%8e%b0%e5%b9%b6%e5%8f%91goroutine">#&lt;/a>
&lt;/h3>
&lt;h3 id="强大的标准库">
 强大的标准库
 &lt;a class="anchor" href="#%e5%bc%ba%e5%a4%a7%e7%9a%84%e6%a0%87%e5%87%86%e5%ba%93">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>runtime 系统调度机制&lt;/li>
&lt;li>高效的 GC（垃圾回收）&lt;/li>
&lt;li>丰富的标准库&lt;/li>
&lt;/ol>
&lt;h3 id="简单易学">
 简单易学
 &lt;a class="anchor" href="#%e7%ae%80%e5%8d%95%e6%98%93%e5%ad%a6">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>25 个关键字&lt;/li>
&lt;li>内嵌 C 语法支持（CGO）&lt;/li>
&lt;li>面向对象&lt;/li>
&lt;li>跨平台&lt;/li>
&lt;/ol>
&lt;h3 id="背靠大厂google">
 背靠大厂（Google）
 &lt;a class="anchor" href="#%e8%83%8c%e9%9d%a0%e5%a4%a7%e5%8e%82google">#&lt;/a>
&lt;/h3>
&lt;h3 id="性能好">
 性能好
 &lt;a class="anchor" href="#%e6%80%a7%e8%83%bd%e5%a5%bd">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200524204903.png" alt="" />&lt;/p>
&lt;hr>
&lt;h2 id="go-的缺点">
 Go 的缺点
 &lt;a class="anchor" href="#go-%e7%9a%84%e7%bc%ba%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h3 id="无泛化类型">
 无泛化类型
 &lt;a class="anchor" href="#%e6%97%a0%e6%b3%9b%e5%8c%96%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h3>
&lt;p>传言 Go 2.0 会加上&lt;/p>
&lt;h3 id="无-exception都用-error">
 无 Exception，都用 Error
 &lt;a class="anchor" href="#%e6%97%a0-exception%e9%83%bd%e7%94%a8-error">#&lt;/a>
&lt;/h3>
&lt;p>有争议&lt;/p>
&lt;h3 id="包管理大部分在-github">
 包管理大部分在 Github
 &lt;a class="anchor" href="#%e5%8c%85%e7%ae%a1%e7%90%86%e5%a4%a7%e9%83%a8%e5%88%86%e5%9c%a8-github">#&lt;/a>
&lt;/h3>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/379439622/answer/1111390872">2020 年以后是 Go 的天下吗？&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>安装</title><link>https://kingye.me/study-go/docs/basic/others/command/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/command/install/</guid><description>&lt;h1 id="安装">
 安装
 &lt;a class="anchor" href="#%e5%ae%89%e8%a3%85">#&lt;/a>
&lt;/h1></description></item><item><title>格式化输出</title><link>https://kingye.me/study-go/docs/basic/std/format/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/format/</guid><description>&lt;h1 id="格式化输出">
 格式化输出
 &lt;a class="anchor" href="#%e6%a0%bc%e5%bc%8f%e5%8c%96%e8%be%93%e5%87%ba">#&lt;/a>
&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Go 提供了一些用于格式化常规值的打印“动词”。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 例如，这样打印 `point` 结构体的实例。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">point&lt;/span>{&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 如果值是一个结构体，`%+v` 的格式化输出内容将包括结构体的字段名。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%+v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `%#v` 根据 Go 语法输出值，即会产生该值的源码片段。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%#v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 需要打印值的类型，使用 `%T`。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%T\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 格式化布尔值很简单。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%t\n&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 格式化整型数有多种方式，使用 `%d` 进行标准的十进制格式化。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">123&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// +123 (输出符号)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%+d\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">123&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这个输出二进制表示形式。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%b\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">14&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 输出给定整数的对应字符。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%c\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">33&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `%x` 提供了十六进制编码。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%x\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">456&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 同样的，也为浮点型提供了多种格式化选项。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用 `%f` 进行最基本的十进制格式化。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%f\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">78.9&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `%e` 和 `%E` 将浮点型格式化为（稍微有一点不同的）科学记数法表示形式。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%e\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">123400000.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%E\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">123400000.0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用 `%s` 进行基本的字符串输出。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\&amp;#34;string\&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 像 Go 源代码中那样带有双引号的输出，使用 `%q`。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%q\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\&amp;#34;string\&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 和上面的整型数一样，`%x` 输出使用 base-16 编码的字符串，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 每个字节使用 2 个字符表示。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%x\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;hex this&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 要输出一个指针的值，使用 `%p`。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%p\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">p&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 格式化数字时，您经常会希望控制输出结果的宽度和精度。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 要指定整数的宽度，请在动词 &amp;#34;%&amp;#34; 之后使用数字。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 默认情况下，结果会右对齐并用空格填充。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;|%6d|%6d|\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">345&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 你也可以指定浮点型的输出宽度，同时也可以通过 `宽度.精度` 的语法来指定输出的精度。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;|%6.2f|%6.2f|\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1.2&lt;/span>, &lt;span style="color:#ae81ff">3.45&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 要左对齐，使用 `-` 标志。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;|%-6.2f|%-6.2f|\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1.2&lt;/span>, &lt;span style="color:#ae81ff">3.45&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这是基本的宽度右对齐方法。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;|%6s|%6s|\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 要左对齐，和数字一样，使用 `-` 标志。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;|%-6s|%-6s|\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 到目前为止，我们已经看过 `Printf` 了，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 它通过 `os.Stdout` 输出格式化的字符串。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// `Sprintf` 则格式化并返回一个字符串而没有任何输出。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a %s&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;string&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 你可以使用 `Fprintf` 来格式化并输出到 `io.Writers` 而不是 `os.Stdout`。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Fprintf&lt;/span>(&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stderr&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;an %s\n&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>4.2 面试题</title><link>https://kingye.me/study-go/docs/appendix/interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/appendix/interview/</guid><description>&lt;h1 id="go-语言面试题">
 Go 语言面试题
 &lt;a class="anchor" href="#go-%e8%af%ad%e8%a8%80%e9%9d%a2%e8%af%95%e9%a2%98">#&lt;/a>
&lt;/h1>
&lt;h2 id="基础题">
 基础题
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Using reference to loop iterator variable&lt;/li>
&lt;li>Using goroutines on loop iterator variables&lt;/li>
&lt;/ul>
&lt;p>参考：&lt;a href="https://github.com/golang/go/wiki/CommonMistakes">go 易错点&lt;/a>&lt;/p>
&lt;h2 id="进阶题">
 进阶题
 &lt;a class="anchor" href="#%e8%bf%9b%e9%98%b6%e9%a2%98">#&lt;/a>
&lt;/h2>
&lt;h2 id="综合">
 综合
 &lt;a class="anchor" href="#%e7%bb%bc%e5%90%88">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/shomali11/go-interview">shomali11/go-interview&lt;/a> &lt;img src="https://img.shields.io/github/stars/shomali11/go-interview.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/shomali11/go-interview.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/shomali11/go-interview.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/shomali11/go-interview.svg" alt="Last commit" />&lt;/li>
&lt;li>&lt;a href="https://github.com/lifei6671/interview-go">lifei6671/interview-go&lt;/a> &lt;img src="https://img.shields.io/github/stars/lifei6671/interview-go.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/lifei6671/interview-go.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/lifei6671/interview-go.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/lifei6671/interview-go.svg" alt="Last commit" />&lt;/li>
&lt;li>&lt;a href="https://www.zhihu.com/question/60952598">你遇到过哪些高质量的 Go 语言面试题？&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Go build</title><link>https://kingye.me/study-go/docs/basic/others/gobuild/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gobuild/</guid><description>&lt;h1 id="go-build">
 Go build
 &lt;a class="anchor" href="#go-build">#&lt;/a>
&lt;/h1>
&lt;h2 id="-tag">
 &lt;code>-tag&lt;/code>
 &lt;a class="anchor" href="#-tag">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>// +build dev&lt;/code> 前后须有一个空行隔开&lt;/p>
&lt;ul>
&lt;li>&lt;code>release_config.go&lt;/code> 文件&lt;/li>
&lt;li>&lt;code>go build -tags dev -o dev_version&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// +build dev
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;DEV&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>dev_config.go&lt;/code> 文件&lt;/li>
&lt;li>&lt;code>go build -tags dev -o dev_version&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// +build release
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">version&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;RELEASE&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="go-热编译工具">
 Go 热编译工具
 &lt;a class="anchor" href="#go-%e7%83%ad%e7%bc%96%e8%af%91%e5%b7%a5%e5%85%b7">#&lt;/a>
&lt;/h2>
&lt;h3 id="caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg">
 &lt;a href="https://github.com/caixw/gobuild">caixw/gobuild&lt;/a> &lt;img src="https://img.shields.io/github/stars/caixw/gobuild.svg" alt="Github stars" />
 &lt;a class="anchor" href="#caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg">#&lt;/a>
&lt;/h3>
&lt;p>gobuild 是一个简单的 Go 代码热编译工具。 会实时监控指定目录下的文件变化 (重命名，删除，创建，添加)，并编译和运行程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>gobuild &lt;span style="color:#f92672">[&lt;/span>options&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>dependents&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h 显示当前帮助信息；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v 显示 gobuild 和 Go 程序的版本信息；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -r 是否搜索子目录，默认为 true；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i 是否显示被标记为 IGNORE 的日志内容，默认为 false，即不显示；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -o 执行编译后的可执行文件名；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -x 传递给编译程序的参数；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -ext 需要监视的扩展名，默认值为&lt;span style="color:#e6db74">&amp;#34;go&amp;#34;&lt;/span>，区分大小写，会去掉每个扩展名的首尾空格。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 若需要监视所有类型文件，请使用 *，传递空值代表不监视任何文件；
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -main 指定需要编译的文件，默认为&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependents:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 指定其它依赖的目录，只能出现在命令的尾部。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg">
 &lt;a href="https://github.com/penggy/gobuild">penggy/gobuild&lt;/a> &lt;img src="https://img.shields.io/github/stars/penggy/gobuild.svg" alt="Github stars" />
 &lt;a class="anchor" href="#penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg">#&lt;/a>
&lt;/h4>
&lt;p>EasyDarwin 依赖&lt;/p></description></item><item><title>Go Modules</title><link>https://kingye.me/study-go/docs/basic/others/gomod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gomod/</guid><description>&lt;h1 id="go-moduleshttpsgolangorgrefmod">
 &lt;a href="https://golang.org/ref/mod">Go Modules&lt;/a>
 &lt;a class="anchor" href="#go-moduleshttpsgolangorgrefmod">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.golang.org/using-go-modules">Using Go Modules&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="import">
 import
 &lt;a class="anchor" href="#import">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;目录&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 调用是使用 go 文件里的 package xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">xxx&lt;/span>.&lt;span style="color:#a6e22e">Function&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="klog-import">
 klog import
 &lt;a class="anchor" href="#klog-import">#&lt;/a>
&lt;/h3>
&lt;p>klog 库 &lt;code>https://github.com/kubernetes/klog&lt;/code>&lt;/p>
&lt;p>它的 &lt;code>go.mod&lt;/code> 第一行是 &lt;code>module k8s.io/klog/v2&lt;/code>&lt;/p>
&lt;p>根目录有个文件 &lt;code>klog.go&lt;/code>，第一行 &lt;code>package klog&lt;/code>&lt;/p>
&lt;p>所以我们在使用 klog 库时，&lt;/p>
&lt;p>&lt;code>import k8s.io/klog/v2&lt;/code> 就是 import 了这个库的根目录，根目录的 &lt;code>*.go&lt;/code> 文件，&lt;code>package&lt;/code> 都是 &lt;code>klog&lt;/code>&lt;/p>
&lt;p>所以我们使用的时候，直接 &lt;code>klog.Info()&lt;/code> 就行。&lt;/p>
&lt;p>klog 库自身升级，只需要在它的 &lt;code>go.mod&lt;/code> 里第一行改成 &lt;code>module k8s.io/klog/v3&lt;/code> 就行。&lt;/p>
&lt;p>而我们使用新版本，也只需要改成 &lt;code>import k8s.io/klog/v3&lt;/code>，里面 &lt;code>klog.Info()&lt;/code> 都不用改（如果接口兼容的话）。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/43579838/relationship-between-a-package-statement-and-the-directory-of-a-go-file">Relationship between a package statement and the directory of a .go file&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>gopls</title><link>https://kingye.me/study-go/docs/basic/others/gopls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/gopls/</guid><description>&lt;h1 id="goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd">
 &lt;a href="https://github.com/golang/tools/blob/master/gopls/README.md">gopls&lt;/a>
 &lt;a class="anchor" href="#goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd">#&lt;/a>
&lt;/h1>
&lt;p>gopls (pronounced: &amp;ldquo;go please&amp;rdquo;) is the official &lt;a href="https://langserver.org/">language server&lt;/a> for the Go language.&lt;/p>
&lt;p>Go 扩展默认是使用大量的 Go 工具来提供各种功能的，
每个工具提供某个方面的能力，比如代码提示是依靠 gocode 的.&lt;/p>
&lt;p>不过微软在开发 VS Code 过程中，定义一种协议，语言服务器协议，
Language Server Protocol.&lt;/p>
&lt;p>这可是个好东西，如果你需要开发编辑器或 IDE,
就不需要再为每种语言实现诸如自动完成，代码提示等功能了，
直接利用 语言服务器协议 就行了.&lt;/p>
&lt;p>gopls 就是官方的语言服务器，当前处于 alpha 状态.&lt;/p></description></item><item><title>切片</title><link>https://kingye.me/study-go/docs/basic/ref/type/slice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/slice/</guid><description>&lt;h1 id="go-切片">
 Go 切片
 &lt;a class="anchor" href="#go-%e5%88%87%e7%89%87">#&lt;/a>
&lt;/h1></description></item><item><title>包管理</title><link>https://kingye.me/study-go/docs/basic/others/pm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/pm/</guid><description>&lt;h1 id="包管理">
 包管理
 &lt;a class="anchor" href="#%e5%8c%85%e7%ae%a1%e7%90%86">#&lt;/a>
&lt;/h1>
&lt;h2 id="go-包管理概述">
 Go 包管理概述
 &lt;a class="anchor" href="#go-%e5%8c%85%e7%ae%a1%e7%90%86%e6%a6%82%e8%bf%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="go-14-及之前">
 Go 1.4 及之前
 &lt;a class="anchor" href="#go-14-%e5%8f%8a%e4%b9%8b%e5%89%8d">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>必须设置 &lt;code>GOPATH&lt;/code> 环境变量，且源代码必须存放在 &lt;code>GOPATH&lt;/code> 下&lt;/li>
&lt;li>拉取外部依赖包时，总是拉取最新的版本，无法指定需要的版本&lt;/li>
&lt;/ul>
&lt;p>设置 &lt;code>GOPATH&lt;/code> 环境变量有两个原因：&lt;/p>
&lt;ul>
&lt;li>它规定了 &lt;code>go get&lt;/code> 命令下载的依赖包的存储位置（&lt;code>$GOPATH/src&lt;/code>）&lt;/li>
&lt;li>通过设置 &lt;code>GOPATH&lt;/code>，可以方便 Golang 计算出 import 的路径&lt;/li>
&lt;/ul>
&lt;h3 id="go-15-至-go-110">
 Go 1.5 至 Go 1.10
 &lt;a class="anchor" href="#go-15-%e8%87%b3-go-110">#&lt;/a>
&lt;/h3>
&lt;p>每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包&lt;/p>
&lt;h3 id="go-111-至-go-112">
 Go 1.11 至 Go 1.12
 &lt;a class="anchor" href="#go-111-%e8%87%b3-go-112">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>默认使用的还是 GOPATH 的管理方式&lt;/li>
&lt;li>运行 &lt;code>export GO111MODULE=on&lt;/code>，使用 &lt;code>Go Modules&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>GO111MODULE&lt;/code> 为 &lt;code>off&lt;/code> 时：&lt;/p>
&lt;ol>
&lt;li>优先使用 &lt;code>vendor&lt;/code> 目录下面的包，&lt;/li>
&lt;li>如果 &lt;code>vendor&lt;/code> 下面没有搜索到，再搜索 &lt;code>$GOPATH/src&lt;/code> 下面的包，&lt;/li>
&lt;li>如果 &lt;code>$GOPATH&lt;/code> 下面没有搜索到，那么搜索 &lt;code>$GOROOT/src&lt;/code> 下面的包&lt;/li>
&lt;/ol>
&lt;h3 id="go-113-及之后">
 Go 1.13 及之后
 &lt;a class="anchor" href="#go-113-%e5%8f%8a%e4%b9%8b%e5%90%8e">#&lt;/a>
&lt;/h3>
&lt;p>Golang 的包管理默认使用 &lt;code>Go Modules&lt;/code>&lt;/p></description></item><item><title>字符串</title><link>https://kingye.me/study-go/docs/basic/ref/type/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/string/</guid><description>&lt;h1 id="go-字符串">
 Go 字符串
 &lt;a class="anchor" href="#go-%e5%ad%97%e7%ac%a6%e4%b8%b2">#&lt;/a>
&lt;/h1>
&lt;h2 id="字符串是一个只读的切片类型">
 字符串是一个只读的切片类型
 &lt;a class="anchor" href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%98%af%e4%b8%80%e4%b8%aa%e5%8f%aa%e8%af%bb%e7%9a%84%e5%88%87%e7%89%87%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 包含指向字节数组的指针和数组的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">StringHeader&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Len&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 比 slice 少了 Cap 字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 比字符串多了表示容量的 Cap 字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SliceHeader&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Len&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Cap&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数组</title><link>https://kingye.me/study-go/docs/basic/ref/type/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/array/</guid><description>&lt;h1 id="go-数组">
 Go 数组
 &lt;a class="anchor" href="#go-%e6%95%b0%e7%bb%84">#&lt;/a>
&lt;/h1>
&lt;h2 id="什么时候使用数组而不是切片">
 什么时候使用数组，而不是切片？
 &lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%bd%bf%e7%94%a8%e6%95%b0%e7%bb%84%e8%80%8c%e4%b8%8d%e6%98%af%e5%88%87%e7%89%87">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>arrays are &lt;strong>hashable&lt;/strong>. That means they can be used as a key to a map&lt;/li>
&lt;li>can be &lt;strong>serialized&lt;/strong> by encoding/binary&lt;/li>
&lt;li>pass by value. planning the detailed layout of memory&lt;/li>
&lt;/ul>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/30694652/why-use-arrays-instead-of-slices">Why use arrays instead of slices?&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>类型系统</title><link>https://kingye.me/study-go/docs/design/type/type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/type/type/</guid><description>&lt;h1 id="go-类型系统">
 Go 类型系统
 &lt;a class="anchor" href="#go-%e7%b1%bb%e5%9e%8b%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h1>
&lt;h2 id="underlying-type">
 &lt;code>Underlying Type&lt;/code>
 &lt;a class="anchor" href="#underlying-type">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>每一个类型都有自己的 &lt;code>Underlying Type&lt;/code>
&lt;ul>
&lt;li>如果 &lt;code>T&lt;/code> 是 &lt;code>Pre-declared&lt;/code> type 或者 &lt;code>Type Literal&lt;/code>，它们对应的 &lt;code>Underlying Type&lt;/code> 就是自身 &lt;code>T&lt;/code>
&lt;ul>
&lt;li>比如 &lt;code>type T int&lt;/code> 的 &lt;code>Underlying Type&lt;/code> 是 &lt;code>int&lt;/code>
&lt;ul>
&lt;li>&lt;code>int&lt;/code> 是 &lt;code>Pre-declared&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>type T map[int]string&lt;/code> 的 &lt;code>Underlying Type&lt;/code> 是 &lt;code>map[int]string&lt;/code>
&lt;ul>
&lt;li>&lt;code>map[int]string&lt;/code> 是 &lt;code>Type Literal&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>否则 &lt;code>T&lt;/code> 的 &lt;code>Underlying Type&lt;/code> 是 &lt;code>T&lt;/code> 定义时引用的类型的 &lt;code>Underlying Type&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="underlying-type-相同">
 Underlying Type 相同
 &lt;a class="anchor" href="#underlying-type-%e7%9b%b8%e5%90%8c">#&lt;/a>
&lt;/h3>
&lt;p>如果两个 type 的 Underlying Type 相同，则它们可以有以下特性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果两个 type 都是 named type ，彼此之间不能相互赋值&lt;/p></description></item><item><title>编译</title><link>https://kingye.me/study-go/docs/basic/others/compile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/compile/</guid><description>&lt;h1 id="编译">
 编译
 &lt;a class="anchor" href="#%e7%bc%96%e8%af%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="makefile">
 Makefile
 &lt;a class="anchor" href="#makefile">#&lt;/a>
&lt;/h2>
&lt;h3 id="go-makefile-样例">
 Go Makefile 样例
 &lt;a class="anchor" href="#go-makefile-%e6%a0%b7%e4%be%8b">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">include&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">.env&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROJECTNAME&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>shell basename &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PWD&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Go related variables.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>GOBASE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>shell pwd&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">/vendor:&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBASE&lt;span style="color:#66d9ef">)&lt;/span>/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GOFILES&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>wildcard *.go&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Redirect error output to a file, so we can show it in development mode.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>STDERR&lt;span style="color:#f92672">=&lt;/span>/tmp/.&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>-stderr.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># PID file will keep the process id of the server
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>PID&lt;span style="color:#f92672">=&lt;/span>/tmp/.&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>.pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Make is verbose in Linux. Make it silent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>MAKEFLAGS &lt;span style="color:#f92672">+=&lt;/span> --silent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## install: Install missing dependencies. Runs `go get` internally. e.g; make install get=github.com/foo/bar
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">install&lt;/span>&lt;span style="color:#f92672">:&lt;/span> go-get
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## start: Start in development mode. Auto-starts when code changes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bash -c &lt;span style="color:#e6db74">&amp;#34;trap &amp;#39;make stop&amp;#39; EXIT; &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>MAKE&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> compile start-server watch run=&amp;#39;make compile start-server&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## stop: Stop development mode.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">stop&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">start-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> is available at &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>ADDR&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span>/&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span> 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> &amp;amp; echo $$! &amp;gt; &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@cat &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#34;/^/s/^/ \&amp;gt; PID: /&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">stop-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-touch &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-kill &lt;span style="color:#e6db74">`&lt;/span>cat &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">`&lt;/span> 2&amp;gt; /dev/null &lt;span style="color:#f92672">||&lt;/span> true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-rm &lt;span style="color:#66d9ef">$(&lt;/span>PID&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## watch: Run given command when code changes. e.g; make watch run=&amp;#34;echo &amp;#39;hey&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">watch&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> yolo -i . -e vendor -e bin -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>run&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">restart-server&lt;/span>&lt;span style="color:#f92672">:&lt;/span> stop-server start-server
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## compile: Compile the binary.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">compile&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-touch &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-rm &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@-&lt;span style="color:#66d9ef">$(&lt;/span>MAKE&lt;span style="color:#66d9ef">)&lt;/span> -s go-compile 2&amp;gt; &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@cat &lt;span style="color:#66d9ef">$(&lt;/span>STDERR&lt;span style="color:#66d9ef">)&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;1s/.*/\nError:\n/&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#39;s/make\[.*/ /&amp;#39;&lt;/span> | sed &lt;span style="color:#e6db74">&amp;#34;/^/s/^/ /&amp;#34;&lt;/span> 1&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## exec: Run given command, wrapped with custom GOPATH. e.g; make exec run=&amp;#34;go test ./...&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">exec&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>run&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## clean: Clean build files. Runs `go clean` internally.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@&lt;span style="color:#f92672">(&lt;/span>MAKEFILE&lt;span style="color:#f92672">)&lt;/span> go-clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-compile&lt;/span>&lt;span style="color:#f92672">:&lt;/span> go-clean go-get go-build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-build&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Building binary...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go build -o &lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span>/&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span> &lt;span style="color:#66d9ef">$(&lt;/span>GOFILES&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-generate&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Generating dependency files...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go generate &lt;span style="color:#66d9ef">$(&lt;/span>generate&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-get&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Checking if there is any missing dependencies...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go get &lt;span style="color:#66d9ef">$(&lt;/span>get&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-install&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go install &lt;span style="color:#66d9ef">$(&lt;/span>GOFILES&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">go-clean&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; &amp;gt; Cleaning build cache&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@GOPATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOPATH&lt;span style="color:#66d9ef">)&lt;/span> GOBIN&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>GOBIN&lt;span style="color:#66d9ef">)&lt;/span> go clean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">.PHONY&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">all&lt;/span>&lt;span style="color:#f92672">:&lt;/span> help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">help&lt;/span>&lt;span style="color:#f92672">:&lt;/span> Makefile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo &lt;span style="color:#e6db74">&amp;#34; Choose a command run in &amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>PROJECTNAME&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@sed -n &lt;span style="color:#e6db74">&amp;#39;s/^##//p&amp;#39;&lt;/span> $&amp;lt; | column -t -s &lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span> | sed -e &lt;span style="color:#e6db74">&amp;#39;s/^/ /&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	@echo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考：&lt;/p></description></item><item><title>4.3 关注项目</title><link>https://kingye.me/study-go/docs/appendix/attention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/appendix/attention/</guid><description>&lt;h1 id="关注项目">
 关注项目
 &lt;a class="anchor" href="#%e5%85%b3%e6%b3%a8%e9%a1%b9%e7%9b%ae">#&lt;/a>
&lt;/h1>
&lt;h2 id="主流">
 主流
 &lt;a class="anchor" href="#%e4%b8%bb%e6%b5%81">#&lt;/a>
&lt;/h2>
&lt;h3 id="golanggohttpsgithubcomgolanggo-github-starshttpsimgshieldsiogithubstarsgolanggosvg-github-forkshttpsimgshieldsiogithubforksgolanggosvg-languagehttpsimgshieldsiogithublanguagestopgolanggosvg-last-taghttpsimgshieldsiogithubvtaggolanggosvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgolanggosvg">
 &lt;a href="https://github.com/golang/go">golang/go&lt;/a> &lt;img src="https://img.shields.io/github/stars/golang/go.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/golang/go.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/golang/go.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/golang/go.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/golang/go.svg" alt="Last commit" />
 &lt;a class="anchor" href="#golanggohttpsgithubcomgolanggo-github-starshttpsimgshieldsiogithubstarsgolanggosvg-github-forkshttpsimgshieldsiogithubforksgolanggosvg-languagehttpsimgshieldsiogithublanguagestopgolanggosvg-last-taghttpsimgshieldsiogithubvtaggolanggosvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgolanggosvg">#&lt;/a>
&lt;/h3>
&lt;h3 id="kuberneteskuberneteshttpsgithubcomkuberneteskubernetes-github-starshttpsimgshieldsiogithubstarskuberneteskubernetessvg-github-forkshttpsimgshieldsiogithubforkskuberneteskubernetessvg-languagehttpsimgshieldsiogithublanguagestopkuberneteskubernetessvg-last-taghttpsimgshieldsiogithubvtagkuberneteskubernetessvgsortsemver-last-commithttpsimgshieldsiogithublast-commitkuberneteskubernetessvg">
 &lt;a href="https://github.com/kubernetes/kubernetes">kubernetes/kubernetes&lt;/a> &lt;img src="https://img.shields.io/github/stars/kubernetes/kubernetes.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/kubernetes/kubernetes.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/kubernetes/kubernetes.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/kubernetes/kubernetes.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/kubernetes/kubernetes.svg" alt="Last commit" />
 &lt;a class="anchor" href="#kuberneteskuberneteshttpsgithubcomkuberneteskubernetes-github-starshttpsimgshieldsiogithubstarskuberneteskubernetessvg-github-forkshttpsimgshieldsiogithubforkskuberneteskubernetessvg-languagehttpsimgshieldsiogithublanguagestopkuberneteskubernetessvg-last-taghttpsimgshieldsiogithubvtagkuberneteskubernetessvgsortsemver-last-commithttpsimgshieldsiogithublast-commitkuberneteskubernetessvg">#&lt;/a>
&lt;/h3>
&lt;h3 id="mobymobyhttpsgithubcommobymoby-github-starshttpsimgshieldsiogithubstarsmobymobysvg-github-forkshttpsimgshieldsiogithubforksmobymobysvg-languagehttpsimgshieldsiogithublanguagestopmobymobysvg-last-taghttpsimgshieldsiogithubvtagmobymobysvgsortsemver-last-commithttpsimgshieldsiogithublast-commitmobymobysvg">
 &lt;a href="https://github.com/moby/moby">moby/moby&lt;/a> &lt;img src="https://img.shields.io/github/stars/moby/moby.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/moby/moby.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/moby/moby.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/moby/moby.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/moby/moby.svg" alt="Last commit" />
 &lt;a class="anchor" href="#mobymobyhttpsgithubcommobymoby-github-starshttpsimgshieldsiogithubstarsmobymobysvg-github-forkshttpsimgshieldsiogithubforksmobymobysvg-languagehttpsimgshieldsiogithublanguagestopmobymobysvg-last-taghttpsimgshieldsiogithubvtagmobymobysvgsortsemver-last-commithttpsimgshieldsiogithublast-commitmobymobysvg">#&lt;/a>
&lt;/h3>
&lt;h3 id="etcd-ioetcdhttpsgithubcometcd-ioetcd-github-starshttpsimgshieldsiogithubstarsetcd-ioetcdsvg-github-forkshttpsimgshieldsiogithubforksetcd-ioetcdsvg-languagehttpsimgshieldsiogithublanguagestopetcd-ioetcdsvg-last-taghttpsimgshieldsiogithubvtagetcd-ioetcdsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitetcd-ioetcdsvg">
 &lt;a href="https://github.com/etcd-io/etcd">etcd-io/etcd&lt;/a> &lt;img src="https://img.shields.io/github/stars/etcd-io/etcd.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/etcd-io/etcd.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/etcd-io/etcd.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/etcd-io/etcd.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/etcd-io/etcd.svg" alt="Last commit" />
 &lt;a class="anchor" href="#etcd-ioetcdhttpsgithubcometcd-ioetcd-github-starshttpsimgshieldsiogithubstarsetcd-ioetcdsvg-github-forkshttpsimgshieldsiogithubforksetcd-ioetcdsvg-languagehttpsimgshieldsiogithublanguagestopetcd-ioetcdsvg-last-taghttpsimgshieldsiogithubvtagetcd-ioetcdsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitetcd-ioetcdsvg">#&lt;/a>
&lt;/h3>
&lt;p>Distributed reliable key-value store for the most critical data of a distributed system&lt;/p>
&lt;hr>
&lt;h2 id="web-框架">
 Web 框架
 &lt;a class="anchor" href="#web-%e6%a1%86%e6%9e%b6">#&lt;/a>
&lt;/h2>
&lt;h3 id="gin-gonicginhttpsgithubcomgin-gonicgin-github-starshttpsimgshieldsiogithubstarsgin-gonicginsvg-languagehttpsimgshieldsiogithublanguagestopgin-gonicginsvg-last-taghttpsimgshieldsiogithubvtaggin-gonicginsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgin-gonicginsvg">
 &lt;a href="https://github.com/gin-gonic/gin">gin-gonic/gin&lt;/a> &lt;img src="https://img.shields.io/github/stars/gin-gonic/gin.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/languages/top/gin-gonic/gin.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/gin-gonic/gin.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/gin-gonic/gin.svg" alt="Last commit" />
 &lt;a class="anchor" href="#gin-gonicginhttpsgithubcomgin-gonicgin-github-starshttpsimgshieldsiogithubstarsgin-gonicginsvg-languagehttpsimgshieldsiogithublanguagestopgin-gonicginsvg-last-taghttpsimgshieldsiogithubvtaggin-gonicginsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgin-gonicginsvg">#&lt;/a>
&lt;/h3>
&lt;p>Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance &amp;ndash; up to 40 times faster. If you need smashing performance, get yourself some Gin.
&lt;a href="https://gin-gonic.com/">https://gin-gonic.com/&lt;/a>&lt;/p></description></item><item><title>Interface</title><link>https://kingye.me/study-go/docs/basic/ref/type/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/interface/</guid><description>&lt;h1 id="go-interface">
 Go Interface
 &lt;a class="anchor" href="#go-interface">#&lt;/a>
&lt;/h1></description></item><item><title>历史</title><link>https://kingye.me/study-go/docs/basic/others/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/history/</guid><description>&lt;h1 id="go-历史">
 Go 历史
 &lt;a class="anchor" href="#go-%e5%8e%86%e5%8f%b2">#&lt;/a>
&lt;/h1></description></item><item><title>4.4 一些八卦</title><link>https://kingye.me/study-go/docs/appendix/gossip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/appendix/gossip/</guid><description>&lt;h1 id="一些八卦">
 一些八卦
 &lt;a class="anchor" href="#%e4%b8%80%e4%ba%9b%e5%85%ab%e5%8d%a6">#&lt;/a>
&lt;/h1>
&lt;h2 id="golangorgpkg-vs-pkggodev">
 &lt;code>golang.org/pkg/&lt;/code> vs &lt;code>pkg.go.dev&lt;/code>
 &lt;a class="anchor" href="#golangorgpkg-vs-pkggodev">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>golang.org/pkg/&lt;/code> 等于 &lt;code>pkg.go.dev/std&lt;/code>&lt;/li>
&lt;li>&lt;code>pkg.go.dev/std&lt;/code> 有各种版本&lt;/li>
&lt;/ul>
&lt;h3 id="godocorg">
 &lt;code>godoc.org&lt;/code>
 &lt;a class="anchor" href="#godocorg">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>godoc.org&lt;/code> 会跳转到 &lt;code>pkg.go.dev/?utm_source=godoc&lt;/code> 再跳转到 &lt;code>pkg.go.dev&lt;/code>&lt;/p></description></item><item><title>Chiannel</title><link>https://kingye.me/study-go/docs/basic/ref/type/channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/channel/</guid><description>&lt;h1 id="chiannel">
 Chiannel
 &lt;a class="anchor" href="#chiannel">#&lt;/a>
&lt;/h1>
&lt;h2 id="channel-类型">
 channel 类型
 &lt;a class="anchor" href="#channel-%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span> &lt;span style="color:#75715e">// can be used to send and receive values of type T
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span> &lt;span style="color:#75715e">// can only be used to send float64s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// can only be used to receive ints
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>&amp;lt;-&lt;/code> operator associates with the leftmost chan possible:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// same as chan&amp;lt;- (chan int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// same as chan&amp;lt;- (&amp;lt;-chan int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// same as &amp;lt;-chan (&amp;lt;-chan int)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> (&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="常见用法">
 常见用法
 &lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e7%94%a8%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用 `make(chan val-type)` 创建一个新的通道。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通道类型就是他们需要传递值的类型。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">messages&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用 `channel &amp;lt;-` 语法 _发送_ 一个新的值到通道中。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这里我们在一个新的协程中发送 `&amp;#34;ping&amp;#34;` 到上面创建的 `messages` 通道中。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() { &lt;span style="color:#a6e22e">messages&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ping&amp;#34;&lt;/span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用 `&amp;lt;-channel` 语法从通道中 _接收_ 一个值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 这里我们会收到在上面发送的 `&amp;#34;ping&amp;#34;` 消息并将其打印出来。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">messages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 如果 ok 的值是 false，表明 接收到的是 特别制造的 0 值 —— 因为发送通道关闭了并且为空（closed and empty）。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">messages&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="done-channel">
 done channel
 &lt;a class="anchor" href="#done-channel">#&lt;/a>
&lt;/h3>
&lt;p>用于保证流水线上每个阶段 goroutine 的退出&lt;/p></description></item><item><title>make</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/make/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/make/</guid><description>&lt;h1 id="make">
 make
 &lt;a class="anchor" href="#make">#&lt;/a>
&lt;/h1>
&lt;p>运算符&lt;code>:=&lt;/code> 是 &lt;code>make()&lt;/code> 的语法糖&lt;/p></description></item><item><title>Map</title><link>https://kingye.me/study-go/docs/basic/ref/type/map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/type/map/</guid><description>&lt;h1 id="map">
 Map
 &lt;a class="anchor" href="#map">#&lt;/a>
&lt;/h1>
&lt;p>Golang 中的 map，实际上就是一个 &lt;code>hashtable&lt;/code>&lt;/p>
&lt;p>在 golang 中，当 map 作为形参时，虽然是值传递，但是由于 make () 返回的是一个指针类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// makemap implements Go map creation for make(map[k]v, hint).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If the compiler has determined that the map or the first bucket
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// can be created on the stack, h and/or bucket may be non-nil.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If h != nil, the map can be created directly in h.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// If h.buckets != nil, bucket pointed to can be used as the first bucket.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makemap&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">maptype&lt;/span>, &lt;span style="color:#a6e22e">hint&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hmap&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hmap&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">hint&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">hint&lt;/span> &amp;gt; int(&lt;span style="color:#a6e22e">maxSliceCap&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">bucket&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hint&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除-map-元素">
 删除 map 元素
 &lt;a class="anchor" href="#%e5%88%a0%e9%99%a4-map-%e5%85%83%e7%b4%a0">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>delete(&lt;span style="color:#66d9ef">map&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="清空-map">
 清空 map
 &lt;a class="anchor" href="#%e6%b8%85%e7%a9%ba-map">#&lt;/a>
&lt;/h3>
&lt;p>Go 语言中并没有为 map 提供任何清空所有元素的函数、方法，
清空 map 的唯一办法就是&lt;strong>重新 make 一个新的 map&lt;/strong>，
不用担心垃圾回收的效率，Go 语言中的并行垃圾回收效率比写一个清空函数要高效的多。&lt;/p></description></item><item><title>select</title><link>https://kingye.me/study-go/docs/basic/ref/keyword/select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/ref/keyword/select/</guid><description>&lt;h1 id="select">
 select
 &lt;a class="anchor" href="#select">#&lt;/a>
&lt;/h1>
&lt;p>Go 的 &lt;strong>选择器（select）&lt;/strong> 让你可以同时等待多个通道操作。&lt;/p>
&lt;p>将协程、通道和选择器结合，是 Go 的一个强大特性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在这个例子中，我们将从两个通道中选择。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">c1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 各个通道将在一定时间后接收一个值，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通过这种方式来模拟并行的协程执行（例如，RPC 操作）时造成的阻塞（耗时）。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c1&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c2&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#e6db74">&amp;#34;two&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 我们使用 `select` 关键字来同时等待这两个值，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 并打印各自接收到的值。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">msg1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;received&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">msg1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">msg2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;received&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">msg2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="随机选则">
 随机选则
 &lt;a class="anchor" href="#%e9%9a%8f%e6%9c%ba%e9%80%89%e5%88%99">#&lt;/a>
&lt;/h2>
&lt;p>除 default 外，如果有多个 case 语句评估通过，那么通过&lt;strong>伪随机&lt;/strong>的方式随机选一个&lt;/p>
&lt;h2 id="非阻塞">
 非阻塞
 &lt;a class="anchor" href="#%e9%9d%9e%e9%98%bb%e5%a1%9e">#&lt;/a>
&lt;/h2>
&lt;h3 id="default-为空">
 default 为空
 &lt;a class="anchor" href="#default-%e4%b8%ba%e7%a9%ba">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sendTime&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#a6e22e">seq&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Non-blocking send of time on c.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// Used in NewTimer, it cannot block anyway (buffer).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// Used in NewTicker, dropping sends on the floor is
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// the desired behavior when the reader gets behind,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// because the sends are periodic.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Time&lt;/span>) &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">Now&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>GC</title><link>https://kingye.me/study-go/docs/design/runtime/gc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/runtime/gc/</guid><description>&lt;h1 id="go-gc">
 Go GC
 &lt;a class="anchor" href="#go-gc">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>Garbage Collection&lt;/code>&lt;/p></description></item><item><title>Go 插件系统</title><link>https://kingye.me/study-go/docs/basic/others/plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/plugin/</guid><description>&lt;h1 id="go-插件系统">
 Go 插件系统
 &lt;a class="anchor" href="#go-%e6%8f%92%e4%bb%b6%e7%b3%bb%e7%bb%9f">#&lt;/a>
&lt;/h1>
&lt;p>Go 1.8 版本开始提供了一个创建共享库的新工具，称为 &lt;code>Plugins&lt;/code>.&lt;/p>
&lt;p>Go 插件是使用 &lt;code>-buildmode=plugin&lt;/code> 标记编译的一个包，用于生成一个共享对象（&lt;code>.so&lt;/code>）库文件。
Go 包中的导出的函数和变量被公开为 &lt;code>ELF&lt;/code> 符号，可以使用 plugin 包在运行时查找并绑定 &lt;code>ELF&lt;/code> 符号。&lt;/p>
&lt;p>Go 编译器能够使用 build flag &lt;code>-buildmode=c-shared&lt;/code> 创建 C 风格的动态共享库。&lt;/p>
&lt;hr>
&lt;h2 id="编写-plugin">
 编写 plugin
 &lt;a class="anchor" href="#%e7%bc%96%e5%86%99-plugin">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>包名称必须是 &lt;code>main&lt;/code>&lt;/li>
&lt;li>&lt;strong>没有 main 函数&lt;/strong>&lt;/li>
&lt;li>必须有可以导出 (访问) 的变量或者方法&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="使用-plugin">
 使用 plugin
 &lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-plugin">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>加载编译好的插件 &lt;code>plugin.Open(&amp;quot;./plugin_doctor.so&amp;quot;)&lt;/code> (&lt;code>*.so&lt;/code> 文件路径相对与可执行文件的路径，可以是绝对路径)&lt;/li>
&lt;li>寻找插件可到变量 &lt;code>plug.Lookup(&amp;quot;Doctor&amp;quot;)&lt;/code>,&lt;/li>
&lt;li>&lt;code>TypeAssert: Symbol (interface {})&lt;/code> 转换成 API 的接口类型&lt;/li>
&lt;li>执行 API interface 的方法&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="优点">
 优点
 &lt;a class="anchor" href="#%e4%bc%98%e7%82%b9">#&lt;/a>
&lt;/h2>
&lt;h2 id="缺陷">
 缺陷
 &lt;a class="anchor" href="#%e7%bc%ba%e9%99%b7">#&lt;/a>
&lt;/h2>
&lt;p>插件实现和主应用程序都必须使用完全相同的 Go 工具链版本构建。
由于插件提供的代码将与主代码在相同的进程空间中运行，因此编译的二进制文件应与主应用程序 100% 兼容。&lt;/p></description></item><item><title>goroutine</title><link>https://kingye.me/study-go/docs/basic/others/goroutine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/goroutine/</guid><description>&lt;h1 id="goroutine">
 goroutine
 &lt;a class="anchor" href="#goroutine">#&lt;/a>
&lt;/h1>
&lt;h2 id="golang-并发模型">
 golang 并发模型
 &lt;a class="anchor" href="#golang-%e5%b9%b6%e5%8f%91%e6%a8%a1%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;h2 id="goroutine-记得-return-或者中断不然容易造成-goroutine-占用大量-cpu">
 goroutine 记得 return 或者中断，不然容易造成 goroutine 占用大量 CPU
 &lt;a class="anchor" href="#goroutine-%e8%ae%b0%e5%be%97-return-%e6%88%96%e8%80%85%e4%b8%ad%e6%96%ad%e4%b8%8d%e7%84%b6%e5%ae%b9%e6%98%93%e9%80%a0%e6%88%90-goroutine-%e5%8d%a0%e7%94%a8%e5%a4%a7%e9%87%8f-cpu">#&lt;/a>
&lt;/h2>
&lt;hr>
&lt;h2 id="goroutine-如何调度">
 Goroutine 如何调度？
 &lt;a class="anchor" href="#goroutine-%e5%a6%82%e4%bd%95%e8%b0%83%e5%ba%a6">#&lt;/a>
&lt;/h2>
&lt;p>每个线程会都占用 &lt;code>1MB&lt;/code> 以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，
每一次线程上下文的切换都需要消耗约为 &lt;code>1us&lt;/code>，
但是 Go 调度器对 Goroutine 的上下文切换约为 &lt;code>0.2us&lt;/code>，减少了 80% 的额外开销。&lt;/p>
&lt;p>Go 语言的调度器通过&lt;strong>使用与 CPU 数量相等的线程&lt;/strong>减少线程频繁切换的内存开销，
同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。&lt;/p>
&lt;hr>
&lt;p>一个 Goroutine 既要包含要执行的代码， 又要包含用于执行该代码的&lt;code>栈&lt;/code>和 &lt;code>PC&lt;/code>、&lt;code>SP 指针&lt;/code>。&lt;/p>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/">Go 语言调度器与 Goroutine 实现原理&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://colobu.com/2017/05/04/go-scheduler/">[译] Go 调度器: M, P 和 G&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/">也谈 goroutine 调度器&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html">Golang 调度器源码分析&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>io</title><link>https://kingye.me/study-go/docs/basic/std/io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/io/</guid><description>&lt;h1 id="iohttpsgolangorgpkgio">
 &lt;a href="https://golang.org/pkg/io/">io&lt;/a>
 &lt;a class="anchor" href="#iohttpsgolangorgpkgio">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>小数据量的拷贝，使用 ioutil.ReadAll 无伤大雅；&lt;/li>
&lt;li>数据量较大时，ReadAll 就是性能炸弹了，最好使用 io.Copy&lt;/li>
&lt;/ul>
&lt;p>参考：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://juejin.cn/post/6977640348679929886">golang 中的 ioutil.ReadAll vs io.Copy&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>net</title><link>https://kingye.me/study-go/docs/basic/std/net/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/net/</guid><description>&lt;h1 id="nethttpsgolangorgpkgnet">
 &lt;a href="https://golang.org/pkg/net/">net&lt;/a>
 &lt;a class="anchor" href="#nethttpsgolangorgpkgnet">#&lt;/a>
&lt;/h1>
&lt;h2 id="http">
 http
 &lt;a class="anchor" href="#http">#&lt;/a>
&lt;/h2>
&lt;h3 id="cgi">
 cgi
 &lt;a class="anchor" href="#cgi">#&lt;/a>
&lt;/h3>
&lt;hr>
&lt;h3 id="fcgi">
 fcgi
 &lt;a class="anchor" href="#fcgi">#&lt;/a>
&lt;/h3>
&lt;hr>
&lt;h3 id="httputil">
 httputil
 &lt;a class="anchor" href="#httputil">#&lt;/a>
&lt;/h3>
&lt;hr>
&lt;h3 id="pprof">
 pprof
 &lt;a class="anchor" href="#pprof">#&lt;/a>
&lt;/h3>
&lt;hr>
&lt;hr>
&lt;h2 id="rpc">
 rpc
 &lt;a class="anchor" href="#rpc">#&lt;/a>
&lt;/h2>
&lt;hr>
&lt;hr>
&lt;h2 id="url">
 url
 &lt;a class="anchor" href="#url">#&lt;/a>
&lt;/h2></description></item><item><title>signal</title><link>https://kingye.me/study-go/docs/basic/std/signal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/signal/</guid><description>&lt;h1 id="signalhttpspkggodevossignal">
 &lt;a href="https://pkg.go.dev/os/signal">signal&lt;/a>
 &lt;a class="anchor" href="#signalhttpspkggodevossignal">#&lt;/a>
&lt;/h1>
&lt;p>The signals &lt;code>SIGKILL&lt;/code> and &lt;code>SIGSTOP&lt;/code> may not be caught by a program,
and therefore cannot be affected by this package.&lt;/p>
&lt;p>By default, a synchronous signal is converted into a run-time panic.&lt;/p>
&lt;p>A SIGHUP, SIGINT, or SIGTERM signal causes the program to exit.&lt;/p>
&lt;p>A SIGQUIT, SIGILL, SIGTRAP, SIGABRT, SIGSTKFLT, SIGEMT, or SIGSYS signal causes the program to exit &lt;strong>with a stack dump&lt;/strong>.&lt;/p>
&lt;p>A SIGTSTP, SIGTTIN, or SIGTTOU signal gets the system default behavior (these signals are used by the shell for job control).&lt;/p></description></item><item><title>sync</title><link>https://kingye.me/study-go/docs/basic/std/sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/sync/</guid><description>&lt;h1 id="sync">
 sync
 &lt;a class="anchor" href="#sync">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>sync.Mutex&lt;/li>
&lt;li>sync.RWMutex&lt;/li>
&lt;li>sync.WaitGroup&lt;/li>
&lt;li>sync.Once&lt;/li>
&lt;li>sync.Cond&lt;/li>
&lt;/ul>
&lt;h2 id="锁的类型">
 锁的类型
 &lt;a class="anchor" href="#%e9%94%81%e7%9a%84%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="mutex-互斥锁">
 Mutex 互斥锁
 &lt;a class="anchor" href="#mutex-%e4%ba%92%e6%96%a5%e9%94%81">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">sema&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// semaphore 信号量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>sync.Mutex.Lock 和 sync.Mutex.Unlock&lt;/li>
&lt;/ul>
&lt;h4 id="state">
 state
 &lt;a class="anchor" href="#state">#&lt;/a>
&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 8 位&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**** ****
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>***** * * *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>waitersCount mutexStarving mutexWoken mutexLocked
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>mutexLocked — 表示互斥锁的&lt;strong>锁定状态&lt;/strong>&lt;/li>
&lt;li>mutexWoken — 表示从正常模式被从唤醒&lt;/li>
&lt;li>mutexStarving — 当前的互斥锁进入&lt;strong>饥饿状态&lt;/strong>
&lt;ul>
&lt;li>Goroutine 超过 &lt;code>1ms&lt;/code> 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止被饿死，造成&lt;strong>高尾延时&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>waitersCount — 当前互斥锁上&lt;strong>等待&lt;/strong>的 Goroutine 个数 (最多 128 个)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="rwmutex">
 RWMutex
 &lt;a class="anchor" href="#rwmutex">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">RWMutex&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">writerSem&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">readerSem&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">readerCount&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">readerWait&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>写操作使用 sync.RWMutex.Lock 和 sync.RWMutex.Unlock 方法；&lt;/li>
&lt;li>读操作使用 sync.RWMutex.RLock 和 sync.RWMutex.RUnlock 方法；&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>调用 &lt;code>sync.RWMutex.Lock&lt;/code> 尝试获取写锁时；
&lt;ul>
&lt;li>每次 &lt;code>sync.RWMutex.RUnlock&lt;/code> 都会将 readerWait 其减一，当它归零时该 Goroutine 就会获得写锁；&lt;/li>
&lt;li>将 readerCount 减少 rwmutexMaxReaders 个数以阻塞后续的读操作；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>调用 &lt;code>sync.RWMutex.Unlock&lt;/code> 释放写锁时，会先通知所有的读操作，然后才会释放持有的互斥锁；&lt;/li>
&lt;/ul>
&lt;p>读写互斥锁在互斥锁之上提供了额外的更细粒度的控制，能够在读操作远远多于写操作时提升性能。&lt;/p></description></item><item><title>time</title><link>https://kingye.me/study-go/docs/basic/std/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/strings/</guid><description>&lt;h1 id="timehttpspkggodevtime">
 &lt;a href="https://pkg.go.dev/time">time&lt;/a>
 &lt;a class="anchor" href="#timehttpspkggodevtime">#&lt;/a>
&lt;/h1>
&lt;h2 id="格式化">
 格式化
 &lt;a class="anchor" href="#%e6%a0%bc%e5%bc%8f%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1 2 3 4 5 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">ANSIC&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon Jan _2 15:04:05 2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">Format&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>time</title><link>https://kingye.me/study-go/docs/basic/std/time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/std/time/</guid><description>&lt;h1 id="timehttpspkggodevtime">
 &lt;a href="https://pkg.go.dev/time">time&lt;/a>
 &lt;a class="anchor" href="#timehttpspkggodevtime">#&lt;/a>
&lt;/h1>
&lt;h2 id="格式化">
 格式化
 &lt;a class="anchor" href="#%e6%a0%bc%e5%bc%8f%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1 2 3 4 5 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">ANSIC&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Mon Jan _2 15:04:05 2006&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">Unix&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">Format&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>并发</title><link>https://kingye.me/study-go/docs/design/runtime/concurrent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/design/runtime/concurrent/</guid><description>&lt;h1 id="go-并发">
 Go 并发
 &lt;a class="anchor" href="#go-%e5%b9%b6%e5%8f%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="mutex">
 Mutex
 &lt;a class="anchor" href="#mutex">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Mutex&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> &lt;span style="color:#75715e">// 状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">sema&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// 信号量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>state (32 位)
&lt;ul>
&lt;li>waitersCount (29 位): 当前互斥锁上等待的 Goroutine 个数&lt;/li>
&lt;li>mutexStarving (1 位): 当前的互斥锁进入&lt;strong>饥饿状态&lt;/strong>
&lt;ul>
&lt;li>Goroutine 超过 1 ms 没有获取到锁，就会转为饥饿模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mutexWoken (1 位): 从正常模式被从唤醒&lt;/li>
&lt;li>mutexLocked (1 位): 互斥锁的锁定状态&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>版本</title><link>https://kingye.me/study-go/docs/basic/others/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-go/docs/basic/others/version/</guid><description>&lt;h1 id="go-版本">
 Go 版本
 &lt;a class="anchor" href="#go-%e7%89%88%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://github.com/golang/go">golang/go&lt;/a> &lt;img src="https://img.shields.io/github/stars/golang/go.svg" alt="Github stars" /> &lt;img src="https://img.shields.io/github/forks/golang/go.svg" alt="Github forks" /> &lt;img src="https://img.shields.io/github/languages/top/golang/go.svg" alt="Language" /> &lt;img src="https://img.shields.io/github/v/tag/golang/go.svg?sort=semver" alt="Last Tag" /> &lt;img src="https://img.shields.io/github/last-commit/golang/go.svg" alt="Last commit" />&lt;/p>
&lt;h2 id="版本历史httpsgolangorgdocdevelreleasehtml">
 &lt;a href="https://golang.org/doc/devel/release.html">版本历史&lt;/a>
 &lt;a class="anchor" href="#%e7%89%88%e6%9c%ac%e5%8e%86%e5%8f%b2httpsgolangorgdocdevelreleasehtml">#&lt;/a>
&lt;/h2>
&lt;h3 id="120httpsgolangorgdocgo120">
 &lt;a href="https://golang.org/doc/go1.20">1.20&lt;/a>
 &lt;a class="anchor" href="#120httpsgolangorgdocgo120">#&lt;/a>
&lt;/h3>
&lt;h3 id="119httpsgolangorgdocgo119-2022-08-02">
 &lt;a href="https://golang.org/doc/go1.19">1.19&lt;/a> (2022-08-02)
 &lt;a class="anchor" href="#119httpsgolangorgdocgo119-2022-08-02">#&lt;/a>
&lt;/h3>
&lt;p>它的大部分变化是在工具链、运行时和库的实现方面。&lt;/p>
&lt;h3 id="118httpsgolangorgdocgo118-2022-03-15">
 &lt;a href="https://golang.org/doc/go1.18">1.18&lt;/a> (2022-03-15)
 &lt;a class="anchor" href="#118httpsgolangorgdocgo118-2022-03-15">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>范型&lt;/li>
&lt;/ul>
&lt;h3 id="117httpsgolangorgdocgo117-2021-08-16">
 &lt;a href="https://golang.org/doc/go1.17">1.17&lt;/a> (2021-08-16)
 &lt;a class="anchor" href="#117httpsgolangorgdocgo117-2021-08-16">#&lt;/a>
&lt;/h3>
&lt;p>支持从切片到数组指针的转换。&lt;/p>
&lt;h3 id="116httpsgolangorgdocgo116-2021-02-16">
 &lt;a href="https://golang.org/doc/go1.16">1.16&lt;/a> (2021-02-16)
 &lt;a class="anchor" href="#116httpsgolangorgdocgo116-2021-02-16">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>go build&lt;/code> / &lt;code>go run&lt;/code>命令不再自动更新 go.mod 和 go.sum 了
&lt;ul>
&lt;li>需要使用 &lt;code>go get&lt;/code>&lt;/li>
&lt;li>&lt;code>go mod tidy&lt;/code> 依然执行对 go.mod 的清理&lt;/li>
&lt;li>&lt;code>自动更新 go.mod&lt;/code> &amp;ndash;&amp;gt; &lt;code>-mod=readonly 选项避免自动更新 go.mod&lt;/code> &amp;ndash;&amp;gt; &lt;code>取消自动更新 go.mod&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>后续，Go 团队会让 go get 将专注于分析依赖，并获取 go 包/module，更新 go.mod/go.sum，而不再具有安装可执行 Go 程序的行为能力，
这样 go get 和 go install 就会各司其职，Gopher 们也不会再被两者的重叠行为所迷惑了。
现在如果不想 go get 编译安装，可使用 &lt;code>go get -d&lt;/code>&lt;/p></description></item></channel></rss>