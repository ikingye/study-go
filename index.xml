<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on Go 学习笔记</title>
    <link>https://ikingye.github.io/study-go/</link>
    <description>Recent content in 首页 on Go 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 快速上手</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/quick/</guid>
      <description>Go 快速上手 Go 环境 GOROOT GOROOT: 指定安装 GO 的根目录
Go 1.0 之后，go tool 利用 GOROOT 查找 Go 编译器（保存在 $GOROOT/pkg/tool/$GOOS_$GOARCH） 和标准库（在 $GOROOT/pkg/$GOOS_$GOARCH）
可以将 GOROOT 理解为 Java 的 JAVA_HOME。
我们不应该设置 GOROOT，是因为 Go 工具链已经内置了正确的值。 除非：
 如果你是 Linux、FreeBSD 或者 OS X 用户，下载了 zip 和 tarball 的二进制包安装环境。这些二进制的默认环境位于 /usr/local/go，建议你将 Go 安装到这个位置。如果选择不这么做，就必须设置到你指定的目录下。 如果你是 Windows 用户，使用 zip 二进制包安装，默认的 GOROOT 在 C:\Go 目录下。如果你将 Go 安装在其他位置，请设置 GOROOT 到指定的目录。  GOPATH GOPATH: go 包的位置
GOOS vs GOARCH 随着 go tool 的引入，Go 1.</description>
    </item>
    
    <item>
      <title>sort</title>
      <link>https://ikingye.github.io/study-go/docs/basic/std/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/std/sort/</guid>
      <description>sort 自定义排序 实现 Len、Less 和 Swap 方法
// 有时候，我们可能想根据自然顺序以外的方式来对集合进行排序。 // 例如，假设我们要按字符串的长度而不是按字母顺序对它们进行排序。 // 这儿有一个在 Go 中自定义排序的示例。  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) // 为了在 Go 中使用自定义函数进行排序，我们需要一个对应的类型。 // 我们在这里创建了一个 `byLength` 类型，它只是内建类型 `[]string` 的别名。 type byLength []string // 我们为该类型实现了 `sort.Interface` 接口的 `Len`、`Less` 和 `Swap` 方法， // 这样我们就可以使用 `sort` 包的通用 `Sort` 方法了， // `Len` 和 `Swap` 在各个类型中的实现都差不多， // `Less` 将控制实际的自定义排序逻辑。 // 在这个的例子中，我们想按字符串长度递增的顺序来排序， // 所以这里使用了 `len(s[i])` 和 `len(s[j])` 来实现 `Less`。 func (s byLength) Len() int { return len(s) } func (s byLength) Swap(i, j int) { s[i], s[j] = s[j], s[i] } func (s byLength) Less(i, j int) bool { return len(s[i]) &amp;lt; len(s[j]) } // 一切准备就绪后，我们就可以通过将切片 `fruits` 强转为 `byLength` 类型的切片， // 然后对该切片使用 `sort.</description>
    </item>
    
    <item>
      <title>百度</title>
      <link>https://ikingye.github.io/study-go/docs/basic/spec/baidu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/spec/baidu/</guid>
      <description>百度 Golang 编码规范 V1.2 </description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://ikingye.github.io/study-go/docs/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/appendix/interview/basic/</guid>
      <description>基础面试题 </description>
    </item>
    
    <item>
      <title>常用 package</title>
      <link>https://ikingye.github.io/study-go/docs/advanced/pkg/common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/advanced/pkg/common/</guid>
      <description>Go 常用 package net imroc/req  Go 语言人性化 HTTP 请求库
 cmd spf13/cobra  A Commander for modern Go CLI interactions
quick start typically a Cobra-based application will follow the following organizational structure:
▾ appName/ ▾ cmd/ add.go your.go commands.go here.go main.go In a Cobra app, typically the main.go file is very bare. It serves one purpose: initializing Cobra.
package main import ( &amp;#34;{pathToYourApp}/cmd&amp;#34; ) func main() { cmd.Execute() } Ideally you place this in app/cmd/root.</description>
    </item>
    
    <item>
      <title>进阶</title>
      <link>https://ikingye.github.io/study-go/docs/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/appendix/interview/advanced/</guid>
      <description>进阶面试题 </description>
    </item>
    
    <item>
      <title>高阶</title>
      <link>https://ikingye.github.io/study-go/docs/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/appendix/interview/expert/</guid>
      <description>高阶面试题 </description>
    </item>
    
    <item>
      <title>3.1.1 类型系统</title>
      <link>https://ikingye.github.io/study-go/docs/code/structure/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/code/structure/type/</guid>
      <description>Go 类型系统 Underlying Type  每一个类型都有自己的 Underlying Type  如果 T 是 Pre-declared type 或者 Type Literal，它们对应的 Underlying Type 就是自身 T  比如 type T int 的 Underlying Type 是 int  int 是 Pre-declared   type T map[int]string 的 Underlying Type 是 map[int]string  map[int]string 是 Type Literal     否则 T 的 Underlying Type 是 T 定义时引用的类型的 Underlying Type    Underlying Type 相同 如果两个 type 的 Underlying Type 相同，则它们可以有以下特性：</description>
    </item>
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-go/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/appendix/tutorial/</guid>
      <description>Go 教程 基础    教程 说明 类型 评分     mmcgrana/gobyexample  Go by Example 中文翻译：通过例子学 Golang：https://gobyexample-cn.github.io/ docs ★★★★★   astaxie/build-web-application-with-golang  A golang ebook intro how to build a web with golang docs ★★★★   geektutu/7days-golang  7 天用 Go 动手写 / 从零实现系列 docs ★★★★   golang101/golang101  Go 语言 101 : 一本侧重于 Go 语言语法和语义的编程解释和指导书 https://gfw.go101.org docs ★★★★   polaris1119/The-Golang-Standard-Library-by-Example  Golang 标准库。对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，能为各种常见的任务提供完美的解决方案。 以示例驱动的方式讲解 Golang 的标准库。 docs ★★★   inancgumus/learngo  1000+ Hand-Crafted Go Examples, Exercises, and Quizzes course ★★★   ardanlabs/gotraining  Go Training Class Material : http://www.</description>
    </item>
    
    <item>
      <title>defer</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/defer/</guid>
      <description>defer 用于确保程序在执行完成后，会调用某个函数，一般是执行清理工作。
Defer 的用途跟其他语言的 ensure 或 finally 类似。
当 defer 释放锁遇到尾递归 var mut = sync.Mutex{} func tailRec(i int) int { mut.Lock() // 加锁  defer mut.Unlock() // defer 释放锁  if i == 10 { return i } i++ return tailRec(i) // return 尾递归 } 以上代码执行会发生死锁，原因是 return 语句后的命令先执行，赋值给匿名返回值后，再调用 defer， 因此尾递归中 tailRec 的加锁会在 defer 释放锁之前进行，形成死锁。
根因是 golang 处理 defer 和 return 的顺序为， 计算 return 语句的返回值、赋值给匿名 / 有名返回值 -&amp;gt;defer-&amp;gt;RET 退出函数</description>
    </item>
    
    <item>
      <title>error</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/error/</guid>
      <description>error 实现 Error() string 方法的类型，都是 error 类型
type error interface { Error() string } errors.New(&amp;#34;xxxx&amp;#34;) fmt.Errorf(format string, a ...interface{}) </description>
    </item>
    
    <item>
      <title>Go 初始化</title>
      <link>https://ikingye.github.io/study-go/docs/code/runtime/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/code/runtime/init/</guid>
      <description>Go 初始化 golang 程序初始化先于 main 函数执行，由 runtime 进行初始化，初始化顺序如下：
 初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime 需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见 golang 变量的初始化）； 初始化包作用域的变量（该作用域的变量的初始化也并非按照 “从上到下、从左到右” 的顺序，runtime 解析变量依赖关系，没有依赖的变量最先初始化，参见 golang 变量的初始化）； 执行包的 init 函数；   变量初始化 -&amp;gt;init ()-&amp;gt;main () 由于 pack 包的初始化依赖 test_util，因此运行时先初始化 test_util 再初始化 pack 包；   同一个包不同源文件的 init 函数执行顺序，golang spec 没做说明  一般是源文件名称的字典序，但不能依赖这个假定     在每一个初始化周期，运行时（runtime）会挑选一个没有任何依赖的变量初始化  该过程一直持续到所有的变量均被初始化或者出现依赖嵌套的情形   同一个 package 下多个文件的变量初始化依赖也遵循相同的规则   变量初始化 不同作用域类型的变量初始化顺序不同
函数作用域内的局部变量 初始化顺序：从左到右、从上到下
package 级别的变量 初始化顺序与初始化依赖有关
 </description>
    </item>
    
    <item>
      <title>Go 调度</title>
      <link>https://ikingye.github.io/study-go/docs/code/runtime/scheduling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/code/runtime/scheduling/</guid>
      <description>Go 调度 Go 调度器的发展  单线程调度器・0.x  只包含 40 多行代码； 程序中只能存在一个活跃线程，由 G-M 模型组成；   多线程调度器・1.0  允许运行多线程的程序； 全局锁导致竞争严重；   任务窃取调度器・1.1  引入了处理器 P，构成了目前的 G-M-P 模型； 在处理器 P 的基础上实现了基于工作窃取的调度器； 在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题； 时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；   抢占式调度器・1.2 ~ 至今  基于协作的抢占式调度器 - 1.2 ~ 1.13  通过编译器在函数调用时插入抢占检查指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度； Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；   基于信号的抢占式调度器 - 1.14 ~ 至今  实现基于信号的真抢占式调度； 垃圾回收在扫描栈时会触发抢占调度； 抢占的时间点不够多，还不能覆盖全部的边缘情况；     非均匀存储访问调度器・提案  对运行时的各种资源进行分区； 实现非常复杂，到今天还没有提上日程；    除了多线程、任务窃取和抢占式调度器之外，Go 语言社区目前还有一个非均匀存储访问（Non-uniform memory access，NUMA）调度器的提案，Go 语言在未来也有实现该提案的可能。</description>
    </item>
    
    <item>
      <title>init</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/func/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/func/init/</guid>
      <description>init 函数  作用  初始化不能采用初始化表达式初始化的变量 程序运行前的注册 实现 sync.Once 功能   特点  init 函数先于 main 函数自动执行 init 不能被其他函数调用 init 函数没有输入参数、返回值 每个包可以有多个 init 函数  包的每个源文件也可以有多个 init 函数   同一个包的 init 执行顺序，golang 没有明确定义，编程时要注意程序不要依赖这个执行顺序 不同包的 init 函数按照包导入的依赖关系决定执行顺序   问答 只想调用该包的 init 函数，不使用包导出的变量或者方法 import _ &amp;#34;net/http/pprof&amp;#34; 执行上述导入后，init 函数会启动一个异步协程采集该进程实例的资源占用情况，并以 http 服务接口方式提供给用户查询。
 参考 </description>
    </item>
    
    <item>
      <title>interface</title>
      <link>https://ikingye.github.io/study-go/docs/code/keyword/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/code/keyword/interface/</guid>
      <description>interface Go Data Structures: Interfaces
读完这篇 go 作者的 blog，interface 就没什么秘密可言了。每个 interface 至少包含两个字段，type 和 data，不论什么形式，然后是 itable 什么时候生成，如何调用。
结合 Comparison operators，记住 interface 的 compare 规则。</description>
    </item>
    
    <item>
      <title>Receiver</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/func/receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/func/receiver/</guid>
      <description>Receiver 结构体类型实现的接口，该结构体的指针类型也算实现了
使用规则  必须使用指针  struct，且包含 sync.Mutex 类型字段   建议使用指针  比较大的 struct/array  struct 或者 array 中的元素个数超过 3 个，则认为比较大，反之，则认为比较小   struct、array 或 slice，其中指针元素所指的内容可能在方法内被修改   建议使用 value 类型  比较小的 struct/array   必须使用 value 类型（编程规范）  map、函数或者 chan 类型 slice，并且方法不会进行 reslice 或者重新分配 slice    method expression package main import ( &amp;#34;fmt&amp;#34; ) type Ball struct { Name string } func (b *Ball) Ping() { fmt.</description>
    </item>
    
    <item>
      <title>优劣</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/pros-and-cons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/pros-and-cons/</guid>
      <description>Go 语言优劣 Go 的优点 部署简单  直接编译成机器码 不依赖其他库 直接运行即可部署  静态类型语言 编译时可检测出隐藏的大多数问题
语言层面实现并发（goroutine） 强大的标准库  runtime 系统调度机制 高效的 GC（垃圾回收） 丰富的标准库  简单易学  25 个关键字 内嵌 C 语法支持（CGO） 面向对象 跨平台  背靠大厂（Google） 性能好  Go 的缺点 无泛化类型 传言 Go 2.0 会加上
无 Exception，都用 Error 有争议
包管理大部分在 Github 参考：
 2020 年以后是 Go 的天下吗？  </description>
    </item>
    
    <item>
      <title>关键字</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/keyword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/keyword/</guid>
      <description>Go 语言关键字 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var for 与 range select defer panic 与 recover make 与 new </description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/command/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/command/install/</guid>
      <description>安装 </description>
    </item>
    
    <item>
      <title>格式化输出</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/format/</guid>
      <description>格式化输出 // Go 提供了一些用于格式化常规值的打印“动词”。 // 例如，这样打印 `point` 结构体的实例。 p := point{1, 2} fmt.Printf(&amp;#34;%v\n&amp;#34;, p) // 如果值是一个结构体，`%+v` 的格式化输出内容将包括结构体的字段名。 fmt.Printf(&amp;#34;%+v\n&amp;#34;, p) // `%#v` 根据 Go 语法输出值，即会产生该值的源码片段。 fmt.Printf(&amp;#34;%#v\n&amp;#34;, p) // 需要打印值的类型，使用 `%T`。 fmt.Printf(&amp;#34;%T\n&amp;#34;, p) // 格式化布尔值很简单。 fmt.Printf(&amp;#34;%t\n&amp;#34;, true) // 格式化整型数有多种方式，使用 `%d` 进行标准的十进制格式化。 fmt.Printf(&amp;#34;%d\n&amp;#34;, 123) // 这个输出二进制表示形式。 fmt.Printf(&amp;#34;%b\n&amp;#34;, 14) // 输出给定整数的对应字符。 fmt.Printf(&amp;#34;%c\n&amp;#34;, 33) // `%x` 提供了十六进制编码。 fmt.Printf(&amp;#34;%x\n&amp;#34;, 456) // 同样的，也为浮点型提供了多种格式化选项。 // 使用 `%f` 进行最基本的十进制格式化。 fmt.Printf(&amp;#34;%f\n&amp;#34;, 78.9) // `%e` 和 `%E` 将浮点型格式化为（稍微有一点不同的）科学记数法表示形式。 fmt.Printf(&amp;#34;%e\n&amp;#34;, 123400000.0) fmt.Printf(&amp;#34;%E\n&amp;#34;, 123400000.</description>
    </item>
    
    <item>
      <title>Go 热编译</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/gobuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/gobuild/</guid>
      <description>Go 热编译 Go 语言热编译工具 caixw/gobuild  gobuild 是一个简单的 Go 代码热编译工具。 会实时监控指定目录下的文件变化 (重命名，删除，创建，添加)，并编译和运行程序。
gobuild [options] [dependents] options: -h 显示当前帮助信息； -v 显示 gobuild 和 Go 程序的版本信息； -r 是否搜索子目录，默认为 true； -i 是否显示被标记为 IGNORE 的日志内容，默认为 false，即不显示； -o 执行编译后的可执行文件名； -x 传递给编译程序的参数； -ext 需要监视的扩展名，默认值为&amp;#34;go&amp;#34;，区分大小写，会去掉每个扩展名的首尾空格。 若需要监视所有类型文件，请使用 *，传递空值代表不监视任何文件； -main 指定需要编译的文件，默认为&amp;#34;&amp;#34;。 dependents: 指定其它依赖的目录，只能出现在命令的尾部。 penggy/gobuild  EasyDarwin 依赖
# go tools go get -u -v github.com/kardianos/govendor go get -u -v github.com/penggy/gobuild # npm tools npm i -g apidoc npm i -g rimraf </description>
    </item>
    
    <item>
      <title>gopls</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/gopls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/gopls/</guid>
      <description>gopls gopls (pronounced: &amp;ldquo;go please&amp;rdquo;) is the official language server for the Go language.
Go 扩展默认是使用大量的 Go 工具来提供各种功能的， 每个工具提供某个方面的能力，比如代码提示是依靠 gocode 的.
不过微软在开发 VS Code 过程中，定义一种协议，语言服务器协议， Language Server Protocol.
这可是个好东西，如果你需要开发编辑器或 IDE, 就不需要再为每种语言实现诸如自动完成，代码提示等功能了， 直接利用 语言服务器协议 就行了.
gopls 就是官方的语言服务器，当前处于 alpha 状态.</description>
    </item>
    
    <item>
      <title>切片</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/slice/</guid>
      <description>Go 切片 contains func contains(s []int, e int) bool { for _, a := range s { if a == e { return true } } return false } 使用 map[string] struct{} 参考：
 Contains method for a slice  </description>
    </item>
    
    <item>
      <title>包管理</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/pm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/pm/</guid>
      <description>包管理 Go 包管理概述 Go 1.4 及之前  必须设置 GOPATH 环境变量，且源代码必须存放在 GOPATH 下 拉取外部依赖包时，总是拉取最新的版本，无法指定需要的版本  设置 GOPATH 环境变量有两个原因：
 它规定了 go get 命令下载的依赖包的存储位置（$GOPATH/src） 通过设置 GOPATH，可以方便 Golang 计算出 import 的路径  Go 1.5 至 Go 1.10 每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包
Go 1.11 至 Go 1.12  默认使用的还是 GOPATH 的管理方式 运行 export GO111MODULE=on，使用 Go Modules  GO111MODULE 为 off 时：
 优先使用 vendor 目录下面的包， 如果 vendor 下面没有搜索到，再搜索 $GOPATH/src 下面的包， 如果 $GOPATH 下面没有搜索到，那么搜索 $GOROOT/src 下面的包  Go 1.</description>
    </item>
    
    <item>
      <title>数组</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/array/</guid>
      <description>Go 数组 </description>
    </item>
    
    <item>
      <title>编译</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/command/compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/command/compile/</guid>
      <description>编译 </description>
    </item>
    
    <item>
      <title>编译</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/compile/</guid>
      <description>编译 交叉编译 golang 交叉编译很简单的，只要设置几个环境变量就可以了
# mac上编译linux和windows二进制 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build # linux上编译mac和windows二进制 CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build # windows上编译mac和linux二进制 SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.go </description>
    </item>
    
    <item>
      <title>Interface</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/interface/</guid>
      <description>Go Interface </description>
    </item>
    
    <item>
      <title>Chiannel</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/channel/</guid>
      <description>Chiannel channel 类型 chan T // can be used to send and receive values of type T chan&amp;lt;- float64 // can only be used to send float64s &amp;lt;-chan int // can only be used to receive ints The &amp;lt;- operator associates with the leftmost chan possible:
chan&amp;lt;- chan int // same as chan&amp;lt;- (chan int) chan&amp;lt;- &amp;lt;-chan int // same as chan&amp;lt;- (&amp;lt;-chan int) &amp;lt;-chan &amp;lt;-chan int // same as &amp;lt;-chan (&amp;lt;-chan int) chan (&amp;lt;-chan int)  常见用法 // 使用 `make(chan val-type)` 创建一个新的通道。 // 通道类型就是他们需要传递值的类型。 messages := make(chan string) // 使用 `channel &amp;lt;-` 语法 _发送_ 一个新的值到通道中。 // 这里我们在一个新的协程中发送 `&amp;#34;ping&amp;#34;` 到上面创建的 `messages` 通道中。 go func() { messages &amp;lt;- &amp;#34;ping&amp;#34; }() // 使用 `&amp;lt;-channel` 语法从通道中 _接收_ 一个值。 // 这里我们会收到在上面发送的 `&amp;#34;ping&amp;#34;` 消息并将其打印出来。 msg := &amp;lt;-messages fmt.</description>
    </item>
    
    <item>
      <title>make</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/make/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/make/</guid>
      <description>make 运算符:= 是 make() 的语法糖</description>
    </item>
    
    <item>
      <title>Map</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/type/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/type/map/</guid>
      <description>Map Golang 中的 map，实际上就是一个 hashtable
在 golang 中，当 map 作为形参时，虽然是值传递，但是由于 make () 返回的是一个指针类型
// makemap implements Go map creation for make(map[k]v, hint). // If the compiler has determined that the map or the first bucket // can be created on the stack, h and/or bucket may be non-nil. // If h != nil, the map can be created directly in h. // If h.buckets != nil, bucket pointed to can be used as the first bucket.</description>
    </item>
    
    <item>
      <title>select</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/select/</guid>
      <description>select Go 的 选择器（select） 让你可以同时等待多个通道操作。
将协程、通道和选择器结合，是 Go 的一个强大特性。
// 在这个例子中，我们将从两个通道中选择。 c1 := make(chan string) c2 := make(chan string) // 各个通道将在一定时间后接收一个值， // 通过这种方式来模拟并行的协程执行（例如，RPC 操作）时造成的阻塞（耗时）。 go func() { time.Sleep(1 * time.Second) c1 &amp;lt;- &amp;#34;one&amp;#34; }() go func() { time.Sleep(2 * time.Second) c2 &amp;lt;- &amp;#34;two&amp;#34; }() // 我们使用 `select` 关键字来同时等待这两个值， // 并打印各自接收到的值。 for i := 0; i &amp;lt; 2; i++ { select { case msg1 := &amp;lt;-c1: fmt.Println(&amp;#34;received&amp;#34;, msg1) case msg2 := &amp;lt;-c2: fmt.</description>
    </item>
    
    <item>
      <title>Cond</title>
      <link>https://ikingye.github.io/study-go/docs/basic/std/sync/cond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/std/sync/cond/</guid>
      <description>Cond type Cond struct { // L is held while observing or changing the condition 	L Locker // contains filtered or unexported fields } func (c *Cond) Broadcast() func (c *Cond) Signal() func (c *Cond) Wait()  条件  一个条件一定要有一个信号   信号  wait 等待的是信号 signal 发送的是信号 一个信号可以对应到多个条件    </description>
    </item>
    
    <item>
      <title>goroutine</title>
      <link>https://ikingye.github.io/study-go/docs/basic/grammar/goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/grammar/goroutine/</guid>
      <description>goroutine golang 并发模型 goroutine 记得 return 或者中断，不然容易造成 goroutine 占用大量 CPU </description>
    </item>
    
    <item>
      <title>Mutex</title>
      <link>https://ikingye.github.io/study-go/docs/basic/std/sync/mutex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/std/sync/mutex/</guid>
      <description>Mutex Mutex 互斥锁  在一个 goroutine 获得 Mutex 后，其他 goroutine 只能等到这个 goroutine 释放该 Mutex 使用 Lock() 加锁后，不能再继续对其加锁，直到利用 Unlock() 解锁后才能再加锁  在同一个 goroutine 中的 Mutex 解锁之前再次进行加锁，会导致死锁   在 Lock() 之前使用 Unlock() 会导致 panic 异常 已经锁定的 Mutex 并不与特定的 goroutine 相关联，这样可以利用一个 goroutine 对其加锁，再利用其他 goroutine 对其解锁 适用于读写不确定，并且只有一个读或者写的场景  type Mutex struct { // contains filtered or unexported fields } func (m *Mutex) Lock() func (m *Mutex) Unlock() RWMutex 读写锁（读多写少） RWMutex 基于 Mutex 实现</description>
    </item>
    
    <item>
      <title>signal</title>
      <link>https://ikingye.github.io/study-go/docs/basic/std/signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/std/signal/</guid>
      <description>signal The signals SIGKILL and SIGSTOP may not be caught by a program, and therefore cannot be affected by this package.
By default, a synchronous signal is converted into a run-time panic.
A SIGHUP, SIGINT, or SIGTERM signal causes the program to exit.
A SIGQUIT, SIGILL, SIGTRAP, SIGABRT, SIGSTKFLT, SIGEMT, or SIGSYS signal causes the program to exit with a stack dump.
A SIGTSTP, SIGTTIN, or SIGTTOU signal gets the system default behavior (these signals are used by the shell for job control).</description>
    </item>
    
    <item>
      <title>time</title>
      <link>https://ikingye.github.io/study-go/docs/basic/std/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/std/time/</guid>
      <description>time 格式化 // 1 2 3 4 5 6 const ANSIC = &amp;#34;Mon Jan _2 15:04:05 2006&amp;#34; time.Now().Format(&amp;#34;2006-01-02 15:04:05&amp;#34;) </description>
    </item>
    
    <item>
      <title>关注</title>
      <link>https://ikingye.github.io/study-go/docs/advanced/pkg/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/advanced/pkg/attention/</guid>
      <description>关注 golang/go  kubernetes/kubernetes  moby/moby  etcd-io/etcd  Distributed reliable key-value store for the most critical data of a distributed system
containous/traefik  The Cloud Native Edge Router https://traefik.io
 Web 框架 gin-gonic/gin  Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance &amp;ndash; up to 40 times faster. If you need smashing performance, get yourself some Gin. https://gin-gonic.com/</description>
    </item>
    
    <item>
      <title>日志</title>
      <link>https://ikingye.github.io/study-go/docs/advanced/pkg/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/advanced/pkg/log/</guid>
      <description>Go 日志 开源实现 sirupsen/logrus  Structured, pluggable logging for Go.
uber-go/zap  Blazing fast, structured, leveled logging in Go.
rs/zerolog  Zero Allocation JSON Logger
apex/log (最新更新时间 2016) Structured logging package for Go.
golang/glog (最新更新时间 2016) Leveled execution logs for Go</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://ikingye.github.io/study-go/docs/basic/others/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-go/docs/basic/others/test/</guid>
      <description>Go 测试 开源实现 onsi/ginkgo  BDD Testing Framework for Go</description>
    </item>
    
  </channel>
</rss>