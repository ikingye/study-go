<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on Go 学习笔记</title>
    <link>https://kingye.me/study-go/</link>
    <description>Recent content in 首页 on Go 学习笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kingye.me/study-go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 快速上手</title>
      <link>https://kingye.me/study-go/docs/basic/others/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/quick/</guid>
      <description>&lt;h1 id=&#34;go-快速上手&#34;&gt;&#xA;  Go 快速上手&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%bf%ab%e9%80%9f%e4%b8%8a%e6%89%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;go-环境&#34;&gt;&#xA;  Go 环境&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%8e%af%e5%a2%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;goroot&#34;&gt;&#xA;  GOROOT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goroot&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;GOROOT&lt;/code&gt;: 指定安装 GO 的根目录&lt;/p&gt;&#xA;&lt;p&gt;Go 1.0 之后，&lt;code&gt;go tool&lt;/code&gt; 利用 &lt;code&gt;GOROOT&lt;/code&gt; 查找&#xA;Go 编译器（保存在 &lt;code&gt;$GOROOT/pkg/tool/$GOOS_$GOARCH&lt;/code&gt;）&#xA;和标准库（在 &lt;code&gt;$GOROOT/pkg/$GOOS_$GOARCH&lt;/code&gt;）&lt;/p&gt;&#xA;&lt;p&gt;可以将 &lt;code&gt;GOROOT&lt;/code&gt; 理解为 Java 的 &lt;code&gt;JAVA_HOME&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;我们不应该设置 GOROOT，是因为 Go 工具链已经内置了正确的值。&#xA;除非：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果你是 Linux、FreeBSD 或者 OS X 用户，下载了 zip 和 tarball 的二进制包安装环境。这些二进制的默认环境位于 /usr/local/go，建议你将 Go 安装到这个位置。如果选择不这么做，就必须设置到你指定的目录下。&lt;/li&gt;&#xA;&lt;li&gt;如果你是 Windows 用户，使用 zip 二进制包安装，默认的 GOROOT 在 C:\Go 目录下。如果你将 Go 安装在其他位置，请设置 GOROOT 到指定的目录。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;gopath&#34;&gt;&#xA;  GOPATH&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gopath&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt;: go 包的位置&lt;/p&gt;</description>
    </item>
    <item>
      <title>sort</title>
      <link>https://kingye.me/study-go/docs/basic/std/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/sort/</guid>
      <description>&lt;h1 id=&#34;sort&#34;&gt;&#xA;  sort&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sort&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;自定义排序&#34;&gt;&#xA;  自定义排序&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8e%92%e5%ba%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;实现 &lt;code&gt;Len&lt;/code&gt;、&lt;code&gt;Less&lt;/code&gt; 和 &lt;code&gt;Swap&lt;/code&gt; 方法&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 有时候，我们可能想根据自然顺序以外的方式来对集合进行排序。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 例如，假设我们要按字符串的长度而不是按字母顺序对它们进行排序。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这儿有一个在 Go 中自定义排序的示例。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 为了在 Go 中使用自定义函数进行排序，我们需要一个对应的类型。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 我们在这里创建了一个 `byLength` 类型，它只是内建类型 `[]string` 的别名。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;byLength&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 我们为该类型实现了 `sort.Interface` 接口的 `Len`、`Less` 和 `Swap` 方法，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这样我们就可以使用 `sort` 包的通用 `Sort` 方法了，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `Len` 和 `Swap` 在各个类型中的实现都差不多，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `Less` 将控制实际的自定义排序逻辑。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在这个的例子中，我们想按字符串长度递增的顺序来排序，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 所以这里使用了 `len(s[i])` 和 `len(s[j])` 来实现 `Less`。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;byLength&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;byLength&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Swap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;byLength&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Less&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]) &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;j&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 一切准备就绪后，我们就可以通过将切片 `fruits` 强转为 `byLength` 类型的切片，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 然后对该切片使用 `sort.Sort` 来实现自定义排序。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fruits&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;peach&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kiwi&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;byLength&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fruits&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fruits&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>4.1 教程</title>
      <link>https://kingye.me/study-go/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/appendix/tutorial/</guid>
      <description>&lt;h1 id=&#34;go-教程&#34;&gt;&#xA;  Go 教程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e6%95%99%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;基础&#34;&gt;&#xA;  基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;go-学习笔记第六版---雨痕httpswwwyuquecomqyuhengo&#34;&gt;&#xA;  &lt;a href=&#34;https://www.yuque.com/qyuhen/go&#34;&gt;Go 学习笔记，第六版 - 雨痕&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e7%ac%ac%e5%85%ad%e7%89%88---%e9%9b%a8%e7%97%95httpswwwyuquecomqyuhengo&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;50-shades-of-go-traps-gotchas-and-common-mistakes-for-new-golang-devshttpdevscloudimmunitycomgotchas-and-common-mistakes-in-go-golang&#34;&gt;&#xA;  &lt;a href=&#34;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/&#34;&gt;50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#50-shades-of-go-traps-gotchas-and-common-mistakes-for-new-golang-devshttpdevscloudimmunitycomgotchas-and-common-mistakes-in-go-golang&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yinzige.com/2018/03/07/50-shades-of-golang-traps-gotchas-mistakes/&#34;&gt;Go 新手可能会踩的 50 个坑&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;go-by-examplehttpsgobyexamplecom&#34;&gt;&#xA;  &lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by Example&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-by-examplehttpsgobyexamplecom&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mmcgrana/gobyexample&#34;&gt;mmcgrana/gobyexample&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/mmcgrana/gobyexample.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/mmcgrana/gobyexample.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/mmcgrana/gobyexample.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/mmcgrana/gobyexample.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;中文翻译：&#xA;&lt;a href=&#34;https://github.com/gobyexample-cn/gobyexample&#34;&gt;gobyexample-cn/gobyexample&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/gobyexample-cn/gobyexample.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/gobyexample-cn/gobyexample.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/gobyexample-cn/gobyexample.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/gobyexample-cn/gobyexample.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gobyexample-cn.github.io/&#34;&gt;https://gobyexample-cn.github.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;build-web-application-with-golang&#34;&gt;&#xA;  build web application with golang&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#build-web-application-with-golang&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/astaxie/build-web-application-with-golang&#34;&gt;astaxie/build-web-application-with-golang&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/astaxie/build-web-application-with-golang.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/astaxie/build-web-application-with-golang.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/astaxie/build-web-application-with-golang.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/astaxie/build-web-application-with-golang.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;A golang ebook intro how to build a web with golang&lt;/p&gt;</description>
    </item>
    <item>
      <title>cobra</title>
      <link>https://kingye.me/study-go/docs/advanced/pkg/cobra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/advanced/pkg/cobra/</guid>
      <description>&lt;h1 id=&#34;cobra&#34;&gt;&#xA;  cobra&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cobra&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;spf13/cobra&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/spf13/cobra.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/spf13/cobra.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/spf13/cobra.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/spf13/cobra.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;A Commander for modern Go CLI interactions&lt;/p&gt;&#xA;&lt;h2 id=&#34;quick-start&#34;&gt;&#xA;  quick start&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;typically a Cobra-based application will follow the following organizational structure:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ▾ appName/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ▾ cmd/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        add.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        your.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        commands.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        here.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      main.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a Cobra app, typically the main.go file is very bare. It serves one purpose: initializing Cobra.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{pathToYourApp}/cmd&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;cmd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Execute&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ideally you place this in app/cmd/root.go:&lt;/p&gt;</description>
    </item>
    <item>
      <title>context</title>
      <link>https://kingye.me/study-go/docs/basic/std/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/context/</guid>
      <description>&lt;h1 id=&#34;context&#34;&gt;&#xA;  context&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#context&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;contextcontext&#34;&gt;&#xA;  context.Context&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#contextcontext&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在 Goroutine 构成的树形结构中&lt;strong&gt;对信号进行同步&lt;/strong&gt;以减少计算资源的浪费是 context.Context 的最大作用。&lt;/li&gt;&#xA;&lt;li&gt;我们可能会创建多个 Goroutine 来处理&lt;strong&gt;一次请求&lt;/strong&gt;，而 context.Context 的作用就是在不同 Goroutine 之间同步&#xA;&lt;ul&gt;&#xA;&lt;li&gt;请求特定数据&lt;/li&gt;&#xA;&lt;li&gt;取消信号&lt;/li&gt;&#xA;&lt;li&gt;处理请求的截止时间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多个 Goroutine 同时订阅 &lt;code&gt;ctx.Done()&lt;/code&gt; 管道中的消息，一旦接收到取消信号就立刻停止当前正在执行的工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/df2999ef43ea49ce1578137017949c0ee660608a/src/context/context.go#L62-L154&#34;&gt;context.Context&lt;/a&gt; 是 Go 语言在 1.7 版本中引入标准库的接口 1，该接口定义了四个需要实现的方法，其中包括：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Deadline — 返回 context.Context 被取消的时间，也就是完成工作的截止日期；&lt;/li&gt;&#xA;&lt;li&gt;Done — 返回一个 Channel，这个 Channel 会在当前工作完成或者上下文被取消之后关闭，多次调用 Done 方法会返回同一个 Channel；&lt;/li&gt;&#xA;&lt;li&gt;Err — 返回 context.Context 结束的原因，它只会在 Done 返回的 Channel 被关闭时才会返回非空的值；&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果 context.Context 被取消，会返回 &lt;code&gt;Canceled&lt;/code&gt; 错误；&lt;/li&gt;&#xA;&lt;li&gt;如果 context.Context 超时，会返回 &lt;code&gt;DeadlineExceeded&lt;/code&gt; 错误；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Value — 从 context.Context 中获取键对应的值，对于同一个上下文来说，多次调用 Value 并传入相同的 Key 会返回相同的结果，该方法可以用来传递请求特定的数据；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Deadline&lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;deadline&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;&#xA;  Background&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#background&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;func Background() Context&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;func TODO() Context&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;func WithCancel(parent Context) (ctx Context, cancel CancelFunc)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;func WithValue(parent Context, key, val interface{}) Context&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200728110757.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>defer</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/defer/</guid>
      <description>&lt;h1 id=&#34;defer&#34;&gt;&#xA;  defer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#defer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Go 处理 defer 和 return 的顺序为：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;计算 return 语句的返回值&lt;/li&gt;&#xA;&lt;li&gt;赋值给匿名 / 有名返回值&lt;/li&gt;&#xA;&lt;li&gt;执行 defer&lt;/li&gt;&#xA;&lt;li&gt;return 退出函数&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Defer 的用途跟其他语言的 &lt;code&gt;ensure&lt;/code&gt; 或 &lt;code&gt;finally&lt;/code&gt; 类似。&lt;/p&gt;&#xA;&lt;h2 id=&#34;当-defer-释放锁遇到尾递归会产生死锁&#34;&gt;&#xA;  当 defer 释放锁遇到&lt;strong&gt;尾递归&lt;/strong&gt;，会产生死锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bd%93-defer-%e9%87%8a%e6%94%be%e9%94%81%e9%81%87%e5%88%b0%e5%b0%be%e9%80%92%e5%bd%92%e4%bc%9a%e4%ba%a7%e7%94%9f%e6%ad%bb%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是&lt;strong&gt;尾递归&lt;/strong&gt;的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;计算 return 语句的值，赋值给匿名/有名返回值 -&amp;gt; defer -&amp;gt; return 退出函数&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tailRec&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()          &lt;span style=&#34;color:#75715e&#34;&gt;// 加锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()  &lt;span style=&#34;color:#75715e&#34;&gt;// defer 释放锁&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tailRec&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;// return 尾递归&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上代码执行会发生&lt;strong&gt;死锁&lt;/strong&gt;，原因是 return 语句后的命令先执行，赋值给&lt;em&gt;匿名返回值&lt;/em&gt;后，再调用 defer，&#xA;因此尾递归中 tailRec 的加锁会在 defer 释放锁之前进行，形成死锁。&lt;/p&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/14939&#34;&gt;defer 有性能消耗&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;返回值求值&#34;&gt;&#xA;  返回值求值&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%94%e5%9b%9e%e5%80%bc%e6%b1%82%e5%80%bc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 匿名返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_unnamed&lt;/span&gt;()(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer a:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer b :&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 具名返回值&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_named&lt;/span&gt;()(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer c:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer d :&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>error</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/error/</guid>
      <description>&lt;h1 id=&#34;error&#34;&gt;&#xA;  error&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#error&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;实现 &lt;code&gt;Error() string&lt;/code&gt; 方法的类型，都是 error 类型&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxxx&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>for 和 range</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/for/</guid>
      <description>&lt;h1 id=&#34;for-和-range&#34;&gt;&#xA;  for 和 range&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#for-%e5%92%8c-range&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;map-遍历&#34;&gt;&#xA;  map 遍历&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#map-%e9%81%8d%e5%8e%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Go 在运行时为&lt;strong&gt;哈希表的遍历&lt;/strong&gt;引入&lt;strong&gt;不确定性&lt;/strong&gt;，程序不要依赖于哈希表的稳定遍历&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 初始化</title>
      <link>https://kingye.me/study-go/docs/design/runtime/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/runtime/init/</guid>
      <description>&lt;h1 id=&#34;go-初始化&#34;&gt;&#xA;  Go 初始化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%88%9d%e5%a7%8b%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;golang 程序初始化先于 main 函数执行，由 runtime 进行初始化，初始化顺序如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化导入的包（包的初始化顺序并不是按导入顺序（“从上到下”）执行的，runtime 需要解析包依赖关系，没有依赖的包最先初始化，与变量初始化依赖关系类似，参见 golang 变量的初始化）；&lt;/li&gt;&#xA;&lt;li&gt;初始化包作用域的变量（该作用域的变量的初始化也并非按照 “从上到下、从左到右” 的顺序，runtime 解析变量依赖关系，没有依赖的变量最先初始化，参见 golang 变量的初始化）；&lt;/li&gt;&#xA;&lt;li&gt;执行包的 init 函数；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量初始化 -&amp;gt;init ()-&amp;gt;main ()&lt;/li&gt;&#xA;&lt;li&gt;由于 pack 包的初始化依赖 test_util，因此运行时先初始化 test_util 再初始化 pack 包；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;同一个包不同源文件的 init 函数执行顺序，golang spec 没做说明&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一般是源文件名称的字典序，但不能依赖这个假定&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在每一个初始化周期，运行时（runtime）会挑选一个没有任何依赖的变量初始化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;该过程一直持续到所有的变量均被初始化或者出现依赖嵌套的情形&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同一个 package 下多个文件的变量初始化依赖也遵循相同的规则&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;变量初始化&#34;&gt;&#xA;  变量初始化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%98%e9%87%8f%e5%88%9d%e5%a7%8b%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;不同作用域类型的变量初始化顺序不同&lt;/p&gt;&#xA;&lt;h3 id=&#34;函数作用域内的局部变量&#34;&gt;&#xA;  函数作用域内的局部变量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%87%bd%e6%95%b0%e4%bd%9c%e7%94%a8%e5%9f%9f%e5%86%85%e7%9a%84%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;初始化顺序：从左到右、从上到下&lt;/p&gt;&#xA;&lt;h3 id=&#34;package-级别的变量&#34;&gt;&#xA;  package 级别的变量&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#package-%e7%ba%a7%e5%88%ab%e7%9a%84%e5%8f%98%e9%87%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;初始化顺序与&lt;code&gt;初始化依赖&lt;/code&gt;有关&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Go 调度</title>
      <link>https://kingye.me/study-go/docs/design/runtime/scheduling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/runtime/scheduling/</guid>
      <description>&lt;h1 id=&#34;go-调度&#34;&gt;&#xA;  Go 调度&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e8%b0%83%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;go-调度器的发展&#34;&gt;&#xA;  Go 调度器的发展&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e5%8f%91%e5%b1%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;单线程调度器・&lt;a href=&#34;https://github.com/golang/go/blob/96824000ed89d13665f6f24ddc10b3bf812e7f47/src/runtime/proc.c&#34;&gt;0.x&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;只包含 40 多行代码；&lt;/li&gt;&#xA;&lt;li&gt;程序中只能存在一个活跃线程，由 G-M 模型组成；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;多线程调度器・&lt;a href=&#34;https://github.com/golang/go/blob/go1.0.1/src/pkg/runtime/proc.c&#34;&gt;1.0&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;允许运行多线程的程序；&lt;/li&gt;&#xA;&lt;li&gt;全局锁导致竞争严重；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;任务窃取调度器・&lt;a href=&#34;https://github.com/golang/go/blob/779c45a50700bda0f6ec98429720802e6c1624e8/src/pkg/runtime/proc.c&#34;&gt;1.1&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;引入了处理器 P，构成了目前的  G-M-P  模型；&lt;/li&gt;&#xA;&lt;li&gt;在处理器 P 的基础上实现了基于工作窃取的调度器；&lt;/li&gt;&#xA;&lt;li&gt;在某些情况下，Goroutine 不会让出线程，进而造成饥饿问题；&lt;/li&gt;&#xA;&lt;li&gt;时间过长的垃圾回收（Stop-the-world，STW）会导致程序长时间无法工作；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;抢占式调度器・&lt;a href=&#34;https://github.com/golang/go/blob/go1.2/src/pkg/runtime/proc.c&#34;&gt;1.2&lt;/a&gt; ~ 至今&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于协作的抢占式调度器 - 1.2 ~ 1.13&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过编译器在函数调用时插入抢占检查指令，在函数调用时检查当前 Goroutine 是否发起了抢占请求，实现基于协作的抢占式调度；&lt;/li&gt;&#xA;&lt;li&gt;Goroutine 可能会因为垃圾回收和循环长时间占用资源导致程序暂停；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;基于信号的抢占式调度器 - 1.14 ~ 至今&#xA;&lt;ul&gt;&#xA;&lt;li&gt;实现基于信号的真抢占式调度；&lt;/li&gt;&#xA;&lt;li&gt;垃圾回收在扫描栈时会触发抢占调度；&lt;/li&gt;&#xA;&lt;li&gt;抢占的时间点不够多，还不能覆盖全部的边缘情况；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;非均匀存储访问调度器・提案&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对运行时的各种资源进行分区；&lt;/li&gt;&#xA;&lt;li&gt;实现非常复杂，到今天还没有提上日程；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;除了多线程、任务窃取和抢占式调度器之外，Go 语言社区目前还有一个非均匀存储访问（Non-uniform memory access，NUMA）调度器的提案，Go 语言在未来也有实现该提案的可能。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;参考&#34;&gt;&#xA;  参考&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/&#34;&gt;Go 语言调度器与 Goroutine 实现原理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://morsmachine.dk/go-scheduler&#34;&gt;The Go scheduler (Go 1.1)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;scheduling-in-gohttpswwwardanlabscomblog201808scheduling-in-go-part1html&#34;&gt;&#xA;  &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&#34;&gt;Scheduling In Go&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#scheduling-in-gohttpswwwardanlabscomblog201808scheduling-in-go-part1html&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part1.html&#34;&gt;Scheduling In Go : Part I - OS Scheduler&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html&#34;&gt;Scheduling In Go : Part II - Go Scheduler&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/scheduling-in-go-part3.html&#34;&gt;Scheduling In Go : Part III - Concurrency&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;garbage-collection-in-gohttpswwwardanlabscomblog201812garbage-collection-in-go-part1-semanticshtml&#34;&gt;&#xA;  &lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&#34;&gt;Garbage Collection In Go&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#garbage-collection-in-gohttpswwwardanlabscomblog201812garbage-collection-in-go-part1-semanticshtml&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html&#34;&gt;Garbage Collection In Go : Part I - Semantics&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html&#34;&gt;Garbage Collection In Go : Part II - GC Traces&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html&#34;&gt;Garbage Collection In Go : Part III - GC Pacing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>init</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/func/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/func/init/</guid>
      <description>&lt;h1 id=&#34;init-函数&#34;&gt;&#xA;  init 函数&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#init-%e5%87%bd%e6%95%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;作用&#34;&gt;&#xA;  作用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%9c%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;初始化不能采用&lt;strong&gt;初始化表达式&lt;/strong&gt;初始化的变量&lt;/li&gt;&#xA;&lt;li&gt;程序运行前的注册&lt;/li&gt;&#xA;&lt;li&gt;实现 sync.Once 功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;特点&#34;&gt;&#xA;  特点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%b9%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;init 函数先于 main 函数自动执行&lt;/li&gt;&#xA;&lt;li&gt;init 不能被其他函数调用&lt;/li&gt;&#xA;&lt;li&gt;init 函数没有输入参数、返回值&lt;/li&gt;&#xA;&lt;li&gt;每个包可以有多个 init 函数&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;包的每个源文件也可以有多个 init 函数&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同一个包的 init 执行顺序，golang 没有明确定义，编程时要注意程序不要依赖这个执行顺序&lt;/li&gt;&#xA;&lt;li&gt;不同包的 init 函数按照包导入的依赖关系决定执行顺序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;问答&#34;&gt;&#xA;  问答&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%97%ae%e7%ad%94&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;只想调用该包的-init-函数不使用包导出的变量或者方法&#34;&gt;&#xA;  只想调用该包的 init 函数，不使用包导出的变量或者方法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%aa%e6%83%b3%e8%b0%83%e7%94%a8%e8%af%a5%e5%8c%85%e7%9a%84-init-%e5%87%bd%e6%95%b0%e4%b8%8d%e4%bd%bf%e7%94%a8%e5%8c%85%e5%af%bc%e5%87%ba%e7%9a%84%e5%8f%98%e9%87%8f%e6%88%96%e8%80%85%e6%96%b9%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行上述导入后，init 函数会启动一个异步协程采集该进程实例的资源占用情况，并以 http 服务接口方式提供给用户查询。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;参考&#34;&gt;&#xA;  参考&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>interface</title>
      <link>https://kingye.me/study-go/docs/design/keyword/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/keyword/interface/</guid>
      <description>&lt;h1 id=&#34;interface&#34;&gt;&#xA;  interface&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#interface&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://research.swtch.com/interfaces&#34;&gt;Go Data Structures: Interfaces&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;读完这篇 go 作者的 blog，interface 就没什么秘密可言了。每个 interface 至少包含两个字段，type 和 data，不论什么形式，然后是 itable 什么时候生成，如何调用。&lt;/p&gt;&#xA;&lt;p&gt;结合  &lt;a href=&#34;http://docs.studygolang.com/ref/spec#Comparison_operators&#34;&gt;Comparison operators&lt;/a&gt;，记住 interface 的 compare 规则。&lt;/p&gt;</description>
    </item>
    <item>
      <title>klog</title>
      <link>https://kingye.me/study-go/docs/advanced/pkg/klog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/advanced/pkg/klog/</guid>
      <description>&lt;h1 id=&#34;klog&#34;&gt;&#xA;  klog&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#klog&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;v-级别&#34;&gt;&#xA;  V() 级别&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#v-%e7%ba%a7%e5%88%ab&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;级别&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=0&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generally useful for this to &lt;em&gt;always&lt;/em&gt; be visible to a cluster operator.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A reasonable default log level if you don&amp;rsquo;t want verbosity.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=2&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Useful steady state information about the service and important log messages that may correlate to significant changes in the system. &lt;br&gt; This is the recommended default log level for most systems.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=3&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Extended information about changes.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=4&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Debug level verbosity.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=5&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Trace level verbosity.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=6&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Display requested resources.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=7&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Display HTTP request headers.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=8&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Display HTTP request contents.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;v=9&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Display HTTP request contents without truncation of contents.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;详细说明&#34;&gt;&#xA;  详细说明&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;klog.V(0) - Generally useful for this to ALWAYS be visible to an operator&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Programmer errors&lt;/li&gt;&#xA;&lt;li&gt;Logging extra info about a panic&lt;/li&gt;&#xA;&lt;li&gt;CLI argument handling&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;klog.V(1) - A reasonable default log level if you don&amp;rsquo;t want verbosity.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Information about config (listening on X, watching Y)&lt;/li&gt;&#xA;&lt;li&gt;Errors that repeat frequently that relate to conditions that can be corrected (pod detected as unhealthy)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;klog.V(2) - Useful steady state information about the service and important log messages that may correlate to significant changes in the system. This is the recommended default log level for most systems.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Logging HTTP requests and their exit code&lt;/li&gt;&#xA;&lt;li&gt;System state changing (killing pod)&lt;/li&gt;&#xA;&lt;li&gt;Controller state change events (starting pods)&lt;/li&gt;&#xA;&lt;li&gt;Scheduler log messages&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;klog.V(3) - Extended information about changes&#xA;&lt;ul&gt;&#xA;&lt;li&gt;More info about system state changes&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;klog.V(4) - Debug level verbosity&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Logging in particularly thorny parts of code where you may want to come back later and check it&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;klog.V(5) - Trace level verbosity&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Context to understand the steps leading up to errors and warnings&lt;/li&gt;&#xA;&lt;li&gt;More information for troubleshooting reported issues&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Receiver</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/func/receiver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/func/receiver/</guid>
      <description>&lt;h1 id=&#34;receiver&#34;&gt;&#xA;  Receiver&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#receiver&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;value method 可以被 value 和 pointer 对象调用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;结构体类型实现的&lt;strong&gt;接口&lt;/strong&gt;，该结构体的&lt;strong&gt;指针类型&lt;/strong&gt;也算实现了该接口&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;而 pointer method 只能被 pointer 对象调用&#xA;&lt;ul&gt;&#xA;&lt;li&gt;pointer method 会修改对象的值，而 value method 不会，所以如果在一个 value 对象上调用 pointer method，编译器会对原来的值做一份拷贝，并在拷贝后的值上执行函数，那么如果函数有修改原 receiver 的值，则修改的行为都发生在拷贝的值上，而不会影响原值，这个错误很隐蔽不容易被调试发现，因此 go 决定放弃这个错误发生的可能性，直接不支持 pointer method 被 value 对象调用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;使用规则&#34;&gt;&#xA;  使用规则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e8%a7%84%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须使用指针&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;struct&lt;/code&gt;，且包含 &lt;code&gt;sync.Mutex&lt;/code&gt; 类型字段&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;建议使用指针&#xA;&lt;ul&gt;&#xA;&lt;li&gt;比较&lt;strong&gt;大&lt;/strong&gt;的 struct/array&#xA;&lt;ul&gt;&#xA;&lt;li&gt;struct 或者 array 中的&lt;strong&gt;元素个数超过 3 个&lt;/strong&gt;，则认为比较大，反之，则认为比较小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;struct、array 或 slice，其中指针元素所指的内容可能在方法内被&lt;strong&gt;修改&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;建议使用 value 类型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;比较&lt;strong&gt;小&lt;/strong&gt;的 struct/array&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;必须使用 value 类型（&lt;em&gt;编程规范&lt;/em&gt;）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;map、函数或者 &lt;code&gt;chan&lt;/code&gt; 类型&lt;/li&gt;&#xA;&lt;li&gt;slice，并且方法不会进行 &lt;code&gt;reslice&lt;/code&gt; 或者重新分配 slice&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;value-vs-pointer&#34;&gt;&#xA;  value vs pointer&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#value-vs-pointer&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;</description>
    </item>
    <item>
      <title>优劣</title>
      <link>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/pros-and-cons/</guid>
      <description>&lt;h1 id=&#34;go-语言优劣&#34;&gt;&#xA;  Go 语言优劣&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e8%af%ad%e8%a8%80%e4%bc%98%e5%8a%a3&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;go-的优点&#34;&gt;&#xA;  Go 的优点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%9a%84%e4%bc%98%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;部署简单&#34;&gt;&#xA;  部署简单&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%83%a8%e7%bd%b2%e7%ae%80%e5%8d%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;直接编译成机器码&lt;/li&gt;&#xA;&lt;li&gt;不依赖其他库&lt;/li&gt;&#xA;&lt;li&gt;直接运行即可部署&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;静态类型语言&#34;&gt;&#xA;  静态类型语言&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%99%e6%80%81%e7%b1%bb%e5%9e%8b%e8%af%ad%e8%a8%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;编译时可检测出隐藏的大多数问题&lt;/p&gt;&#xA;&lt;h3 id=&#34;语言层面实现并发goroutine&#34;&gt;&#xA;  语言层面实现并发（goroutine）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%af%ad%e8%a8%80%e5%b1%82%e9%9d%a2%e5%ae%9e%e7%8e%b0%e5%b9%b6%e5%8f%91goroutine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;强大的标准库&#34;&gt;&#xA;  强大的标准库&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bc%ba%e5%a4%a7%e7%9a%84%e6%a0%87%e5%87%86%e5%ba%93&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;runtime 系统调度机制&lt;/li&gt;&#xA;&lt;li&gt;高效的 GC（垃圾回收）&lt;/li&gt;&#xA;&lt;li&gt;丰富的标准库&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;简单易学&#34;&gt;&#xA;  简单易学&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%ae%80%e5%8d%95%e6%98%93%e5%ad%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;25 个关键字&lt;/li&gt;&#xA;&lt;li&gt;内嵌 C 语法支持（CGO）&lt;/li&gt;&#xA;&lt;li&gt;面向对象&lt;/li&gt;&#xA;&lt;li&gt;跨平台&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;背靠大厂google&#34;&gt;&#xA;  背靠大厂（Google）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e9%9d%a0%e5%a4%a7%e5%8e%82google&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;性能好&#34;&gt;&#xA;  性能好&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%80%a7%e8%83%bd%e5%a5%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200524204903.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;go-的缺点&#34;&gt;&#xA;  Go 的缺点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%9a%84%e7%bc%ba%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;无泛化类型&#34;&gt;&#xA;  无泛化类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a0%e6%b3%9b%e5%8c%96%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;传言 Go 2.0 会加上&lt;/p&gt;&#xA;&lt;h3 id=&#34;无-exception都用-error&#34;&gt;&#xA;  无 Exception，都用 Error&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%a0-exception%e9%83%bd%e7%94%a8-error&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;有争议&lt;/p&gt;&#xA;&lt;h3 id=&#34;包管理大部分在-github&#34;&gt;&#xA;  包管理大部分在 Github&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%85%e7%ae%a1%e7%90%86%e5%a4%a7%e9%83%a8%e5%88%86%e5%9c%a8-github&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/379439622/answer/1111390872&#34;&gt;2020 年以后是 Go 的天下吗？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>安装</title>
      <link>https://kingye.me/study-go/docs/basic/others/command/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/command/install/</guid>
      <description>&lt;h1 id=&#34;安装&#34;&gt;&#xA;  安装&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ae%89%e8%a3%85&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>格式化输出</title>
      <link>https://kingye.me/study-go/docs/basic/std/format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/format/</guid>
      <description>&lt;h1 id=&#34;格式化输出&#34;&gt;&#xA;  格式化输出&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%bc%e5%bc%8f%e5%8c%96%e8%be%93%e5%87%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Go 提供了一些用于格式化常规值的打印“动词”。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 例如，这样打印 `point` 结构体的实例。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;point&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如果值是一个结构体，`%+v` 的格式化输出内容将包括结构体的字段名。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `%#v` 根据 Go 语法输出值，即会产生该值的源码片段。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%#v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 需要打印值的类型，使用 `%T`。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%T\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 格式化布尔值很简单。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%t\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 格式化整型数有多种方式，使用 `%d` 进行标准的十进制格式化。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +123 (输出符号)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+d\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这个输出二进制表示形式。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%b\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 输出给定整数的对应字符。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `%x` 提供了十六进制编码。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;456&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 同样的，也为浮点型提供了多种格式化选项。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 `%f` 进行最基本的十进制格式化。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%f\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78.9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `%e` 和 `%E` 将浮点型格式化为（稍微有一点不同的）科学记数法表示形式。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%e\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123400000.0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%E\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123400000.0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 `%s` 进行基本的字符串输出。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;string\&amp;#34;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 像 Go 源代码中那样带有双引号的输出，使用 `%q`。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%q\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;string\&amp;#34;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 和上面的整型数一样，`%x` 输出使用 base-16 编码的字符串，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 每个字节使用 2 个字符表示。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hex this&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 要输出一个指针的值，使用 `%p`。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%p\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 格式化数字时，您经常会希望控制输出结果的宽度和精度。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 要指定整数的宽度，请在动词 &amp;#34;%&amp;#34; 之后使用数字。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 默认情况下，结果会右对齐并用空格填充。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|%6d|%6d|\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;345&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 你也可以指定浮点型的输出宽度，同时也可以通过 `宽度.精度` 的语法来指定输出的精度。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|%6.2f|%6.2f|\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.45&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 要左对齐，使用 `-` 标志。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|%-6.2f|%-6.2f|\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.45&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这是基本的宽度右对齐方法。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|%6s|%6s|\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 要左对齐，和数字一样，使用 `-` 标志。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|%-6s|%-6s|\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 到目前为止，我们已经看过 `Printf` 了，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 它通过 `os.Stdout` 输出格式化的字符串。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// `Sprintf` 则格式化并返回一个字符串而没有任何输出。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 你可以使用 `Fprintf` 来格式化并输出到 `io.Writers` 而不是 `os.Stdout`。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;an %s\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>4.2 面试题</title>
      <link>https://kingye.me/study-go/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/appendix/interview/</guid>
      <description>&lt;h1 id=&#34;go-语言面试题&#34;&gt;&#xA;  Go 语言面试题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e8%af%ad%e8%a8%80%e9%9d%a2%e8%af%95%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;基础题&#34;&gt;&#xA;  基础题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9f%ba%e7%a1%80%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Using reference to loop iterator variable&lt;/li&gt;&#xA;&lt;li&gt;Using goroutines on loop iterator variables&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考：&lt;a href=&#34;https://github.com/golang/go/wiki/CommonMistakes&#34;&gt;go 易错点&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;进阶题&#34;&gt;&#xA;  进阶题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%9b%e9%98%b6%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;综合&#34;&gt;&#xA;  综合&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bb%bc%e5%90%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/shomali11/go-interview&#34;&gt;shomali11/go-interview&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/shomali11/go-interview.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/shomali11/go-interview.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/shomali11/go-interview.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/shomali11/go-interview.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/lifei6671/interview-go&#34;&gt;lifei6671/interview-go&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/lifei6671/interview-go.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/lifei6671/interview-go.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/lifei6671/interview-go.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/lifei6671/interview-go.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/60952598&#34;&gt;你遇到过哪些高质量的 Go 语言面试题？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Go build</title>
      <link>https://kingye.me/study-go/docs/basic/others/gobuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/gobuild/</guid>
      <description>&lt;h1 id=&#34;go-build&#34;&gt;&#xA;  Go build&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-build&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;-tag&#34;&gt;&#xA;  &lt;code&gt;-tag&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#-tag&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;// +build dev&lt;/code&gt; 前后须有一个空行隔开&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;release_config.go&lt;/code&gt; 文件&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go build -tags dev -o dev_version&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +build dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEV&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;dev_config.go&lt;/code&gt; 文件&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go build -tags dev -o dev_version&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// +build release&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RELEASE&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;go-热编译工具&#34;&gt;&#xA;  Go 热编译工具&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%83%ad%e7%bc%96%e8%af%91%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/caixw/gobuild&#34;&gt;caixw/gobuild&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/caixw/gobuild.svg&#34; alt=&#34;Github stars&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#caixwgobuildhttpsgithubcomcaixwgobuild-github-starshttpsimgshieldsiogithubstarscaixwgobuildsvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;gobuild 是一个简单的 Go 代码热编译工具。 会实时监控指定目录下的文件变化 (重命名，删除，创建，添加)，并编译和运行程序。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gobuild &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;dependents&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;options:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -h    显示当前帮助信息；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -v    显示 gobuild 和 Go 程序的版本信息；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -r    是否搜索子目录，默认为 true；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -i    是否显示被标记为 IGNORE 的日志内容，默认为 false，即不显示；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -o    执行编译后的可执行文件名；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -x    传递给编译程序的参数；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -ext  需要监视的扩展名，默认值为&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;，区分大小写，会去掉每个扩展名的首尾空格。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       若需要监视所有类型文件，请使用 *，传递空值代表不监视任何文件；&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; -main 指定需要编译的文件，默认为&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependents:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 指定其它依赖的目录，只能出现在命令的尾部。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/penggy/gobuild&#34;&gt;penggy/gobuild&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/penggy/gobuild.svg&#34; alt=&#34;Github stars&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#penggygobuildhttpsgithubcompenggygobuild-github-starshttpsimgshieldsiogithubstarspenggygobuildsvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;EasyDarwin 依赖&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modules</title>
      <link>https://kingye.me/study-go/docs/basic/others/gomod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/gomod/</guid>
      <description>&lt;h1 id=&#34;go-moduleshttpsgolangorgrefmod&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/ref/mod&#34;&gt;Go Modules&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-moduleshttpsgolangorgrefmod&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;Using Go Modules&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;import&#34;&gt;&#xA;  import&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#import&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;目录&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 调用是使用 go 文件里的 package xxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xxx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Function&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;klog-import&#34;&gt;&#xA;  klog import&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#klog-import&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;klog 库 &lt;code&gt;https://github.com/kubernetes/klog&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;它的 &lt;code&gt;go.mod&lt;/code&gt; 第一行是 &lt;code&gt;module k8s.io/klog/v2&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;根目录有个文件 &lt;code&gt;klog.go&lt;/code&gt;，第一行 &lt;code&gt;package klog&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以我们在使用 klog 库时，&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;import k8s.io/klog/v2&lt;/code&gt; 就是 import 了这个库的根目录，根目录的 &lt;code&gt;*.go&lt;/code&gt; 文件，&lt;code&gt;package&lt;/code&gt; 都是 &lt;code&gt;klog&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以我们使用的时候，直接 &lt;code&gt;klog.Info()&lt;/code&gt; 就行。&lt;/p&gt;&#xA;&lt;p&gt;klog 库自身升级，只需要在它的 &lt;code&gt;go.mod&lt;/code&gt; 里第一行改成 &lt;code&gt;module k8s.io/klog/v3&lt;/code&gt; 就行。&lt;/p&gt;&#xA;&lt;p&gt;而我们使用新版本，也只需要改成 &lt;code&gt;import k8s.io/klog/v3&lt;/code&gt;，里面 &lt;code&gt;klog.Info()&lt;/code&gt; 都不用改（如果接口兼容的话）。&lt;/p&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43579838/relationship-between-a-package-statement-and-the-directory-of-a-go-file&#34;&gt;Relationship between a package statement and the directory of a .go file&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>gopls</title>
      <link>https://kingye.me/study-go/docs/basic/others/gopls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/gopls/</guid>
      <description>&lt;h1 id=&#34;goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/README.md&#34;&gt;gopls&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goplshttpsgithubcomgolangtoolsblobmastergoplsreadmemd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;gopls (pronounced: &amp;ldquo;go please&amp;rdquo;) is the official &lt;a href=&#34;https://langserver.org/&#34;&gt;language server&lt;/a&gt; for the Go language.&lt;/p&gt;&#xA;&lt;p&gt;Go 扩展默认是使用大量的 Go 工具来提供各种功能的，&#xA;每个工具提供某个方面的能力，比如代码提示是依靠 gocode 的.&lt;/p&gt;&#xA;&lt;p&gt;不过微软在开发 VS Code 过程中，定义一种协议，语言服务器协议，&#xA;Language Server Protocol.&lt;/p&gt;&#xA;&lt;p&gt;这可是个好东西，如果你需要开发编辑器或 IDE,&#xA;就不需要再为每种语言实现诸如自动完成，代码提示等功能了，&#xA;直接利用 语言服务器协议 就行了.&lt;/p&gt;&#xA;&lt;p&gt;gopls 就是官方的语言服务器，当前处于 alpha 状态.&lt;/p&gt;</description>
    </item>
    <item>
      <title>切片</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/slice/</guid>
      <description>&lt;h1 id=&#34;go-切片&#34;&gt;&#xA;  Go 切片&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%88%87%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>包管理</title>
      <link>https://kingye.me/study-go/docs/basic/others/pm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/pm/</guid>
      <description>&lt;h1 id=&#34;包管理&#34;&gt;&#xA;  包管理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8c%85%e7%ae%a1%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;go-包管理概述&#34;&gt;&#xA;  Go 包管理概述&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%8c%85%e7%ae%a1%e7%90%86%e6%a6%82%e8%bf%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;go-14-及之前&#34;&gt;&#xA;  Go 1.4 及之前&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-14-%e5%8f%8a%e4%b9%8b%e5%89%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;必须设置 &lt;code&gt;GOPATH&lt;/code&gt; 环境变量，且源代码必须存放在 &lt;code&gt;GOPATH&lt;/code&gt; 下&lt;/li&gt;&#xA;&lt;li&gt;拉取外部依赖包时，总是拉取最新的版本，无法指定需要的版本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;设置 &lt;code&gt;GOPATH&lt;/code&gt; 环境变量有两个原因：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;它规定了 &lt;code&gt;go get&lt;/code&gt; 命令下载的依赖包的存储位置（&lt;code&gt;$GOPATH/src&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;通过设置 &lt;code&gt;GOPATH&lt;/code&gt;，可以方便 Golang 计算出 import 的路径&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;go-15-至-go-110&#34;&gt;&#xA;  Go 1.5 至 Go 1.10&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-15-%e8%87%b3-go-110&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;每个项目的根目录下可以有一个 vendor 目录，里面存放了该项目的依赖的包&lt;/p&gt;&#xA;&lt;h3 id=&#34;go-111-至-go-112&#34;&gt;&#xA;  Go 1.11 至 Go 1.12&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-111-%e8%87%b3-go-112&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;默认使用的还是 GOPATH 的管理方式&lt;/li&gt;&#xA;&lt;li&gt;运行 &lt;code&gt;export GO111MODULE=on&lt;/code&gt;，使用 &lt;code&gt;Go Modules&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;GO111MODULE&lt;/code&gt; 为 &lt;code&gt;off&lt;/code&gt; 时：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;优先使用 &lt;code&gt;vendor&lt;/code&gt; 目录下面的包，&lt;/li&gt;&#xA;&lt;li&gt;如果 &lt;code&gt;vendor&lt;/code&gt; 下面没有搜索到，再搜索 &lt;code&gt;$GOPATH/src&lt;/code&gt; 下面的包，&lt;/li&gt;&#xA;&lt;li&gt;如果 &lt;code&gt;$GOPATH&lt;/code&gt; 下面没有搜索到，那么搜索 &lt;code&gt;$GOROOT/src&lt;/code&gt; 下面的包&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;go-113-及之后&#34;&gt;&#xA;  Go 1.13 及之后&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-113-%e5%8f%8a%e4%b9%8b%e5%90%8e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Golang 的包管理默认使用 &lt;code&gt;Go Modules&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>字符串</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/string/</guid>
      <description>&lt;h1 id=&#34;go-字符串&#34;&gt;&#xA;  Go 字符串&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;字符串是一个只读的切片类型&#34;&gt;&#xA;  字符串是一个只读的切片类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%97%e7%ac%a6%e4%b8%b2%e6%98%af%e4%b8%80%e4%b8%aa%e5%8f%aa%e8%af%bb%e7%9a%84%e5%88%87%e7%89%87%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 包含指向字节数组的指针和数组的大小&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StringHeader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 比 slice 少了 Cap 字段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 比字符串多了表示容量的 Cap 字段&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SliceHeader&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Len&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Cap&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>数组</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/array/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/array/</guid>
      <description>&lt;h1 id=&#34;go-数组&#34;&gt;&#xA;  Go 数组&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e6%95%b0%e7%bb%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;什么时候使用数组而不是切片&#34;&gt;&#xA;  什么时候使用数组，而不是切片？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e4%bd%bf%e7%94%a8%e6%95%b0%e7%bb%84%e8%80%8c%e4%b8%8d%e6%98%af%e5%88%87%e7%89%87&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;arrays are &lt;strong&gt;hashable&lt;/strong&gt;. That means they can be used as a key to a map&lt;/li&gt;&#xA;&lt;li&gt;can be &lt;strong&gt;serialized&lt;/strong&gt; by encoding/binary&lt;/li&gt;&#xA;&lt;li&gt;pass by value. planning the detailed layout of memory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30694652/why-use-arrays-instead-of-slices&#34;&gt;Why use arrays instead of slices?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>类型系统</title>
      <link>https://kingye.me/study-go/docs/design/type/type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/type/type/</guid>
      <description>&lt;h1 id=&#34;go-类型系统&#34;&gt;&#xA;  Go 类型系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%b1%bb%e5%9e%8b%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;underlying-type&#34;&gt;&#xA;  &lt;code&gt;Underlying Type&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#underlying-type&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每一个类型都有自己的 &lt;code&gt;Underlying Type&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果 &lt;code&gt;T&lt;/code&gt; 是 &lt;code&gt;Pre-declared&lt;/code&gt; type 或者 &lt;code&gt;Type Literal&lt;/code&gt;，它们对应的 &lt;code&gt;Underlying Type&lt;/code&gt; 就是自身 &lt;code&gt;T&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;比如 &lt;code&gt;type T int&lt;/code&gt; 的 &lt;code&gt;Underlying Type&lt;/code&gt; 是 &lt;code&gt;int&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;int&lt;/code&gt; 是 &lt;code&gt;Pre-declared&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;type T map[int]string&lt;/code&gt; 的 &lt;code&gt;Underlying Type&lt;/code&gt; 是 &lt;code&gt;map[int]string&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;map[int]string&lt;/code&gt; 是 &lt;code&gt;Type Literal&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;否则 &lt;code&gt;T&lt;/code&gt; 的 &lt;code&gt;Underlying Type&lt;/code&gt; 是 &lt;code&gt;T&lt;/code&gt; 定义时引用的类型的 &lt;code&gt;Underlying Type&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;underlying-type-相同&#34;&gt;&#xA;  Underlying Type 相同&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#underlying-type-%e7%9b%b8%e5%90%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;如果两个 type 的 Underlying Type 相同，则它们可以有以下特性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果两个 type 都是 named type ，彼此之间不能相互赋值&lt;/p&gt;</description>
    </item>
    <item>
      <title>编译</title>
      <link>https://kingye.me/study-go/docs/basic/others/compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/compile/</guid>
      <description>&lt;h1 id=&#34;编译&#34;&gt;&#xA;  编译&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;makefile&#34;&gt;&#xA;  Makefile&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#makefile&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;go-makefile-样例&#34;&gt;&#xA;  Go Makefile 样例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-makefile-%e6%a0%b7%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.env&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROJECTNAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell basename &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PWD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Go related variables.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;GOBASE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell pwd&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBASE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/vendor:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBASE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBASE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GOFILES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;wildcard *.go&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Redirect error output to a file, so we can show it in development mode.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;STDERR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/.&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-stderr.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# PID file will keep the process id of the server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;PID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp/.&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;.pid&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make is verbose in Linux. Make it silent.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;MAKEFLAGS &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; --silent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## install: Install missing dependencies. Runs `go get` internally. e.g; make install get=github.com/foo/bar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; go-get&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## start: Start in development mode. Auto-starts when code changes.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;trap &amp;#39;make stop&amp;#39; EXIT; &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MAKE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; compile start-server watch run=&amp;#39;make compile start-server&amp;#39;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## stop: Stop development mode.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; stop-server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start-server&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; stop-server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is available at &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;ADDR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp; echo $$! &amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@cat &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/^/s/^/  \&amp;gt;  PID: /&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop-server&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-touch &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-kill &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;cat &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; 2&amp;gt; /dev/null &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-rm &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PID&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## watch: Run given command when code changes. e.g; make watch run=&amp;#34;echo &amp;#39;hey&amp;#39;&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;watch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; yolo -i . -e vendor -e bin -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;run&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;restart-server&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; stop-server start-server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## compile: Compile the binary.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;compile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-touch &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;STDERR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-rm &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;STDERR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;MAKE&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -s go-compile 2&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;STDERR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@cat &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;STDERR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; | sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1s/.*/\nError:\n/&amp;#39;&lt;/span&gt;  | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/make\[.*/ /&amp;#39;&lt;/span&gt; | sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/^/s/^/     /&amp;#34;&lt;/span&gt; 1&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## exec: Run given command, wrapped with custom GOPATH. e.g; make exec run=&amp;#34;go test ./...&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;exec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;run&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## clean: Clean build files. Runs `go clean` internally.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MAKEFILE&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; go-clean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-compile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; go-clean go-get go-build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;gt;  Building binary...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go build -o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOFILES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-generate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;gt;  Generating dependency files...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go generate &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;generate&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;gt;  Checking if there is any missing dependencies...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go get &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;get&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-install&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go install &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOFILES&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;go-clean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;gt;  Cleaning build cache&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; GOBIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBIN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; go clean&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.PHONY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; help&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; help&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;help&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; Choose a command run in &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PROJECTNAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^##//p&amp;#39;&lt;/span&gt; $&amp;lt; | column -t -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; |  sed -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^/ /&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;@echo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;</description>
    </item>
    <item>
      <title>4.3 关注项目</title>
      <link>https://kingye.me/study-go/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/appendix/attention/</guid>
      <description>&lt;h1 id=&#34;关注项目&#34;&gt;&#xA;  关注项目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%85%b3%e6%b3%a8%e9%a1%b9%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;主流&#34;&gt;&#xA;  主流&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%bb%e6%b5%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;golanggohttpsgithubcomgolanggo-github-starshttpsimgshieldsiogithubstarsgolanggosvg-github-forkshttpsimgshieldsiogithubforksgolanggosvg-languagehttpsimgshieldsiogithublanguagestopgolanggosvg-last-taghttpsimgshieldsiogithubvtaggolanggosvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgolanggosvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/golang/go&#34;&gt;golang/go&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/golang/go.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/forks/golang/go.svg&#34; alt=&#34;Github forks&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/golang/go.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/golang/go.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/golang/go.svg&#34; alt=&#34;Last commit&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#golanggohttpsgithubcomgolanggo-github-starshttpsimgshieldsiogithubstarsgolanggosvg-github-forkshttpsimgshieldsiogithubforksgolanggosvg-languagehttpsimgshieldsiogithublanguagestopgolanggosvg-last-taghttpsimgshieldsiogithubvtaggolanggosvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgolanggosvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;kuberneteskuberneteshttpsgithubcomkuberneteskubernetes-github-starshttpsimgshieldsiogithubstarskuberneteskubernetessvg-github-forkshttpsimgshieldsiogithubforkskuberneteskubernetessvg-languagehttpsimgshieldsiogithublanguagestopkuberneteskubernetessvg-last-taghttpsimgshieldsiogithubvtagkuberneteskubernetessvgsortsemver-last-commithttpsimgshieldsiogithublast-commitkuberneteskubernetessvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;kubernetes/kubernetes&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/kubernetes/kubernetes.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/forks/kubernetes/kubernetes.svg&#34; alt=&#34;Github forks&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/kubernetes/kubernetes.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/kubernetes/kubernetes.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/kubernetes/kubernetes.svg&#34; alt=&#34;Last commit&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kuberneteskuberneteshttpsgithubcomkuberneteskubernetes-github-starshttpsimgshieldsiogithubstarskuberneteskubernetessvg-github-forkshttpsimgshieldsiogithubforkskuberneteskubernetessvg-languagehttpsimgshieldsiogithublanguagestopkuberneteskubernetessvg-last-taghttpsimgshieldsiogithubvtagkuberneteskubernetessvgsortsemver-last-commithttpsimgshieldsiogithublast-commitkuberneteskubernetessvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;mobymobyhttpsgithubcommobymoby-github-starshttpsimgshieldsiogithubstarsmobymobysvg-github-forkshttpsimgshieldsiogithubforksmobymobysvg-languagehttpsimgshieldsiogithublanguagestopmobymobysvg-last-taghttpsimgshieldsiogithubvtagmobymobysvgsortsemver-last-commithttpsimgshieldsiogithublast-commitmobymobysvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/moby/moby&#34;&gt;moby/moby&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/moby/moby.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/forks/moby/moby.svg&#34; alt=&#34;Github forks&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/moby/moby.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/moby/moby.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/moby/moby.svg&#34; alt=&#34;Last commit&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mobymobyhttpsgithubcommobymoby-github-starshttpsimgshieldsiogithubstarsmobymobysvg-github-forkshttpsimgshieldsiogithubforksmobymobysvg-languagehttpsimgshieldsiogithublanguagestopmobymobysvg-last-taghttpsimgshieldsiogithubvtagmobymobysvgsortsemver-last-commithttpsimgshieldsiogithublast-commitmobymobysvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;etcd-ioetcdhttpsgithubcometcd-ioetcd-github-starshttpsimgshieldsiogithubstarsetcd-ioetcdsvg-github-forkshttpsimgshieldsiogithubforksetcd-ioetcdsvg-languagehttpsimgshieldsiogithublanguagestopetcd-ioetcdsvg-last-taghttpsimgshieldsiogithubvtagetcd-ioetcdsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitetcd-ioetcdsvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;etcd-io/etcd&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/etcd-io/etcd.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/forks/etcd-io/etcd.svg&#34; alt=&#34;Github forks&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/etcd-io/etcd.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/etcd-io/etcd.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/etcd-io/etcd.svg&#34; alt=&#34;Last commit&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#etcd-ioetcdhttpsgithubcometcd-ioetcd-github-starshttpsimgshieldsiogithubstarsetcd-ioetcdsvg-github-forkshttpsimgshieldsiogithubforksetcd-ioetcdsvg-languagehttpsimgshieldsiogithublanguagestopetcd-ioetcdsvg-last-taghttpsimgshieldsiogithubvtagetcd-ioetcdsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitetcd-ioetcdsvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Distributed reliable key-value store for the most critical data of a distributed system&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;web-框架&#34;&gt;&#xA;  Web 框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#web-%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;gin-gonicginhttpsgithubcomgin-gonicgin-github-starshttpsimgshieldsiogithubstarsgin-gonicginsvg-languagehttpsimgshieldsiogithublanguagestopgin-gonicginsvg-last-taghttpsimgshieldsiogithubvtaggin-gonicginsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgin-gonicginsvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;gin-gonic/gin&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/gin-gonic/gin.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/gin-gonic/gin.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/gin-gonic/gin.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/gin-gonic/gin.svg&#34; alt=&#34;Last commit&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gin-gonicginhttpsgithubcomgin-gonicgin-github-starshttpsimgshieldsiogithubstarsgin-gonicginsvg-languagehttpsimgshieldsiogithublanguagestopgin-gonicginsvg-last-taghttpsimgshieldsiogithubvtaggin-gonicginsvgsortsemver-last-commithttpsimgshieldsiogithublast-commitgin-gonicginsvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Gin is a HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance &amp;ndash; up to 40 times faster. If you need smashing performance, get yourself some Gin.&#xA;&lt;a href=&#34;https://gin-gonic.com/&#34;&gt;https://gin-gonic.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interface</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/interface/</guid>
      <description>&lt;h1 id=&#34;go-interface&#34;&gt;&#xA;  Go Interface&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-interface&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>历史</title>
      <link>https://kingye.me/study-go/docs/basic/others/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/history/</guid>
      <description>&lt;h1 id=&#34;go-历史&#34;&gt;&#xA;  Go 历史&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%8e%86%e5%8f%b2&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>4.4 一些八卦</title>
      <link>https://kingye.me/study-go/docs/appendix/gossip/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/appendix/gossip/</guid>
      <description>&lt;h1 id=&#34;一些八卦&#34;&gt;&#xA;  一些八卦&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%80%e4%ba%9b%e5%85%ab%e5%8d%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;golangorgpkg-vs-pkggodev&#34;&gt;&#xA;  &lt;code&gt;golang.org/pkg/&lt;/code&gt; vs &lt;code&gt;pkg.go.dev&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#golangorgpkg-vs-pkggodev&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;golang.org/pkg/&lt;/code&gt; 等于 &lt;code&gt;pkg.go.dev/std&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;pkg.go.dev/std&lt;/code&gt; 有各种版本&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;godocorg&#34;&gt;&#xA;  &lt;code&gt;godoc.org&lt;/code&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#godocorg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;godoc.org&lt;/code&gt; 会跳转到 &lt;code&gt;pkg.go.dev/?utm_source=godoc&lt;/code&gt; 再跳转到 &lt;code&gt;pkg.go.dev&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chiannel</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/channel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/channel/</guid>
      <description>&lt;h1 id=&#34;chiannel&#34;&gt;&#xA;  Chiannel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#chiannel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;channel-类型&#34;&gt;&#xA;  channel 类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#channel-%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;          &lt;span style=&#34;color:#75715e&#34;&gt;// can be used to send and receive values of type T&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;float64&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// can only be used to send float64s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// can only be used to receive ints&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;-&lt;/code&gt; operator associates with the leftmost chan possible:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// same as chan&amp;lt;- (chan int)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// same as chan&amp;lt;- (&amp;lt;-chan int)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// same as &amp;lt;-chan (&amp;lt;-chan int)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;常见用法&#34;&gt;&#xA;  常见用法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%b8%e8%a7%81%e7%94%a8%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 `make(chan val-type)` 创建一个新的通道。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 通道类型就是他们需要传递值的类型。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;messages&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 `channel &amp;lt;-` 语法 _发送_ 一个新的值到通道中。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这里我们在一个新的协程中发送 `&amp;#34;ping&amp;#34;` 到上面创建的 `messages` 通道中。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;messages&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ping&amp;#34;&lt;/span&gt; }()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 使用 `&amp;lt;-channel` 语法从通道中 _接收_ 一个值。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 这里我们会收到在上面发送的 `&amp;#34;ping&amp;#34;` 消息并将其打印出来。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;messages&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 如果 ok 的值是 false，表明 接收到的是 特别制造的 0 值 —— 因为发送通道关闭了并且为空（closed and empty）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;messages&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;done-channel&#34;&gt;&#xA;  done channel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#done-channel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;用于保证流水线上每个阶段 goroutine 的退出&lt;/p&gt;</description>
    </item>
    <item>
      <title>make</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/make/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/make/</guid>
      <description>&lt;h1 id=&#34;make&#34;&gt;&#xA;  make&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#make&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;运算符&lt;code&gt;:=&lt;/code&gt; 是 &lt;code&gt;make()&lt;/code&gt; 的语法糖&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map</title>
      <link>https://kingye.me/study-go/docs/basic/ref/type/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/type/map/</guid>
      <description>&lt;h1 id=&#34;map&#34;&gt;&#xA;  Map&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Golang 中的 map，实际上就是一个 &lt;code&gt;hashtable&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 golang 中，当 map 作为形参时，虽然是值传递，但是由于 make () 返回的是一个指针类型&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// makemap implements Go map creation for make(map[k]v, hint).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If the compiler has determined that the map or the first bucket&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// can be created on the stack, h and/or bucket may be non-nil.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If h != nil, the map can be created directly in h.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// If h.buckets != nil, bucket pointed to can be used as the first bucket.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;makemap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maptype&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hmap&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hmap&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &amp;gt; int(&lt;span style=&#34;color:#a6e22e&#34;&gt;maxSliceCap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;bucket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;删除-map-元素&#34;&gt;&#xA;  删除 map 元素&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a0%e9%99%a4-map-%e5%85%83%e7%b4%a0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;delete(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;清空-map&#34;&gt;&#xA;  清空 map&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b8%85%e7%a9%ba-map&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Go 语言中并没有为 map 提供任何清空所有元素的函数、方法，&#xA;清空 map 的唯一办法就是&lt;strong&gt;重新 make 一个新的 map&lt;/strong&gt;，&#xA;不用担心垃圾回收的效率，Go 语言中的并行垃圾回收效率比写一个清空函数要高效的多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>select</title>
      <link>https://kingye.me/study-go/docs/basic/ref/keyword/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/ref/keyword/select/</guid>
      <description>&lt;h1 id=&#34;select&#34;&gt;&#xA;  select&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#select&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Go 的 &lt;strong&gt;选择器（select）&lt;/strong&gt; 让你可以同时等待多个通道操作。&lt;/p&gt;&#xA;&lt;p&gt;将协程、通道和选择器结合，是 Go 的一个强大特性。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 在这个例子中，我们将从两个通道中选择。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 各个通道将在一定时间后接收一个值，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 通过这种方式来模拟并行的协程执行（例如，RPC 操作）时造成的阻塞（耗时）。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 我们使用 `select` 关键字来同时等待这两个值，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 并打印各自接收到的值。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;received&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;msg1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msg2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;received&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;msg2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;随机选则&#34;&gt;&#xA;  随机选则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9a%8f%e6%9c%ba%e9%80%89%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;除 default 外，如果有多个 case 语句评估通过，那么通过&lt;strong&gt;伪随机&lt;/strong&gt;的方式随机选一个&lt;/p&gt;&#xA;&lt;h2 id=&#34;非阻塞&#34;&gt;&#xA;  非阻塞&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%9d%9e%e9%98%bb%e5%a1%9e&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;default-为空&#34;&gt;&#xA;  default 为空&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#default-%e4%b8%ba%e7%a9%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendTime&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uintptr&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Non-blocking send of time on c.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Used in NewTimer, it cannot block anyway (buffer).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Used in NewTicker, dropping sends on the floor is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// the desired behavior when the reader gets behind,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// because the sends are periodic.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>GC</title>
      <link>https://kingye.me/study-go/docs/design/runtime/gc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/runtime/gc/</guid>
      <description>&lt;h1 id=&#34;go-gc&#34;&gt;&#xA;  Go GC&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-gc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;Garbage Collection&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 插件系统</title>
      <link>https://kingye.me/study-go/docs/basic/others/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/plugin/</guid>
      <description>&lt;h1 id=&#34;go-插件系统&#34;&gt;&#xA;  Go 插件系统&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e6%8f%92%e4%bb%b6%e7%b3%bb%e7%bb%9f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Go 1.8 版本开始提供了一个创建共享库的新工具，称为 &lt;code&gt;Plugins&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Go 插件是使用 &lt;code&gt;-buildmode=plugin&lt;/code&gt; 标记编译的一个包，用于生成一个共享对象（&lt;code&gt;.so&lt;/code&gt;）库文件。&#xA;Go 包中的导出的函数和变量被公开为 &lt;code&gt;ELF&lt;/code&gt; 符号，可以使用 plugin 包在运行时查找并绑定 &lt;code&gt;ELF&lt;/code&gt; 符号。&lt;/p&gt;&#xA;&lt;p&gt;Go 编译器能够使用 build flag &lt;code&gt;-buildmode=c-shared&lt;/code&gt; 创建 C 风格的动态共享库。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;编写-plugin&#34;&gt;&#xA;  编写 plugin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e5%86%99-plugin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;包名称必须是 &lt;code&gt;main&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;没有 main 函数&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;必须有可以导出 (访问) 的变量或者方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;使用-plugin&#34;&gt;&#xA;  使用 plugin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bd%bf%e7%94%a8-plugin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;加载编译好的插件 &lt;code&gt;plugin.Open(&amp;quot;./plugin_doctor.so&amp;quot;)&lt;/code&gt; (&lt;code&gt;*.so&lt;/code&gt; 文件路径相对与可执行文件的路径，可以是绝对路径)&lt;/li&gt;&#xA;&lt;li&gt;寻找插件可到变量 &lt;code&gt;plug.Lookup(&amp;quot;Doctor&amp;quot;)&lt;/code&gt;,&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;TypeAssert: Symbol (interface {})&lt;/code&gt; 转换成 API 的接口类型&lt;/li&gt;&#xA;&lt;li&gt;执行 API interface 的方法&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;优点&#34;&gt;&#xA;  优点&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bc%98%e7%82%b9&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;缺陷&#34;&gt;&#xA;  缺陷&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%ba%e9%99%b7&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;插件实现和主应用程序都必须使用完全相同的 Go 工具链版本构建。&#xA;由于插件提供的代码将与主代码在相同的进程空间中运行，因此编译的二进制文件应与主应用程序 100% 兼容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goroutine</title>
      <link>https://kingye.me/study-go/docs/basic/others/goroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/goroutine/</guid>
      <description>&lt;h1 id=&#34;goroutine&#34;&gt;&#xA;  goroutine&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goroutine&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;golang-并发模型&#34;&gt;&#xA;  golang 并发模型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#golang-%e5%b9%b6%e5%8f%91%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;goroutine-记得-return-或者中断不然容易造成-goroutine-占用大量-cpu&#34;&gt;&#xA;  goroutine 记得 return 或者中断，不然容易造成 goroutine 占用大量 CPU&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goroutine-%e8%ae%b0%e5%be%97-return-%e6%88%96%e8%80%85%e4%b8%ad%e6%96%ad%e4%b8%8d%e7%84%b6%e5%ae%b9%e6%98%93%e9%80%a0%e6%88%90-goroutine-%e5%8d%a0%e7%94%a8%e5%a4%a7%e9%87%8f-cpu&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;goroutine-如何调度&#34;&gt;&#xA;  Goroutine 如何调度？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#goroutine-%e5%a6%82%e4%bd%95%e8%b0%83%e5%ba%a6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;每个线程会都占用 &lt;code&gt;1MB&lt;/code&gt; 以上的内存空间，在对线程进行切换时不止会消耗较多的内存，恢复寄存器中的内容还需要向操作系统申请或者销毁对应的资源，&#xA;每一次线程上下文的切换都需要消耗约为 &lt;code&gt;1us&lt;/code&gt;，&#xA;但是 Go 调度器对 Goroutine 的上下文切换约为 &lt;code&gt;0.2us&lt;/code&gt;，减少了 80% 的额外开销。&lt;/p&gt;&#xA;&lt;p&gt;Go 语言的调度器通过&lt;strong&gt;使用与 CPU 数量相等的线程&lt;/strong&gt;减少线程频繁切换的内存开销，&#xA;同时在每一个线程上执行额外开销更低的 Goroutine 来降低操作系统和硬件的负载。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;一个 Goroutine 既要包含要执行的代码， 又要包含用于执行该代码的&lt;code&gt;栈&lt;/code&gt;和 &lt;code&gt;PC&lt;/code&gt;、&lt;code&gt;SP 指针&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/&#34;&gt;Go 语言调度器与 Goroutine 实现原理&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://colobu.com/2017/05/04/go-scheduler/&#34;&gt;[译] Go 调度器: M, P 和 G&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/&#34;&gt;也谈 goroutine 调度器&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html&#34;&gt;Golang 调度器源码分析&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>io</title>
      <link>https://kingye.me/study-go/docs/basic/std/io/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/io/</guid>
      <description>&lt;h1 id=&#34;iohttpsgolangorgpkgio&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/pkg/io/&#34;&gt;io&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#iohttpsgolangorgpkgio&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小数据量的拷贝，使用 ioutil.ReadAll 无伤大雅；&lt;/li&gt;&#xA;&lt;li&gt;数据量较大时，ReadAll 就是性能炸弹了，最好使用 io.Copy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6977640348679929886&#34;&gt;golang 中的 ioutil.ReadAll vs io.Copy&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>net</title>
      <link>https://kingye.me/study-go/docs/basic/std/net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/net/</guid>
      <description>&lt;h1 id=&#34;nethttpsgolangorgpkgnet&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/pkg/net/&#34;&gt;net&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#nethttpsgolangorgpkgnet&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;http&#34;&gt;&#xA;  http&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#http&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cgi&#34;&gt;&#xA;  cgi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cgi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;fcgi&#34;&gt;&#xA;  fcgi&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#fcgi&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;httputil&#34;&gt;&#xA;  httputil&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#httputil&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;pprof&#34;&gt;&#xA;  pprof&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pprof&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;rpc&#34;&gt;&#xA;  rpc&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rpc&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;url&#34;&gt;&#xA;  url&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#url&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;</description>
    </item>
    <item>
      <title>signal</title>
      <link>https://kingye.me/study-go/docs/basic/std/signal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/signal/</guid>
      <description>&lt;h1 id=&#34;signalhttpspkggodevossignal&#34;&gt;&#xA;  &lt;a href=&#34;https://pkg.go.dev/os/signal&#34;&gt;signal&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#signalhttpspkggodevossignal&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The signals &lt;code&gt;SIGKILL&lt;/code&gt; and &lt;code&gt;SIGSTOP&lt;/code&gt; may not be caught by a program,&#xA;and therefore cannot be affected by this package.&lt;/p&gt;&#xA;&lt;p&gt;By default, a synchronous signal is converted into a run-time panic.&lt;/p&gt;&#xA;&lt;p&gt;A SIGHUP, SIGINT, or SIGTERM signal causes the program to exit.&lt;/p&gt;&#xA;&lt;p&gt;A SIGQUIT, SIGILL, SIGTRAP, SIGABRT, SIGSTKFLT, SIGEMT, or SIGSYS signal causes the program to exit &lt;strong&gt;with a stack dump&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A SIGTSTP, SIGTTIN, or SIGTTOU signal gets the system default behavior (these signals are used by the shell for job control).&lt;/p&gt;</description>
    </item>
    <item>
      <title>sync</title>
      <link>https://kingye.me/study-go/docs/basic/std/sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/sync/</guid>
      <description>&lt;h1 id=&#34;sync&#34;&gt;&#xA;  sync&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sync&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sync.Mutex&lt;/li&gt;&#xA;&lt;li&gt;sync.RWMutex&lt;/li&gt;&#xA;&lt;li&gt;sync.WaitGroup&lt;/li&gt;&#xA;&lt;li&gt;sync.Once&lt;/li&gt;&#xA;&lt;li&gt;sync.Cond&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;锁的类型&#34;&gt;&#xA;  锁的类型&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e9%94%81%e7%9a%84%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mutex-互斥锁&#34;&gt;&#xA;  Mutex 互斥锁&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mutex-%e4%ba%92%e6%96%a5%e9%94%81&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;sema&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// semaphore 信号量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;sync.Mutex.Lock 和 sync.Mutex.Unlock&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;state&#34;&gt;&#xA;  state&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#state&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 8 位&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;**** ****&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*****               *              *           *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;waitersCount  mutexStarving   mutexWoken   mutexLocked&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;mutexLocked — 表示互斥锁的&lt;strong&gt;锁定状态&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;mutexWoken — 表示从正常模式被从唤醒&lt;/li&gt;&#xA;&lt;li&gt;mutexStarving — 当前的互斥锁进入&lt;strong&gt;饥饿状态&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Goroutine 超过 &lt;code&gt;1ms&lt;/code&gt; 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止被饿死，造成&lt;strong&gt;高尾延时&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;waitersCount — 当前互斥锁上&lt;strong&gt;等待&lt;/strong&gt;的 Goroutine 个数 (最多 128 个)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;rwmutex&#34;&gt;&#xA;  RWMutex&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rwmutex&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RWMutex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;writerSem&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;readerSem&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;readerCount&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;readerWait&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;写操作使用 sync.RWMutex.Lock 和 sync.RWMutex.Unlock 方法；&lt;/li&gt;&#xA;&lt;li&gt;读操作使用 sync.RWMutex.RLock 和 sync.RWMutex.RUnlock 方法；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;调用 &lt;code&gt;sync.RWMutex.Lock&lt;/code&gt; 尝试获取写锁时；&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每次 &lt;code&gt;sync.RWMutex.RUnlock&lt;/code&gt; 都会将 readerWait 其减一，当它归零时该 Goroutine 就会获得写锁；&lt;/li&gt;&#xA;&lt;li&gt;将 readerCount 减少 rwmutexMaxReaders 个数以阻塞后续的读操作；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;调用 &lt;code&gt;sync.RWMutex.Unlock&lt;/code&gt; 释放写锁时，会先通知所有的读操作，然后才会释放持有的互斥锁；&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;读写互斥锁在互斥锁之上提供了额外的更细粒度的控制，能够在读操作远远多于写操作时提升性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>time</title>
      <link>https://kingye.me/study-go/docs/basic/std/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/strings/</guid>
      <description>&lt;h1 id=&#34;timehttpspkggodevtime&#34;&gt;&#xA;  &lt;a href=&#34;https://pkg.go.dev/time&#34;&gt;time&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#timehttpspkggodevtime&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;格式化&#34;&gt;&#xA;  格式化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%bc%e5%bc%8f%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1 2 3 4 5 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ANSIC&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mon Jan _2 15:04:05 2006&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>time</title>
      <link>https://kingye.me/study-go/docs/basic/std/time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/std/time/</guid>
      <description>&lt;h1 id=&#34;timehttpspkggodevtime&#34;&gt;&#xA;  &lt;a href=&#34;https://pkg.go.dev/time&#34;&gt;time&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#timehttpspkggodevtime&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;格式化&#34;&gt;&#xA;  格式化&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%bc%e5%bc%8f%e5%8c%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 1 2 3 4 5 6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ANSIC&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mon Jan _2 15:04:05 2006&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Unix&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Format&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2006-01-02 15:04:05&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>并发</title>
      <link>https://kingye.me/study-go/docs/design/runtime/concurrent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/design/runtime/concurrent/</guid>
      <description>&lt;h1 id=&#34;go-并发&#34;&gt;&#xA;  Go 并发&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mutex&#34;&gt;&#xA;  Mutex&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mutex&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 状态&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;sema&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 信号量&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;state (32 位)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;waitersCount (29 位): 当前互斥锁上等待的 Goroutine 个数&lt;/li&gt;&#xA;&lt;li&gt;mutexStarving (1 位): 当前的互斥锁进入&lt;strong&gt;饥饿状态&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Goroutine 超过 1 ms 没有获取到锁，就会转为饥饿模式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;mutexWoken (1 位): 从正常模式被从唤醒&lt;/li&gt;&#xA;&lt;li&gt;mutexLocked (1 位): 互斥锁的锁定状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>版本</title>
      <link>https://kingye.me/study-go/docs/basic/others/version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-go/docs/basic/others/version/</guid>
      <description>&lt;h1 id=&#34;go-版本&#34;&gt;&#xA;  Go 版本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e7%89%88%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go&#34;&gt;golang/go&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/golang/go.svg&#34; alt=&#34;Github stars&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/forks/golang/go.svg&#34; alt=&#34;Github forks&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/golang/go.svg&#34; alt=&#34;Language&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/golang/go.svg?sort=semver&#34; alt=&#34;Last Tag&#34; /&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/golang/go.svg&#34; alt=&#34;Last commit&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;版本历史httpsgolangorgdocdevelreleasehtml&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/devel/release.html&#34;&gt;版本历史&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%89%88%e6%9c%ac%e5%8e%86%e5%8f%b2httpsgolangorgdocdevelreleasehtml&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;120httpsgolangorgdocgo120&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/go1.20&#34;&gt;1.20&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#120httpsgolangorgdocgo120&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;119httpsgolangorgdocgo119-2022-08-02&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/go1.19&#34;&gt;1.19&lt;/a&gt; (2022-08-02)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#119httpsgolangorgdocgo119-2022-08-02&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;它的大部分变化是在工具链、运行时和库的实现方面。&lt;/p&gt;&#xA;&lt;h3 id=&#34;118httpsgolangorgdocgo118-2022-03-15&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/go1.18&#34;&gt;1.18&lt;/a&gt; (2022-03-15)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#118httpsgolangorgdocgo118-2022-03-15&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;范型&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;117httpsgolangorgdocgo117-2021-08-16&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/go1.17&#34;&gt;1.17&lt;/a&gt; (2021-08-16)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#117httpsgolangorgdocgo117-2021-08-16&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;支持从切片到数组指针的转换。&lt;/p&gt;&#xA;&lt;h3 id=&#34;116httpsgolangorgdocgo116-2021-02-16&#34;&gt;&#xA;  &lt;a href=&#34;https://golang.org/doc/go1.16&#34;&gt;1.16&lt;/a&gt; (2021-02-16)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#116httpsgolangorgdocgo116-2021-02-16&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;go build&lt;/code&gt; / &lt;code&gt;go run&lt;/code&gt;命令不再自动更新 go.mod 和 go.sum 了&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要使用 &lt;code&gt;go get&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;go mod tidy&lt;/code&gt; 依然执行对 go.mod 的清理&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;自动更新 go.mod&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;-mod=readonly 选项避免自动更新 go.mod&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;取消自动更新 go.mod&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;后续，Go 团队会让 go get 将专注于分析依赖，并获取 go 包/module，更新 go.mod/go.sum，而不再具有安装可执行 Go 程序的行为能力，&#xA;这样 go get 和 go install 就会各司其职，Gopher 们也不会再被两者的重叠行为所迷惑了。&#xA;现在如果不想 go get 编译安装，可使用 &lt;code&gt;go get -d&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
